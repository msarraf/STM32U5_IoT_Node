
ranging_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000938c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080095c4  080095c4  000195c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096d4  080096d4  000196d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096dc  080096dc  000196dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080096e0  080096e0  000196e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000011  20000000  080096e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000092c  20000014  080096f5  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000940  080096f5  00020940  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020011  2**0
                  CONTENTS, READONLY
 10 .debug_info   00020d56  00000000  00000000  00020047  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000397f  00000000  00000000  00040d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001910  00000000  00000000  00044720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017a8  00000000  00000000  00046030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000385a8  00000000  00000000  000477d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021a67  00000000  00000000  0007fd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015d362  00000000  00000000  000a17e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001feb49  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006c0c  00000000  00000000  001feb9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000014 	.word	0x20000014
 8000254:	00000000 	.word	0x00000000
 8000258:	080095ac 	.word	0x080095ac

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000018 	.word	0x20000018
 8000274:	080095ac 	.word	0x080095ac

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002ae:	4604      	mov	r4, r0
 80002b0:	460f      	mov	r7, r1
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d148      	bne.n	8000348 <__udivmoddi4+0xa0>
 80002b6:	428a      	cmp	r2, r1
 80002b8:	4694      	mov	ip, r2
 80002ba:	d961      	bls.n	8000380 <__udivmoddi4+0xd8>
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	b143      	cbz	r3, 80002d4 <__udivmoddi4+0x2c>
 80002c2:	f1c3 0120 	rsb	r1, r3, #32
 80002c6:	409f      	lsls	r7, r3
 80002c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002cc:	409c      	lsls	r4, r3
 80002ce:	fa20 f101 	lsr.w	r1, r0, r1
 80002d2:	430f      	orrs	r7, r1
 80002d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d8:	fa1f fe8c 	uxth.w	lr, ip
 80002dc:	0c22      	lsrs	r2, r4, #16
 80002de:	fbb7 f6f1 	udiv	r6, r7, r1
 80002e2:	fb01 7716 	mls	r7, r1, r6, r7
 80002e6:	fb06 f00e 	mul.w	r0, r6, lr
 80002ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ee:	4290      	cmp	r0, r2
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0x5c>
 80002f2:	eb1c 0202 	adds.w	r2, ip, r2
 80002f6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x5a>
 80002fc:	4290      	cmp	r0, r2
 80002fe:	f200 8137 	bhi.w	8000570 <__udivmoddi4+0x2c8>
 8000302:	463e      	mov	r6, r7
 8000304:	1a12      	subs	r2, r2, r0
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb2 f0f1 	udiv	r0, r2, r1
 800030c:	fb01 2210 	mls	r2, r1, r0, r2
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000318:	45a6      	cmp	lr, r4
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x86>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 32ff 	add.w	r2, r0, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x84>
 8000326:	45a6      	cmp	lr, r4
 8000328:	f200 811c 	bhi.w	8000564 <__udivmoddi4+0x2bc>
 800032c:	4610      	mov	r0, r2
 800032e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000332:	eba4 040e 	sub.w	r4, r4, lr
 8000336:	2600      	movs	r6, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c5 4300 	strd	r4, r3, [r5]
 8000342:	4631      	mov	r1, r6
 8000344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000348:	428b      	cmp	r3, r1
 800034a:	d909      	bls.n	8000360 <__udivmoddi4+0xb8>
 800034c:	2d00      	cmp	r5, #0
 800034e:	f000 80fd 	beq.w	800054c <__udivmoddi4+0x2a4>
 8000352:	2600      	movs	r6, #0
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	4630      	mov	r0, r6
 800035a:	4631      	mov	r1, r6
 800035c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000360:	fab3 f683 	clz	r6, r3
 8000364:	2e00      	cmp	r6, #0
 8000366:	d14b      	bne.n	8000400 <__udivmoddi4+0x158>
 8000368:	428b      	cmp	r3, r1
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4282      	cmp	r2, r0
 8000370:	f240 80ef 	bls.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4630      	mov	r0, r6
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0e3      	beq.n	8000342 <__udivmoddi4+0x9a>
 800037a:	e9c5 4700 	strd	r4, r7, [r5]
 800037e:	e7e0      	b.n	8000342 <__udivmoddi4+0x9a>
 8000380:	b902      	cbnz	r2, 8000384 <__udivmoddi4+0xdc>
 8000382:	deff      	udf	#255	; 0xff
 8000384:	fab2 f382 	clz	r3, r2
 8000388:	2b00      	cmp	r3, #0
 800038a:	f040 809d 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038e:	1a89      	subs	r1, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b297      	uxth	r7, r2
 8000396:	2601      	movs	r6, #1
 8000398:	0c20      	lsrs	r0, r4, #16
 800039a:	fbb1 f2fe 	udiv	r2, r1, lr
 800039e:	fb0e 1112 	mls	r1, lr, r2, r1
 80003a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a6:	fb07 f002 	mul.w	r0, r7, r2
 80003aa:	4288      	cmp	r0, r1
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1c 0101 	adds.w	r1, ip, r1
 80003b2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4288      	cmp	r0, r1
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80cf 	beq.w	800056a <__udivmoddi4+0x2c2>
 80003cc:	4642      	mov	r2, r8
 80003ce:	1a09      	subs	r1, r1, r0
 80003d0:	b2a4      	uxth	r4, r4
 80003d2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003da:	fb00 f707 	mul.w	r7, r0, r7
 80003de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e2:	42a7      	cmp	r7, r4
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x150>
 80003e6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x14e>
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	f200 80b4 	bhi.w	800055e <__udivmoddi4+0x2b6>
 80003f6:	4608      	mov	r0, r1
 80003f8:	1be4      	subs	r4, r4, r7
 80003fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fe:	e79b      	b.n	8000338 <__udivmoddi4+0x90>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa01 f406 	lsl.w	r4, r1, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	40f9      	lsrs	r1, r7
 8000410:	40b2      	lsls	r2, r6
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa20 f307 	lsr.w	r3, r0, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	431c      	orrs	r4, r3
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	0c20      	lsrs	r0, r4, #16
 800042a:	fbb1 f8f9 	udiv	r8, r1, r9
 800042e:	fb09 1118 	mls	r1, r9, r8, r1
 8000432:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000436:	fb08 f00e 	mul.w	r0, r8, lr
 800043a:	4288      	cmp	r0, r1
 800043c:	d90f      	bls.n	800045e <__udivmoddi4+0x1b6>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f108 3aff 	add.w	sl, r8, #4294967295
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	4288      	cmp	r0, r1
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 808d 	beq.w	8000576 <__udivmoddi4+0x2ce>
 800045c:	46d0      	mov	r8, sl
 800045e:	1a09      	subs	r1, r1, r0
 8000460:	b2a4      	uxth	r4, r4
 8000462:	fbb1 f0f9 	udiv	r0, r1, r9
 8000466:	fb09 1110 	mls	r1, r9, r0, r1
 800046a:	fb00 fe0e 	mul.w	lr, r0, lr
 800046e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000472:	458e      	cmp	lr, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1de>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d201      	bcs.n	8000484 <__udivmoddi4+0x1dc>
 8000480:	458e      	cmp	lr, r1
 8000482:	d87f      	bhi.n	8000584 <__udivmoddi4+0x2dc>
 8000484:	4620      	mov	r0, r4
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	fba0 9802 	umull	r9, r8, r0, r2
 8000492:	4541      	cmp	r1, r8
 8000494:	464c      	mov	r4, r9
 8000496:	46c6      	mov	lr, r8
 8000498:	d302      	bcc.n	80004a0 <__udivmoddi4+0x1f8>
 800049a:	d106      	bne.n	80004aa <__udivmoddi4+0x202>
 800049c:	454b      	cmp	r3, r9
 800049e:	d204      	bcs.n	80004aa <__udivmoddi4+0x202>
 80004a0:	3801      	subs	r0, #1
 80004a2:	ebb9 0402 	subs.w	r4, r9, r2
 80004a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004aa:	2d00      	cmp	r5, #0
 80004ac:	d070      	beq.n	8000590 <__udivmoddi4+0x2e8>
 80004ae:	1b1a      	subs	r2, r3, r4
 80004b0:	eb61 010e 	sbc.w	r1, r1, lr
 80004b4:	fa22 f306 	lsr.w	r3, r2, r6
 80004b8:	fa01 f707 	lsl.w	r7, r1, r7
 80004bc:	40f1      	lsrs	r1, r6
 80004be:	2600      	movs	r6, #0
 80004c0:	431f      	orrs	r7, r3
 80004c2:	e9c5 7100 	strd	r7, r1, [r5]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0020 	rsb	r0, r3, #32
 80004d0:	fa01 f203 	lsl.w	r2, r1, r3
 80004d4:	fa21 f600 	lsr.w	r6, r1, r0
 80004d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004dc:	fa24 f100 	lsr.w	r1, r4, r0
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	409c      	lsls	r4, r3
 80004e6:	4311      	orrs	r1, r2
 80004e8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ec:	0c0a      	lsrs	r2, r1, #16
 80004ee:	fb0e 6610 	mls	r6, lr, r0, r6
 80004f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f6:	fb00 f607 	mul.w	r6, r0, r7
 80004fa:	4296      	cmp	r6, r2
 80004fc:	d90e      	bls.n	800051c <__udivmoddi4+0x274>
 80004fe:	eb1c 0202 	adds.w	r2, ip, r2
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	bf2c      	ite	cs
 8000508:	f04f 0901 	movcs.w	r9, #1
 800050c:	f04f 0900 	movcc.w	r9, #0
 8000510:	4296      	cmp	r6, r2
 8000512:	d902      	bls.n	800051a <__udivmoddi4+0x272>
 8000514:	f1b9 0f00 	cmp.w	r9, #0
 8000518:	d031      	beq.n	800057e <__udivmoddi4+0x2d6>
 800051a:	4640      	mov	r0, r8
 800051c:	1b92      	subs	r2, r2, r6
 800051e:	b289      	uxth	r1, r1
 8000520:	fbb2 f6fe 	udiv	r6, r2, lr
 8000524:	fb0e 2216 	mls	r2, lr, r6, r2
 8000528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800052c:	fb06 f207 	mul.w	r2, r6, r7
 8000530:	428a      	cmp	r2, r1
 8000532:	d907      	bls.n	8000544 <__udivmoddi4+0x29c>
 8000534:	eb1c 0101 	adds.w	r1, ip, r1
 8000538:	f106 38ff 	add.w	r8, r6, #4294967295
 800053c:	d201      	bcs.n	8000542 <__udivmoddi4+0x29a>
 800053e:	428a      	cmp	r2, r1
 8000540:	d823      	bhi.n	800058a <__udivmoddi4+0x2e2>
 8000542:	4646      	mov	r6, r8
 8000544:	1a89      	subs	r1, r1, r2
 8000546:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800054a:	e725      	b.n	8000398 <__udivmoddi4+0xf0>
 800054c:	462e      	mov	r6, r5
 800054e:	4628      	mov	r0, r5
 8000550:	e6f7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000552:	1a84      	subs	r4, r0, r2
 8000554:	eb61 0303 	sbc.w	r3, r1, r3
 8000558:	2001      	movs	r0, #1
 800055a:	461f      	mov	r7, r3
 800055c:	e70b      	b.n	8000376 <__udivmoddi4+0xce>
 800055e:	4464      	add	r4, ip
 8000560:	3802      	subs	r0, #2
 8000562:	e749      	b.n	80003f8 <__udivmoddi4+0x150>
 8000564:	4464      	add	r4, ip
 8000566:	3802      	subs	r0, #2
 8000568:	e6e1      	b.n	800032e <__udivmoddi4+0x86>
 800056a:	3a02      	subs	r2, #2
 800056c:	4461      	add	r1, ip
 800056e:	e72e      	b.n	80003ce <__udivmoddi4+0x126>
 8000570:	3e02      	subs	r6, #2
 8000572:	4462      	add	r2, ip
 8000574:	e6c6      	b.n	8000304 <__udivmoddi4+0x5c>
 8000576:	f1a8 0802 	sub.w	r8, r8, #2
 800057a:	4461      	add	r1, ip
 800057c:	e76f      	b.n	800045e <__udivmoddi4+0x1b6>
 800057e:	3802      	subs	r0, #2
 8000580:	4462      	add	r2, ip
 8000582:	e7cb      	b.n	800051c <__udivmoddi4+0x274>
 8000584:	3802      	subs	r0, #2
 8000586:	4461      	add	r1, ip
 8000588:	e77d      	b.n	8000486 <__udivmoddi4+0x1de>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7d9      	b.n	8000544 <__udivmoddi4+0x29c>
 8000590:	462e      	mov	r6, r5
 8000592:	e6d6      	b.n	8000342 <__udivmoddi4+0x9a>

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005a6:	4909      	ldr	r1, [pc, #36]	; (80005cc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005bc:	68fb      	ldr	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	46020c00 	.word	0x46020c00

080005d0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b085      	sub	sp, #20
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d8:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <LL_APB1_GRP2_EnableClock+0x34>)
 80005da:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005de:	4909      	ldr	r1, [pc, #36]	; (8000604 <LL_APB1_GRP2_EnableClock+0x34>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	46020c00 	.word	0x46020c00

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 fb65 	bl	8001cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f847 	bl	80006a4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000616:	f000 f8a4 	bl	8000762 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 fbef 	bl	8000dfc <MX_GPIO_Init>
  MX_ADF1_Init();
 800061e:	f000 f8af 	bl	8000780 <MX_ADF1_Init>
  MX_I2C1_Init();
 8000622:	f000 f8f9 	bl	8000818 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000626:	f000 f937 	bl	8000898 <MX_I2C2_Init>
  MX_ICACHE_Init();
 800062a:	f000 f975 	bl	8000918 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 800062e:	f000 f987 	bl	8000940 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000632:	f000 f9ff 	bl	8000a34 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8000636:	f000 fa79 	bl	8000b2c <MX_SPI2_Init>
  MX_UART4_Init();
 800063a:	f000 fae5 	bl	8000c08 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800063e:	f000 fb2f 	bl	8000ca0 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8000642:	f000 fb79 	bl	8000d38 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000646:	f000 fbad 	bl	8000da4 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_PORT [LED7], (uint16_t)LED_PIN [LED7], GPIO_PIN_RESET);
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <main+0x90>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	2280      	movs	r2, #128	; 0x80
 8000650:	b291      	uxth	r1, r2
 8000652:	2200      	movs	r2, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f001 ff21 	bl	800249c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f001 fbc1 	bl	8001de4 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_PORT[LED7], (uint16_t)LED_PIN[LED7]);
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <main+0x90>)
 8000664:	685b      	ldr	r3, [r3, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	b292      	uxth	r2, r2
 800066a:	4611      	mov	r1, r2
 800066c:	4618      	mov	r0, r3
 800066e:	f001 ff2d 	bl	80024cc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000676:	f001 fbb5 	bl	8001de4 <HAL_Delay>
	  char *message = "Hello, world!\r\n";
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <main+0x94>)
 800067c:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, 20, HAL_MAX_DELAY);
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	2214      	movs	r2, #20
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4806      	ldr	r0, [pc, #24]	; (80006a0 <main+0x98>)
 8000688:	f007 fd72 	bl	8008170 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f001 fba8 	bl	8001de4 <HAL_Delay>
  {
 8000694:	e7d9      	b.n	800064a <main+0x42>
 8000696:	bf00      	nop
 8000698:	20000000 	.word	0x20000000
 800069c:	080095c4 	.word	0x080095c4
 80006a0:	20000374 	.word	0x20000374

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b09e      	sub	sp, #120	; 0x78
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0318 	add.w	r3, r7, #24
 80006ae:	2260      	movs	r2, #96	; 0x60
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f008 ff72 	bl	800959c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	60da      	str	r2, [r3, #12]
 80006c4:	611a      	str	r2, [r3, #16]
 80006c6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006c8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80006cc:	f003 fad6 	bl	8003c7c <HAL_PWREx_ControlVoltageScaling>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x36>
  {
    Error_Handler();
 80006d6:	f000 fcf3 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80006da:	2330      	movs	r3, #48	; 0x30
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f6:	2301      	movs	r3, #1
 80006f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8000702:	2350      	movs	r3, #80	; 0x50
 8000704:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070e:	2302      	movs	r3, #2
 8000710:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 8000712:	2300      	movs	r3, #0
 8000714:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 0318 	add.w	r3, r7, #24
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fba8 	bl	8003e74 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800072a:	f000 fcc9 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072e:	231f      	movs	r3, #31
 8000730:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000732:	2303      	movs	r3, #3
 8000734:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f004 fa6e 	bl	8004c2c <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000756:	f000 fcb3 	bl	80010c0 <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3778      	adds	r7, #120	; 0x78
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000766:	f003 fb75 	bl	8003e54 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800076a:	2002      	movs	r0, #2
 800076c:	f003 fb12 	bl	8003d94 <HAL_PWREx_ConfigSupply>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000776:	f000 fca3 	bl	80010c0 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000784:	4b21      	ldr	r3, [pc, #132]	; (800080c <MX_ADF1_Init+0x8c>)
 8000786:	4a22      	ldr	r2, [pc, #136]	; (8000810 <MX_ADF1_Init+0x90>)
 8000788:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800078a:	4b20      	ldr	r3, [pc, #128]	; (800080c <MX_ADF1_Init+0x8c>)
 800078c:	2201      	movs	r2, #1
 800078e:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_ADF1_Init+0x8c>)
 8000792:	2200      	movs	r2, #0
 8000794:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_ADF1_Init+0x8c>)
 8000798:	2201      	movs	r2, #1
 800079a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800079e:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_ADF1_Init+0x8c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80007a4:	4b19      	ldr	r3, [pc, #100]	; (800080c <MX_ADF1_Init+0x8c>)
 80007a6:	2204      	movs	r2, #4
 80007a8:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_ADF1_Init+0x8c>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80007b0:	4816      	ldr	r0, [pc, #88]	; (800080c <MX_ADF1_Init+0x8c>)
 80007b2:	f001 fffb 	bl	80027ac <HAL_MDF_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 80007bc:	f000 fc80 	bl	80010c0 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_ADF1_Init+0x94>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80007c6:	4b13      	ldr	r3, [pc, #76]	; (8000814 <MX_ADF1_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ADF1_Init+0x94>)
 80007ce:	2240      	movs	r2, #64	; 0x40
 80007d0:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_ADF1_Init+0x94>)
 80007d4:	2202      	movs	r2, #2
 80007d6:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_ADF1_Init+0x94>)
 80007da:	2200      	movs	r2, #0
 80007dc:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <MX_ADF1_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80007e4:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_ADF1_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_ADF1_Init+0x94>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_ADF1_Init+0x94>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_ADF1_Init+0x94>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000800:	4b04      	ldr	r3, [pc, #16]	; (8000814 <MX_ADF1_Init+0x94>)
 8000802:	2200      	movs	r2, #0
 8000804:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000030 	.word	0x20000030
 8000810:	46024080 	.word	0x46024080
 8000814:	20000074 	.word	0x20000074

08000818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_I2C1_Init+0x74>)
 800081e:	4a1c      	ldr	r2, [pc, #112]	; (8000890 <MX_I2C1_Init+0x78>)
 8000820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_I2C1_Init+0x74>)
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <MX_I2C1_Init+0x7c>)
 8000826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800082e:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_I2C1_Init+0x74>)
 8000830:	2201      	movs	r2, #1
 8000832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_I2C1_Init+0x74>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000852:	480e      	ldr	r0, [pc, #56]	; (800088c <MX_I2C1_Init+0x74>)
 8000854:	f001 fe54 	bl	8002500 <HAL_I2C_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800085e:	f000 fc2f 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000862:	2100      	movs	r1, #0
 8000864:	4809      	ldr	r0, [pc, #36]	; (800088c <MX_I2C1_Init+0x74>)
 8000866:	f001 feda 	bl	800261e <HAL_I2CEx_ConfigAnalogFilter>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000870:	f000 fc26 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000874:	2100      	movs	r1, #0
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_I2C1_Init+0x74>)
 8000878:	f001 ff1c 	bl	80026b4 <HAL_I2CEx_ConfigDigitalFilter>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000882:	f000 fc1d 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000f0 	.word	0x200000f0
 8000890:	40005400 	.word	0x40005400
 8000894:	30909dec 	.word	0x30909dec

08000898 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <MX_I2C2_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	; (8000910 <MX_I2C2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_I2C2_Init+0x74>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <MX_I2C2_Init+0x7c>)
 80008a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_I2C2_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	; (800090c <MX_I2C2_Init+0x74>)
 80008d4:	f001 fe14 	bl	8002500 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008de:	f000 fbef 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <MX_I2C2_Init+0x74>)
 80008e6:	f001 fe9a 	bl	800261e <HAL_I2CEx_ConfigAnalogFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008f0:	f000 fbe6 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2C2_Init+0x74>)
 80008f8:	f001 fedc 	bl	80026b4 <HAL_I2CEx_ConfigDigitalFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000902:	f000 fbdd 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000144 	.word	0x20000144
 8000910:	40005800 	.word	0x40005800
 8000914:	30909dec 	.word	0x30909dec

08000918 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800091c:	2000      	movs	r0, #0
 800091e:	f001 ff15 	bl	800274c <HAL_ICACHE_ConfigAssociativityMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000928:	f000 fbca 	bl	80010c0 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800092c:	f001 ff2e 	bl	800278c <HAL_ICACHE_Enable>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000936:	f000 fbc3 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000946:	f107 0308 	add.w	r3, r7, #8
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000958:	463b      	mov	r3, r7
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000960:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <MX_OCTOSPI1_Init+0xec>)
 8000964:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000974:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000978:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 800097c:	2217      	movs	r2, #23
 800097e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000982:	2201      	movs	r2, #1
 8000984:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 800099a:	2202      	movs	r2, #2
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009ae:	220a      	movs	r2, #10
 80009b0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80009b2:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009c0:	2264      	movs	r2, #100	; 0x64
 80009c2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009c6:	f002 f89d 	bl	8002b04 <HAL_OSPI_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 80009d0:	f000 fb76 	bl	80010c0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 80009d4:	2301      	movs	r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80009d8:	2301      	movs	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80009e0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80009e4:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_OCTOSPI1_Init+0xf0>)
 80009e8:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80009f2:	4619      	mov	r1, r3
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 80009f6:	f002 f9c5 	bl	8002d84 <HAL_OSPIM_Config>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000a00:	f000 fb5e 	bl	80010c0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_OCTOSPI1_Init+0xe8>)
 8000a12:	f002 ffa3 	bl	800395c <HAL_OSPI_DLYB_SetConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000a1c:	f000 fb50 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3720      	adds	r7, #32
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000198 	.word	0x20000198
 8000a2c:	420d1400 	.word	0x420d1400
 8000a30:	01000001 	.word	0x01000001

08000a34 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a56:	4a32      	ldr	r2, [pc, #200]	; (8000b20 <MX_OCTOSPI2_Init+0xec>)
 8000a58:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000a5a:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a60:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000a66:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a6c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000a6e:	4b2b      	ldr	r3, [pc, #172]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a70:	221a      	movs	r2, #26
 8000a72:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000a74:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a76:	2202      	movs	r2, #2
 8000a78:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a80:	4b26      	ldr	r3, [pc, #152]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a86:	4b25      	ldr	r3, [pc, #148]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000a8c:	4b23      	ldr	r3, [pc, #140]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a8e:	2204      	movs	r2, #4
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a92:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000a98:	4b20      	ldr	r3, [pc, #128]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000aa0:	4b1e      	ldr	r3, [pc, #120]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000aa6:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000aac:	4b1b      	ldr	r3, [pc, #108]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000ab2:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000aba:	f002 f823 	bl	8002b04 <HAL_OSPI_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000ac4:	f000 fafc 	bl	80010c0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_OCTOSPI2_Init+0xf0>)
 8000ad6:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_OCTOSPI2_Init+0xf4>)
 8000ada:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000adc:	f107 0308 	add.w	r3, r7, #8
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000ae8:	f002 f94c 	bl	8002d84 <HAL_OSPIM_Config>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000af2:	f000 fae5 	bl	80010c0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000afe:	463b      	mov	r3, r7
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_OCTOSPI2_Init+0xe8>)
 8000b04:	f002 ff2a 	bl	800395c <HAL_OSPI_DLYB_SetConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000b0e:	f000 fad7 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3720      	adds	r7, #32
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200001f4 	.word	0x200001f4
 8000b20:	420d2400 	.word	0x420d2400
 8000b24:	00010002 	.word	0x00010002
 8000b28:	01000002 	.word	0x01000002

08000b2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b3e:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <MX_SPI2_Init+0xd8>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b44:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b2a      	ldr	r3, [pc, #168]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b62:	4b27      	ldr	r3, [pc, #156]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000b68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6a:	4b25      	ldr	r3, [pc, #148]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b84:	2207      	movs	r2, #7
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bc6:	480e      	ldr	r0, [pc, #56]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bc8:	f007 f910 	bl	8007dec <HAL_SPI_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000bd2:	f000 fa75 	bl	80010c0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bde:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_SPI2_Init+0xd4>)
 8000bea:	f007 fa30 	bl	800804e <HAL_SPIEx_SetConfigAutonomousMode>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000bf4:	f000 fa64 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000250 	.word	0x20000250
 8000c04:	40003800 	.word	0x40003800

08000c08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c0e:	4a23      	ldr	r2, [pc, #140]	; (8000c9c <MX_UART4_Init+0x94>)
 8000c10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000c12:	4b21      	ldr	r3, [pc, #132]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c2e:	220c      	movs	r2, #12
 8000c30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c38:	4b17      	ldr	r3, [pc, #92]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c4a:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c52:	f007 fa3d 	bl	80080d0 <HAL_UART_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f000 fa30 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c64:	f007 ff16 	bl	8008a94 <HAL_UARTEx_SetTxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000c6e:	f000 fa27 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c72:	2100      	movs	r1, #0
 8000c74:	4808      	ldr	r0, [pc, #32]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c76:	f007 ff4b 	bl	8008b10 <HAL_UARTEx_SetRxFifoThreshold>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 fa1e 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_UART4_Init+0x90>)
 8000c86:	f007 fecc 	bl	8008a22 <HAL_UARTEx_DisableFifoMode>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c90:	f000 fa16 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200002e0 	.word	0x200002e0
 8000c9c:	40004c00 	.word	0x40004c00

08000ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca4:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000ca6:	4a23      	ldr	r2, [pc, #140]	; (8000d34 <MX_USART1_UART_Init+0x94>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000caa:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd0:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd6:	4b16      	ldr	r3, [pc, #88]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce8:	4811      	ldr	r0, [pc, #68]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cea:	f007 f9f1 	bl	80080d0 <HAL_UART_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cf4:	f000 f9e4 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000cfc:	f007 feca 	bl	8008a94 <HAL_UARTEx_SetTxFifoThreshold>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d06:	f000 f9db 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4808      	ldr	r0, [pc, #32]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000d0e:	f007 feff 	bl	8008b10 <HAL_UARTEx_SetRxFifoThreshold>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d18:	f000 f9d2 	bl	80010c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d1c:	4804      	ldr	r0, [pc, #16]	; (8000d30 <MX_USART1_UART_Init+0x90>)
 8000d1e:	f007 fe80 	bl	8008a22 <HAL_UARTEx_DisableFifoMode>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d28:	f000 f9ca 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000374 	.word	0x20000374
 8000d34:	40013800 	.word	0x40013800

08000d38 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000d4e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000d52:	f7ff fc3d 	bl	80005d0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f7ff fc1e 	bl	8000598 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f7ff fc1b 	bl	8000598 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d70:	463b      	mov	r3, r7
 8000d72:	4619      	mov	r1, r3
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <MX_UCPD1_Init+0x64>)
 8000d76:	f008 f8c1 	bl	8008efc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d80:	2303      	movs	r3, #3
 8000d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d88:	463b      	mov	r3, r7
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_UCPD1_Init+0x68>)
 8000d8e:	f008 f8b5 	bl	8008efc <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	42020000 	.word	0x42020000
 8000da0:	42020400 	.word	0x42020400

08000da4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000daa:	4a13      	ldr	r2, [pc, #76]	; (8000df8 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000dac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000db0:	2206      	movs	r2, #6
 8000db2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000de0:	f002 fe04 	bl	80039ec <HAL_PCD_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000dea:	f000 f969 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000408 	.word	0x20000408
 8000df8:	42040000 	.word	0x42040000

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	; 0x38
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
 8000e10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e12:	4ba3      	ldr	r3, [pc, #652]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e18:	4aa1      	ldr	r2, [pc, #644]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e22:	4b9f      	ldr	r3, [pc, #636]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e2c:	623b      	str	r3, [r7, #32]
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e36:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e40:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	61fb      	str	r3, [r7, #28]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b94      	ldr	r3, [pc, #592]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e54:	4a92      	ldr	r2, [pc, #584]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e5e:	4b90      	ldr	r3, [pc, #576]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e72:	4a8b      	ldr	r2, [pc, #556]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e7c:	4b88      	ldr	r3, [pc, #544]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	4b85      	ldr	r3, [pc, #532]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e90:	4a83      	ldr	r2, [pc, #524]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000eaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eae:	4a7c      	ldr	r2, [pc, #496]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000eb8:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000eba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b76      	ldr	r3, [pc, #472]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ecc:	4a74      	ldr	r2, [pc, #464]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ed6:	4b72      	ldr	r3, [pc, #456]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000edc:	f003 0308 	and.w	r3, r3, #8
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000eea:	4a6d      	ldr	r2, [pc, #436]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000ef6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f02:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f08:	4a65      	ldr	r2, [pc, #404]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000f0a:	f043 0320 	orr.w	r3, r3, #32
 8000f0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f12:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <MX_GPIO_Init+0x2a4>)
 8000f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	2120      	movs	r1, #32
 8000f24:	485f      	ldr	r0, [pc, #380]	; (80010a4 <MX_GPIO_Init+0x2a8>)
 8000f26:	f001 fab9 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	21c2      	movs	r1, #194	; 0xc2
 8000f2e:	485e      	ldr	r0, [pc, #376]	; (80010a8 <MX_GPIO_Init+0x2ac>)
 8000f30:	f001 fab4 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2140      	movs	r1, #64	; 0x40
 8000f38:	485c      	ldr	r0, [pc, #368]	; (80010ac <MX_GPIO_Init+0x2b0>)
 8000f3a:	f001 faaf 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000f44:	485a      	ldr	r0, [pc, #360]	; (80010b0 <MX_GPIO_Init+0x2b4>)
 8000f46:	f001 faa9 	bl	800249c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8000f4a:	f248 0324 	movw	r3, #32804	; 0x8024
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4853      	ldr	r0, [pc, #332]	; (80010ac <MX_GPIO_Init+0x2b0>)
 8000f60:	f001 f8c4 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000f64:	2308      	movs	r3, #8
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	484c      	ldr	r0, [pc, #304]	; (80010a8 <MX_GPIO_Init+0x2ac>)
 8000f78:	f001 f8b8 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000f7c:	2320      	movs	r3, #32
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4844      	ldr	r0, [pc, #272]	; (80010a4 <MX_GPIO_Init+0x2a8>)
 8000f94:	f001 f8aa 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4841      	ldr	r0, [pc, #260]	; (80010b4 <MX_GPIO_Init+0x2b8>)
 8000fae:	f001 f89d 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000fb2:	23c2      	movs	r3, #194	; 0xc2
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4837      	ldr	r0, [pc, #220]	; (80010a8 <MX_GPIO_Init+0x2ac>)
 8000fca:	f001 f88f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000fe0:	2306      	movs	r3, #6
 8000fe2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4831      	ldr	r0, [pc, #196]	; (80010b0 <MX_GPIO_Init+0x2b4>)
 8000fec:	f001 f87e 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8000ff0:	2340      	movs	r3, #64	; 0x40
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4829      	ldr	r0, [pc, #164]	; (80010ac <MX_GPIO_Init+0x2b0>)
 8001008:	f001 f870 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 800100c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101e:	4619      	mov	r1, r3
 8001020:	4825      	ldr	r0, [pc, #148]	; (80010b8 <MX_GPIO_Init+0x2bc>)
 8001022:	f001 f863 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001026:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	4619      	mov	r1, r3
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <MX_GPIO_Init+0x2c0>)
 800103c:	f001 f856 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	4816      	ldr	r0, [pc, #88]	; (80010b0 <MX_GPIO_Init+0x2b4>)
 8001056:	f001 f849 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 800105a:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	480f      	ldr	r0, [pc, #60]	; (80010b0 <MX_GPIO_Init+0x2b4>)
 8001074:	f001 f83a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001078:	2302      	movs	r3, #2
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	2300      	movs	r3, #0
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001088:	2306      	movs	r3, #6
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001090:	4619      	mov	r1, r3
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <MX_GPIO_Init+0x2a8>)
 8001094:	f001 f82a 	bl	80020ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001098:	bf00      	nop
 800109a:	3738      	adds	r7, #56	; 0x38
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	46020c00 	.word	0x46020c00
 80010a4:	42020400 	.word	0x42020400
 80010a8:	42021c00 	.word	0x42021c00
 80010ac:	42021800 	.word	0x42021800
 80010b0:	42021400 	.word	0x42021400
 80010b4:	42020800 	.word	0x42020800
 80010b8:	42020c00 	.word	0x42020c00
 80010bc:	42021000 	.word	0x42021000

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <Error_Handler+0x8>
	...

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x30>)
 80010d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010d8:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x30>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x30>)
 80010e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	607b      	str	r3, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	46020c00 	.word	0x46020c00

08001100 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0bc      	sub	sp, #240	; 0xf0
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22c8      	movs	r2, #200	; 0xc8
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f008 fa3b 	bl	800959c <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <HAL_MDF_MspInit+0xc8>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d146      	bne.n	80011be <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001130:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 800113c:	2300      	movs	r3, #0
 800113e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4618      	mov	r0, r3
 8001148:	f004 f946 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001152:	f7ff ffb5 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 8001158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800115c:	4a1b      	ldr	r2, [pc, #108]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 8001168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800116c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 8001176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 800117c:	f043 0310 	orr.w	r3, r3, #16
 8001180:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_MDF_MspInit+0xcc>)
 8001186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8001192:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80011ac:	2303      	movs	r3, #3
 80011ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_MDF_MspInit+0xd0>)
 80011ba:	f000 ff97 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	37f0      	adds	r7, #240	; 0xf0
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	46024080 	.word	0x46024080
 80011cc:	46020c00 	.word	0x46020c00
 80011d0:	42021000 	.word	0x42021000

080011d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b0be      	sub	sp, #248	; 0xf8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011ec:	f107 0318 	add.w	r3, r7, #24
 80011f0:	22c8      	movs	r2, #200	; 0xc8
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f008 f9d1 	bl	800959c <memset>
  if(hi2c->Instance==I2C1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a4d      	ldr	r2, [pc, #308]	; (8001334 <HAL_I2C_MspInit+0x160>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d147      	bne.n	8001294 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001204:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001210:	2300      	movs	r3, #0
 8001212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001216:	f107 0318 	add.w	r3, r7, #24
 800121a:	4618      	mov	r0, r3
 800121c:	f004 f8dc 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001226:	f7ff ff4b 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	4b43      	ldr	r3, [pc, #268]	; (8001338 <HAL_I2C_MspInit+0x164>)
 800122c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001230:	4a41      	ldr	r2, [pc, #260]	; (8001338 <HAL_I2C_MspInit+0x164>)
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800123a:	4b3f      	ldr	r3, [pc, #252]	; (8001338 <HAL_I2C_MspInit+0x164>)
 800123c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001248:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001262:	2304      	movs	r3, #4
 8001264:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800126c:	4619      	mov	r1, r3
 800126e:	4833      	ldr	r0, [pc, #204]	; (800133c <HAL_I2C_MspInit+0x168>)
 8001270:	f000 ff3c 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001274:	4b30      	ldr	r3, [pc, #192]	; (8001338 <HAL_I2C_MspInit+0x164>)
 8001276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800127a:	4a2f      	ldr	r2, [pc, #188]	; (8001338 <HAL_I2C_MspInit+0x164>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001280:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <HAL_I2C_MspInit+0x164>)
 8001286:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	613b      	str	r3, [r7, #16]
 8001290:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001292:	e04a      	b.n	800132a <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a29      	ldr	r2, [pc, #164]	; (8001340 <HAL_I2C_MspInit+0x16c>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d145      	bne.n	800132a <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800129e:	f04f 0280 	mov.w	r2, #128	; 0x80
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 f88f 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80012c0:	f7ff fefe 	bl	80010c0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_I2C_MspInit+0x164>)
 80012c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012ca:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <HAL_I2C_MspInit+0x164>)
 80012cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <HAL_I2C_MspInit+0x164>)
 80012d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e2:	2330      	movs	r3, #48	; 0x30
 80012e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012fa:	2304      	movs	r3, #4
 80012fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001300:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001304:	4619      	mov	r1, r3
 8001306:	480f      	ldr	r0, [pc, #60]	; (8001344 <HAL_I2C_MspInit+0x170>)
 8001308:	f000 fef0 	bl	80020ec <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_I2C_MspInit+0x164>)
 800130e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001312:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_I2C_MspInit+0x164>)
 8001314:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001318:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_I2C_MspInit+0x164>)
 800131e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
}
 800132a:	bf00      	nop
 800132c:	37f8      	adds	r7, #248	; 0xf8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40005400 	.word	0x40005400
 8001338:	46020c00 	.word	0x46020c00
 800133c:	42020400 	.word	0x42020400
 8001340:	40005800 	.word	0x40005800
 8001344:	42021c00 	.word	0x42021c00

08001348 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b0c8      	sub	sp, #288	; 0x120
 800134c:	af00      	add	r7, sp, #0
 800134e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001352:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001356:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800136c:	22c8      	movs	r2, #200	; 0xc8
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f008 f913 	bl	800959c <memset>
  if(hospi->Instance==OCTOSPI1)
 8001376:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800137a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4aa6      	ldr	r2, [pc, #664]	; (800161c <HAL_OSPI_MspInit+0x2d4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	f040 815d 	bne.w	8001644 <HAL_OSPI_MspInit+0x2fc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800138a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001396:	2300      	movs	r3, #0
 8001398:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 f819 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80013ac:	f7ff fe88 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80013b0:	4b9b      	ldr	r3, [pc, #620]	; (8001620 <HAL_OSPI_MspInit+0x2d8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	4a9a      	ldr	r2, [pc, #616]	; (8001620 <HAL_OSPI_MspInit+0x2d8>)
 80013b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80013ba:	4b99      	ldr	r3, [pc, #612]	; (8001620 <HAL_OSPI_MspInit+0x2d8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d10e      	bne.n	80013e0 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80013c2:	4b98      	ldr	r3, [pc, #608]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013c8:	4a96      	ldr	r2, [pc, #600]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013d2:	4b94      	ldr	r3, [pc, #592]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80013e0:	4b90      	ldr	r3, [pc, #576]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013e6:	4a8f      	ldr	r2, [pc, #572]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013f0:	4b8c      	ldr	r3, [pc, #560]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80013f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80013fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80013fe:	4b89      	ldr	r3, [pc, #548]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001404:	4a87      	ldr	r2, [pc, #540]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800140a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800140e:	4b85      	ldr	r3, [pc, #532]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	637b      	str	r3, [r7, #52]	; 0x34
 800141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800141c:	4b81      	ldr	r3, [pc, #516]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800141e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001422:	4a80      	ldr	r2, [pc, #512]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800142c:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800142e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
 8001438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b7a      	ldr	r3, [pc, #488]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800143c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001440:	4a78      	ldr	r2, [pc, #480]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800144a:	4b76      	ldr	r3, [pc, #472]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800144c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001458:	4b72      	ldr	r3, [pc, #456]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800145e:	4a71      	ldr	r2, [pc, #452]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001468:	4b6e      	ldr	r3, [pc, #440]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800146a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
 8001474:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001476:	4b6b      	ldr	r3, [pc, #428]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800147c:	4a69      	ldr	r2, [pc, #420]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800147e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800148c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001494:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 8001496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800149a:	4a62      	ldr	r2, [pc, #392]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80014a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014aa:	f003 0204 	and.w	r2, r3, #4
 80014ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80014c0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b58      	ldr	r3, [pc, #352]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014c8:	4a56      	ldr	r2, [pc, #344]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014d2:	4b54      	ldr	r3, [pc, #336]	; (8001624 <HAL_OSPI_MspInit+0x2dc>)
 80014d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014d8:	f003 0202 	and.w	r2, r3, #2
 80014dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80014ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80014ee:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001502:	2303      	movs	r3, #3
 8001504:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001508:	2303      	movs	r3, #3
 800150a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 800150e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001512:	4619      	mov	r1, r3
 8001514:	4844      	ldr	r0, [pc, #272]	; (8001628 <HAL_OSPI_MspInit+0x2e0>)
 8001516:	f000 fde9 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 800151a:	2308      	movs	r3, #8
 800151c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001532:	2303      	movs	r3, #3
 8001534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001538:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800153c:	4619      	mov	r1, r3
 800153e:	483b      	ldr	r0, [pc, #236]	; (800162c <HAL_OSPI_MspInit+0x2e4>)
 8001540:	f000 fdd4 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800155c:	230a      	movs	r3, #10
 800155e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8001562:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001566:	4619      	mov	r1, r3
 8001568:	4831      	ldr	r0, [pc, #196]	; (8001630 <HAL_OSPI_MspInit+0x2e8>)
 800156a:	f000 fdbf 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800156e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001572:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001588:	230a      	movs	r3, #10
 800158a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001592:	4619      	mov	r1, r3
 8001594:	4827      	ldr	r0, [pc, #156]	; (8001634 <HAL_OSPI_MspInit+0x2ec>)
 8001596:	f000 fda9 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800159a:	2304      	movs	r3, #4
 800159c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	2303      	movs	r3, #3
 80015ae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80015bc:	4619      	mov	r1, r3
 80015be:	481e      	ldr	r0, [pc, #120]	; (8001638 <HAL_OSPI_MspInit+0x2f0>)
 80015c0:	f000 fd94 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80015c4:	2308      	movs	r3, #8
 80015c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80015dc:	230a      	movs	r3, #10
 80015de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80015e6:	4619      	mov	r1, r3
 80015e8:	4814      	ldr	r0, [pc, #80]	; (800163c <HAL_OSPI_MspInit+0x2f4>)
 80015ea:	f000 fd7f 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80015ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001608:	230a      	movs	r3, #10
 800160a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001612:	4619      	mov	r1, r3
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <HAL_OSPI_MspInit+0x2f8>)
 8001616:	f000 fd69 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 800161a:	e0ed      	b.n	80017f8 <HAL_OSPI_MspInit+0x4b0>
 800161c:	420d1400 	.word	0x420d1400
 8001620:	20000914 	.word	0x20000914
 8001624:	46020c00 	.word	0x46020c00
 8001628:	42022000 	.word	0x42022000
 800162c:	42021000 	.word	0x42021000
 8001630:	42020c00 	.word	0x42020c00
 8001634:	42021400 	.word	0x42021400
 8001638:	42021c00 	.word	0x42021c00
 800163c:	42020800 	.word	0x42020800
 8001640:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 8001644:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001648:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a6c      	ldr	r2, [pc, #432]	; (8001804 <HAL_OSPI_MspInit+0x4bc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	f040 80d0 	bne.w	80017f8 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001658:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001664:	2300      	movs	r3, #0
 8001666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800166e:	4618      	mov	r0, r3
 8001670:	f003 feb2 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 800167a:	f7ff fd21 	bl	80010c0 <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800167e:	4b62      	ldr	r3, [pc, #392]	; (8001808 <HAL_OSPI_MspInit+0x4c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <HAL_OSPI_MspInit+0x4c0>)
 8001686:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001688:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <HAL_OSPI_MspInit+0x4c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d116      	bne.n	80016be <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 8001692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001696:	4a5d      	ldr	r2, [pc, #372]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 8001698:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016a6:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80016bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80016be:	4b53      	ldr	r3, [pc, #332]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c4:	4a51      	ldr	r2, [pc, #324]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80016d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80016e6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016ea:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ec:	4b47      	ldr	r3, [pc, #284]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f2:	4a46      	ldr	r2, [pc, #280]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 80016fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001702:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001706:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800170a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001714:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001718:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 800171c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001720:	4a3a      	ldr	r2, [pc, #232]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 8001722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001726:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 800172c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001730:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001734:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001738:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001742:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001746:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 800174a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174e:	4a2f      	ldr	r2, [pc, #188]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 8001750:	f043 0320 	orr.w	r3, r3, #32
 8001754:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001758:	4b2c      	ldr	r3, [pc, #176]	; (800180c <HAL_OSPI_MspInit+0x4c4>)
 800175a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175e:	f003 0220 	and.w	r2, r3, #32
 8001762:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001766:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001770:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001774:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8001776:	2320      	movs	r3, #32
 8001778:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800178e:	2305      	movs	r3, #5
 8001790:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8001794:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001798:	4619      	mov	r1, r3
 800179a:	481d      	ldr	r0, [pc, #116]	; (8001810 <HAL_OSPI_MspInit+0x4c8>)
 800179c:	f000 fca6 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80017a0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80017a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80017ba:	2305      	movs	r3, #5
 80017bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80017c4:	4619      	mov	r1, r3
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <HAL_OSPI_MspInit+0x4cc>)
 80017c8:	f000 fc90 	bl	80020ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 80017cc:	f241 031f 	movw	r3, #4127	; 0x101f
 80017d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80017e6:	2305      	movs	r3, #5
 80017e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ec:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <HAL_OSPI_MspInit+0x4d0>)
 80017f4:	f000 fc7a 	bl	80020ec <HAL_GPIO_Init>
}
 80017f8:	bf00      	nop
 80017fa:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	420d2400 	.word	0x420d2400
 8001808:	20000914 	.word	0x20000914
 800180c:	46020c00 	.word	0x46020c00
 8001810:	42022000 	.word	0x42022000
 8001814:	42021c00 	.word	0x42021c00
 8001818:	42021400 	.word	0x42021400

0800181c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b0be      	sub	sp, #248	; 0xf8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001834:	f107 0318 	add.w	r3, r7, #24
 8001838:	22c8      	movs	r2, #200	; 0xc8
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f007 fead 	bl	800959c <memset>
  if(hspi->Instance==SPI2)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <HAL_SPI_MspInit+0x110>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d16b      	bne.n	8001924 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800184c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001850:	f04f 0300 	mov.w	r3, #0
 8001854:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001860:	f107 0318 	add.w	r3, r7, #24
 8001864:	4618      	mov	r0, r3
 8001866:	f003 fdb7 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001870:	f7ff fc26 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001874:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_SPI_MspInit+0x114>)
 8001876:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800187a:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_SPI_MspInit+0x114>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001884:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <HAL_SPI_MspInit+0x114>)
 8001886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800188a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <HAL_SPI_MspInit+0x114>)
 8001894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <HAL_SPI_MspInit+0x114>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_SPI_MspInit+0x114>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b0:	4b1f      	ldr	r3, [pc, #124]	; (8001930 <HAL_SPI_MspInit+0x114>)
 80018b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_SPI_MspInit+0x114>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018c0:	4b1b      	ldr	r3, [pc, #108]	; (8001930 <HAL_SPI_MspInit+0x114>)
 80018c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 80018ce:	231a      	movs	r3, #26
 80018d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e6:	2305      	movs	r3, #5
 80018e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4810      	ldr	r0, [pc, #64]	; (8001934 <HAL_SPI_MspInit+0x118>)
 80018f4:	f000 fbfa 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 80018f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001912:	2305      	movs	r3, #5
 8001914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <HAL_SPI_MspInit+0x11c>)
 8001920:	f000 fbe4 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001924:	bf00      	nop
 8001926:	37f8      	adds	r7, #248	; 0xf8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40003800 	.word	0x40003800
 8001930:	46020c00 	.word	0x46020c00
 8001934:	42020c00 	.word	0x42020c00
 8001938:	42020400 	.word	0x42020400

0800193c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b0be      	sub	sp, #248	; 0xf8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001954:	f107 0318 	add.w	r3, r7, #24
 8001958:	22c8      	movs	r2, #200	; 0xc8
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f007 fe1d 	bl	800959c <memset>
  if(huart->Instance==UART4)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_UART_MspInit+0x15c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d146      	bne.n	80019fa <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800196c:	f04f 0208 	mov.w	r2, #8
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001978:	2300      	movs	r3, #0
 800197a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197c:	f107 0318 	add.w	r3, r7, #24
 8001980:	4618      	mov	r0, r3
 8001982:	f003 fd29 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800198c:	f7ff fb98 	bl	80010c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001996:	4a41      	ldr	r2, [pc, #260]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001998:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80019a0:	4b3e      	ldr	r3, [pc, #248]	; (8001a9c <HAL_UART_MspInit+0x160>)
 80019a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_UART_MspInit+0x160>)
 80019b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b4:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_UART_MspInit+0x160>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019be:	4b37      	ldr	r3, [pc, #220]	; (8001a9c <HAL_UART_MspInit+0x160>)
 80019c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80019cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019d0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019e6:	2308      	movs	r3, #8
 80019e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019f0:	4619      	mov	r1, r3
 80019f2:	482b      	ldr	r0, [pc, #172]	; (8001aa0 <HAL_UART_MspInit+0x164>)
 80019f4:	f000 fb7a 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019f8:	e04a      	b.n	8001a90 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <HAL_UART_MspInit+0x168>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d145      	bne.n	8001a90 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a04:	f04f 0201 	mov.w	r2, #1
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a10:	2300      	movs	r3, #0
 8001a12:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0318 	add.w	r3, r7, #24
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fcdd 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001a24:	f7ff fb4c 	bl	80010c0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a2e:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a34:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001a38:	4b18      	ldr	r3, [pc, #96]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a4c:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a56:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <HAL_UART_MspInit+0x160>)
 8001a58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60bb      	str	r3, [r7, #8]
 8001a62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001a64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4807      	ldr	r0, [pc, #28]	; (8001aa8 <HAL_UART_MspInit+0x16c>)
 8001a8c:	f000 fb2e 	bl	80020ec <HAL_GPIO_Init>
}
 8001a90:	bf00      	nop
 8001a92:	37f8      	adds	r7, #248	; 0xf8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40004c00 	.word	0x40004c00
 8001a9c:	46020c00 	.word	0x46020c00
 8001aa0:	42020800 	.word	0x42020800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	42020000 	.word	0x42020000

08001aac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b0be      	sub	sp, #248	; 0xf8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	22c8      	movs	r2, #200	; 0xc8
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f007 fd65 	bl	800959c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a38      	ldr	r2, [pc, #224]	; (8001bb8 <HAL_PCD_MspInit+0x10c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d169      	bne.n	8001bb0 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001adc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aee:	f107 0318 	add.w	r3, r7, #24
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fc70 	bl	80053d8 <HAL_RCCEx_PeriphCLKConfig>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001afe:	f7ff fadf 	bl	80010c0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b08:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001b20:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b44:	4619      	mov	r1, r3
 8001b46:	481e      	ldr	r0, [pc, #120]	; (8001bc0 <HAL_PCD_MspInit+0x114>)
 8001b48:	f000 fad0 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b52:	4a1a      	ldr	r2, [pc, #104]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d119      	bne.n	8001bac <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b78:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	4a0f      	ldr	r2, [pc, #60]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001b96:	f002 f94d 	bl	8003e34 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <HAL_PCD_MspInit+0x110>)
 8001ba2:	f023 0304 	bic.w	r3, r3, #4
 8001ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001baa:	e001      	b.n	8001bb0 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001bac:	f002 f942 	bl	8003e34 <HAL_PWREx_EnableVddUSB>
}
 8001bb0:	bf00      	nop
 8001bb2:	37f8      	adds	r7, #248	; 0xf8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	42040000 	.word	0x42040000
 8001bbc:	46020c00 	.word	0x46020c00
 8001bc0:	42020000 	.word	0x42020000

08001bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <NMI_Handler+0x4>

08001bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bce:	e7fe      	b.n	8001bce <HardFault_Handler+0x4>

08001bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <MemManage_Handler+0x4>

08001bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c10:	f000 f8c8 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c14:	bf00      	nop
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <SystemInit+0x68>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <SystemInit+0x68>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <SystemInit+0x6c>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <SystemInit+0x6c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <SystemInit+0x6c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <SystemInit+0x6c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <SystemInit+0x6c>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <SystemInit+0x6c>)
 8001c4a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001c4e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001c52:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <SystemInit+0x6c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <SystemInit+0x6c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <SystemInit+0x6c>)
 8001c60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <SystemInit+0x6c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <SystemInit+0x68>)
 8001c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c72:	609a      	str	r2, [r3, #8]
  #endif
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	46020c00 	.word	0x46020c00

08001c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cc0 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c8c:	f7ff ffc4 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c90:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c92:	e003      	b.n	8001c9c <LoopCopyDataInit>

08001c94 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c96:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c98:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c9a:	3104      	adds	r1, #4

08001c9c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c9c:	480a      	ldr	r0, [pc, #40]	; (8001cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ca0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ca2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ca4:	d3f6      	bcc.n	8001c94 <CopyDataInit>
	ldr	r2, =_sbss
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ca8:	e002      	b.n	8001cb0 <LoopFillZerobss>

08001caa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001caa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001cac:	f842 3b04 	str.w	r3, [r2], #4

08001cb0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8001cb2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cb4:	d3f9      	bcc.n	8001caa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cb6:	f007 fc4d 	bl	8009554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cba:	f7fe fca5 	bl	8000608 <main>

08001cbe <LoopForever>:

LoopForever:
    b LoopForever
 8001cbe:	e7fe      	b.n	8001cbe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001cc0:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001cc4:	080096e4 	.word	0x080096e4
	ldr	r0, =_sdata
 8001cc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ccc:	20000011 	.word	0x20000011
	ldr	r2, =_sbss
 8001cd0:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001cd4:	20000940 	.word	0x20000940

08001cd8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd8:	e7fe      	b.n	8001cd8 <ADC1_IRQHandler>
	...

08001cdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <HAL_Init+0x4c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a10      	ldr	r2, [pc, #64]	; (8001d28 <HAL_Init+0x4c>)
 8001ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cec:	2003      	movs	r0, #3
 8001cee:	f000 f94f 	bl	8001f90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001cf2:	f003 f98d 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_Init+0x50>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	490b      	ldr	r1, [pc, #44]	; (8001d30 <HAL_Init+0x54>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	fa22 f303 	lsr.w	r3, r2, r3
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_Init+0x58>)
 8001d0a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d0c:	200f      	movs	r0, #15
 8001d0e:	f000 f813 	bl	8001d38 <HAL_InitTick>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e002      	b.n	8001d22 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff f9d6 	bl	80010cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40022000 	.word	0x40022000
 8001d2c:	46020c00 	.word	0x46020c00
 8001d30:	080095d4 	.word	0x080095d4
 8001d34:	20000008 	.word	0x20000008

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_InitTick+0x60>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e021      	b.n	8001d90 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_InitTick+0x64>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_InitTick+0x60>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f939 	bl	8001fda <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e00e      	b.n	8001d90 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b0f      	cmp	r3, #15
 8001d76:	d80a      	bhi.n	8001d8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6879      	ldr	r1, [r7, #4]
 8001d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d80:	f000 f911 	bl	8001fa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d84:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <HAL_InitTick+0x68>)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	e000      	b.n	8001d90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000010 	.word	0x20000010
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	2000000c 	.word	0x2000000c

08001da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000010 	.word	0x20000010
 8001dc8:	20000918 	.word	0x20000918

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000918 	.word	0x20000918

08001de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff ffee 	bl	8001dcc <HAL_GetTick>
 8001df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d005      	beq.n	8001e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_Delay+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	4413      	add	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e0a:	bf00      	nop
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d8f7      	bhi.n	8001e0c <HAL_Delay+0x28>
  {
  }
}
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000010 	.word	0x20000010

08001e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e48:	4013      	ands	r3, r2
 8001e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5e:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <__NVIC_SetPriorityGrouping+0x44>)
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	60d3      	str	r3, [r2, #12]
}
 8001e64:	bf00      	nop
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00

08001e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <__NVIC_GetPriorityGrouping+0x18>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	f003 0307 	and.w	r3, r3, #7
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	6039      	str	r1, [r7, #0]
 8001e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	db0a      	blt.n	8001eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	490c      	ldr	r1, [pc, #48]	; (8001edc <__NVIC_SetPriority+0x4c>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb8:	e00a      	b.n	8001ed0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	4908      	ldr	r1, [pc, #32]	; (8001ee0 <__NVIC_SetPriority+0x50>)
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	3b04      	subs	r3, #4
 8001ec8:	0112      	lsls	r2, r2, #4
 8001eca:	b2d2      	uxtb	r2, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	761a      	strb	r2, [r3, #24]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	e000e100 	.word	0xe000e100
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f1c3 0307 	rsb	r3, r3, #7
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	bf28      	it	cs
 8001f02:	2304      	movcs	r3, #4
 8001f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3304      	adds	r3, #4
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d902      	bls.n	8001f14 <NVIC_EncodePriority+0x30>
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3b03      	subs	r3, #3
 8001f12:	e000      	b.n	8001f16 <NVIC_EncodePriority+0x32>
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	401a      	ands	r2, r3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	43d9      	mvns	r1, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	4313      	orrs	r3, r2
         );
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3724      	adds	r7, #36	; 0x24
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5c:	d301      	bcc.n	8001f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00f      	b.n	8001f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <SysTick_Config+0x40>)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f6a:	210f      	movs	r1, #15
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f7ff ff8e 	bl	8001e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <SysTick_Config+0x40>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f7a:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <SysTick_Config+0x40>)
 8001f7c:	2207      	movs	r2, #7
 8001f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	e000e010 	.word	0xe000e010

08001f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ff47 	bl	8001e2c <__NVIC_SetPriorityGrouping>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	4603      	mov	r3, r0
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
 8001fb2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb4:	f7ff ff5e 	bl	8001e74 <__NVIC_GetPriorityGrouping>
 8001fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	6978      	ldr	r0, [r7, #20]
 8001fc0:	f7ff ff90 	bl	8001ee4 <NVIC_EncodePriority>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff5f 	bl	8001e90 <__NVIC_SetPriority>
}
 8001fd2:	bf00      	nop
 8001fd4:	3718      	adds	r7, #24
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff ffb2 	bl	8001f4c <SysTick_Config>
 8001fe8:	4603      	mov	r3, r0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b084      	sub	sp, #16
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8001ffa:	f7ff fee7 	bl	8001dcc <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e06b      	b.n	80020e2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d008      	beq.n	8002028 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e05c      	b.n	80020e2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0204 	orr.w	r2, r2, #4
 8002036:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2205      	movs	r2, #5
 800203c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002040:	e020      	b.n	8002084 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002042:	f7ff fec3 	bl	8001dcc <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b05      	cmp	r3, #5
 800204e:	d919      	bls.n	8002084 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	f043 0210 	orr.w	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2203      	movs	r2, #3
 8002060:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002074:	2201      	movs	r2, #1
 8002076:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e02e      	b.n	80020e2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0d7      	beq.n	8002042 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0202 	orr.w	r2, r2, #2
 80020a0:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80020b2:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020cc:	2201      	movs	r2, #1
 80020ce:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020fe:	e1ba      	b.n	8002476 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 81aa 	beq.w	8002470 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a55      	ldr	r2, [pc, #340]	; (8002274 <HAL_GPIO_Init+0x188>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d15d      	bne.n	80021e0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800212a:	2201      	movs	r2, #1
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	4013      	ands	r3, r2
 8002138:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0201 	and.w	r2, r3, #1
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69fa      	ldr	r2, [r7, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002154:	4a48      	ldr	r2, [pc, #288]	; (8002278 <HAL_GPIO_Init+0x18c>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800215c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800215e:	4a46      	ldr	r2, [pc, #280]	; (8002278 <HAL_GPIO_Init+0x18c>)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	08da      	lsrs	r2, r3, #3
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3208      	adds	r2, #8
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	4013      	ands	r3, r2
 800218c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220b      	movs	r2, #11
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	08da      	lsrs	r2, r3, #3
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	3208      	adds	r2, #8
 80021aa:	69f9      	ldr	r1, [r7, #28]
 80021ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	2203      	movs	r2, #3
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2202      	movs	r2, #2
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e067      	b.n	80022b0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x104>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b12      	cmp	r3, #18
 80021ee:	d145      	bne.n	800227c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69fa      	ldr	r2, [r7, #28]
 8002210:	4013      	ands	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	4313      	orrs	r3, r2
 800222c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	08da      	lsrs	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3208      	adds	r2, #8
 8002236:	69f9      	ldr	r1, [r7, #28]
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	2203      	movs	r2, #3
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4013      	ands	r3, r2
 8002252:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0203 	and.w	r2, r3, #3
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	4313      	orrs	r3, r2
 8002268:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e01e      	b.n	80022b0 <HAL_GPIO_Init+0x1c4>
 8002272:	bf00      	nop
 8002274:	46020000 	.word	0x46020000
 8002278:	0800962c 	.word	0x0800962c
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	4013      	ands	r3, r2
 8002292:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d00b      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d007      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c4:	2b11      	cmp	r3, #17
 80022c6:	d003      	beq.n	80022d0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b12      	cmp	r3, #18
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69fa      	ldr	r2, [r7, #28]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002306:	2201      	movs	r2, #1
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69fa      	ldr	r2, [r7, #28]
 8002312:	4013      	ands	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	4313      	orrs	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d017      	beq.n	800236a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	4013      	ands	r3, r2
 8002350:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	4313      	orrs	r3, r2
 8002362:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d07c      	beq.n	8002470 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002376:	4a47      	ldr	r2, [pc, #284]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3318      	adds	r3, #24
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	4013      	ands	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	0a9a      	lsrs	r2, r3, #10
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_GPIO_Init+0x3ac>)
 80023a0:	4013      	ands	r3, r2
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	f002 0203 	and.w	r2, r2, #3
 80023a8:	00d2      	lsls	r2, r2, #3
 80023aa:	4093      	lsls	r3, r2
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80023b2:	4938      	ldr	r1, [pc, #224]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3318      	adds	r3, #24
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80023e4:	4a2b      	ldr	r2, [pc, #172]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8002406:	69fa      	ldr	r2, [r7, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800240e:	4a21      	ldr	r2, [pc, #132]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002414:	4b1f      	ldr	r3, [pc, #124]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 8002416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800241a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	4013      	ands	r3, r2
 8002424:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002432:	69fa      	ldr	r2, [r7, #28]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 8002444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002448:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	4013      	ands	r3, r2
 8002452:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002468:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <HAL_GPIO_Init+0x3a8>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	3301      	adds	r3, #1
 8002474:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
 8002480:	2b00      	cmp	r3, #0
 8002482:	f47f ae3d 	bne.w	8002100 <HAL_GPIO_Init+0x14>
  }
}
 8002486:	bf00      	nop
 8002488:	bf00      	nop
 800248a:	3724      	adds	r7, #36	; 0x24
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	46022000 	.word	0x46022000
 8002498:	002f7f7f 	.word	0x002f7f7f

0800249c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	807b      	strh	r3, [r7, #2]
 80024a8:	4613      	mov	r3, r2
 80024aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ac:	787b      	ldrb	r3, [r7, #1]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80024b8:	e002      	b.n	80024c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4013      	ands	r3, r2
 80024e4:	041a      	lsls	r2, r3, #16
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	43d9      	mvns	r1, r3
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	400b      	ands	r3, r1
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
}
 80024f4:	bf00      	nop
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e081      	b.n	8002616 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fe54 	bl	80011d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002550:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002560:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	e006      	b.n	8002588 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002586:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d104      	bne.n	800259a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69d9      	ldr	r1, [r3, #28]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b20      	cmp	r3, #32
 8002632:	d138      	bne.n	80026a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800263e:	2302      	movs	r3, #2
 8002640:	e032      	b.n	80026a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2224      	movs	r2, #36	; 0x24
 800264e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002670:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6819      	ldr	r1, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e000      	b.n	80026a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026a6:	2302      	movs	r3, #2
  }
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d139      	bne.n	800273e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e033      	b.n	8002740 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	; 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002706:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d002      	beq.n	800276a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
 8002768:	e007      	b.n	800277a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 0204 	bic.w	r2, r3, #4
 8002772:	4905      	ldr	r1, [pc, #20]	; (8002788 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	600b      	str	r3, [r1, #0]
  }

  return status;
 800277a:	7bfb      	ldrb	r3, [r7, #15]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	40030400 	.word	0x40030400

0800278c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002790:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_ICACHE_Enable+0x1c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_ICACHE_Enable+0x1c>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40030400 	.word	0x40030400

080027ac <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d102      	bne.n	80027c4 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	73fb      	strb	r3, [r7, #15]
 80027c2:	e141      	b.n	8002a48 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f000 f947 	bl	8002a5c <MDF_GetHandleNumberFromInstance>
 80027ce:	4603      	mov	r3, r0
 80027d0:	4a86      	ldr	r2, [pc, #536]	; (80029ec <HAL_MDF_Init+0x240>)
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
 80027de:	e133      	b.n	8002a48 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7fe fc8d 	bl	8001100 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80027e6:	4b82      	ldr	r3, [pc, #520]	; (80029f0 <HAL_MDF_Init+0x244>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d11d      	bne.n	800282a <HAL_MDF_Init+0x7e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a80      	ldr	r2, [pc, #512]	; (80029f4 <HAL_MDF_Init+0x248>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d023      	beq.n	8002840 <HAL_MDF_Init+0x94>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a7e      	ldr	r2, [pc, #504]	; (80029f8 <HAL_MDF_Init+0x24c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01e      	beq.n	8002840 <HAL_MDF_Init+0x94>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7d      	ldr	r2, [pc, #500]	; (80029fc <HAL_MDF_Init+0x250>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d019      	beq.n	8002840 <HAL_MDF_Init+0x94>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a7b      	ldr	r2, [pc, #492]	; (8002a00 <HAL_MDF_Init+0x254>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d014      	beq.n	8002840 <HAL_MDF_Init+0x94>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a7a      	ldr	r2, [pc, #488]	; (8002a04 <HAL_MDF_Init+0x258>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00f      	beq.n	8002840 <HAL_MDF_Init+0x94>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <HAL_MDF_Init+0x25c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00a      	beq.n	8002840 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800282a:	4b78      	ldr	r3, [pc, #480]	; (8002a0c <HAL_MDF_Init+0x260>)
 800282c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8090 	bne.w	8002954 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a75      	ldr	r2, [pc, #468]	; (8002a10 <HAL_MDF_Init+0x264>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f040 808a 	bne.w	8002954 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <HAL_MDF_Init+0x264>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_MDF_Init+0xa2>
 800284a:	4b72      	ldr	r3, [pc, #456]	; (8002a14 <HAL_MDF_Init+0x268>)
 800284c:	e000      	b.n	8002850 <HAL_MDF_Init+0xa4>
 800284e:	4b72      	ldr	r3, [pc, #456]	; (8002a18 <HAL_MDF_Init+0x26c>)
 8002850:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da02      	bge.n	8002860 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e079      	b.n	8002954 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a63      	ldr	r2, [pc, #396]	; (80029f4 <HAL_MDF_Init+0x248>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d018      	beq.n	800289c <HAL_MDF_Init+0xf0>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a62      	ldr	r2, [pc, #392]	; (80029f8 <HAL_MDF_Init+0x24c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d013      	beq.n	800289c <HAL_MDF_Init+0xf0>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a60      	ldr	r2, [pc, #384]	; (80029fc <HAL_MDF_Init+0x250>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d00e      	beq.n	800289c <HAL_MDF_Init+0xf0>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a5f      	ldr	r2, [pc, #380]	; (8002a00 <HAL_MDF_Init+0x254>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d009      	beq.n	800289c <HAL_MDF_Init+0xf0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <HAL_MDF_Init+0x258>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d004      	beq.n	800289c <HAL_MDF_Init+0xf0>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a5c      	ldr	r2, [pc, #368]	; (8002a08 <HAL_MDF_Init+0x25c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d10d      	bne.n	80028b8 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	431a      	orrs	r2, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	431a      	orrs	r2, r3
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7b1b      	ldrb	r3, [r3, #12]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d137      	bne.n	8002948 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	3b01      	subs	r3, #1
 80028e2:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80028e8:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80028f0:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80028f2:	431a      	orrs	r2, r3
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d123      	bne.n	8002948 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <HAL_MDF_Init+0x248>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d012      	beq.n	8002930 <HAL_MDF_Init+0x184>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <HAL_MDF_Init+0x24c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d00d      	beq.n	8002930 <HAL_MDF_Init+0x184>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_MDF_Init+0x250>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d008      	beq.n	8002930 <HAL_MDF_Init+0x184>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a37      	ldr	r2, [pc, #220]	; (8002a00 <HAL_MDF_Init+0x254>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <HAL_MDF_Init+0x184>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a35      	ldr	r2, [pc, #212]	; (8002a04 <HAL_MDF_Init+0x258>)
 800292e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800293c:	430b      	orrs	r3, r1
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0210 	orr.w	r2, r3, #16
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f043 0201 	orr.w	r2, r3, #1
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d128      	bne.n	80029ac <HAL_MDF_Init+0x200>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002960:	2b01      	cmp	r3, #1
 8002962:	d123      	bne.n	80029ac <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	da02      	bge.n	8002974 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e01b      	b.n	80029ac <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800298c:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d14a      	bne.n	8002a48 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 021f 	bic.w	r2, r2, #31
 80029c0:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_MDF_Init+0x264>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d11e      	bne.n	8002a1c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_MDF_Init+0x260>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_MDF_Init+0x260>)
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	e01d      	b.n	8002a26 <HAL_MDF_Init+0x27a>
 80029ea:	bf00      	nop
 80029ec:	20000924 	.word	0x20000924
 80029f0:	2000091c 	.word	0x2000091c
 80029f4:	40025080 	.word	0x40025080
 80029f8:	40025100 	.word	0x40025100
 80029fc:	40025180 	.word	0x40025180
 8002a00:	40025200 	.word	0x40025200
 8002a04:	40025280 	.word	0x40025280
 8002a08:	40025300 	.word	0x40025300
 8002a0c:	20000920 	.word	0x20000920
 8002a10:	46024080 	.word	0x46024080
 8002a14:	46024000 	.word	0x46024000
 8002a18:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_MDF_Init+0x2a8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_MDF_Init+0x2a8>)
 8002a24:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f000 f816 	bl	8002a5c <MDF_GetHandleNumberFromInstance>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4909      	ldr	r1, [pc, #36]	; (8002a58 <HAL_MDF_Init+0x2ac>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000091c 	.word	0x2000091c
 8002a58:	20000924 	.word	0x20000924

08002a5c <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a19      	ldr	r2, [pc, #100]	; (8002acc <MDF_GetHandleNumberFromInstance+0x70>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e024      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <MDF_GetHandleNumberFromInstance+0x74>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d102      	bne.n	8002a80 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	e01d      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <MDF_GetHandleNumberFromInstance+0x78>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e016      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <MDF_GetHandleNumberFromInstance+0x7c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d102      	bne.n	8002a9c <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002a96:	2303      	movs	r3, #3
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e00f      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	; (8002adc <MDF_GetHandleNumberFromInstance+0x80>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d102      	bne.n	8002aaa <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	e008      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a0c      	ldr	r2, [pc, #48]	; (8002ae0 <MDF_GetHandleNumberFromInstance+0x84>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d102      	bne.n	8002ab8 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002ab2:	2305      	movs	r3, #5
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	e001      	b.n	8002abc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002ab8:	2306      	movs	r3, #6
 8002aba:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 8002abc:	68fb      	ldr	r3, [r7, #12]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40025080 	.word	0x40025080
 8002ad0:	40025100 	.word	0x40025100
 8002ad4:	40025180 	.word	0x40025180
 8002ad8:	40025200 	.word	0x40025200
 8002adc:	40025280 	.word	0x40025280
 8002ae0:	40025300 	.word	0x40025300

08002ae4 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	601a      	str	r2, [r3, #0]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002b10:	f7ff f95c 	bl	8001dcc <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
 8002b20:	e0a5      	b.n	8002c6e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f040 809e 	bne.w	8002c6e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fe fc08 	bl	8001348 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002b38:	f241 3188 	movw	r1, #5000	; 0x1388
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f912 	bl	8002d66 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b4b      	ldr	r3, [pc, #300]	; (8002c78 <HAL_OSPI_Init+0x174>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68d1      	ldr	r1, [r2, #12]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6912      	ldr	r2, [r2, #16]
 8002b54:	3a01      	subs	r2, #1
 8002b56:	0412      	lsls	r2, r2, #16
 8002b58:	4311      	orrs	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6952      	ldr	r2, [r2, #20]
 8002b5e:	3a01      	subs	r2, #1
 8002b60:	0212      	lsls	r2, r2, #8
 8002b62:	4311      	orrs	r1, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	69d2      	ldr	r2, [r2, #28]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1a      	ldr	r2, [r3, #32]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002ba8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2120      	movs	r1, #32
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fdc9 	bl	8003768 <OSPI_WaitFlagStateUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d146      	bne.n	8002c6e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	1e5a      	subs	r2, r3, #1
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c16:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d107      	bne.n	8002c56 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0202 	orr.w	r2, r2, #2
 8002c54:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5e:	d103      	bne.n	8002c68 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	651a      	str	r2, [r3, #80]	; 0x50
 8002c66:	e002      	b.n	8002c6e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	f8e0c0f4 	.word	0xf8e0c0f4

08002c7c <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff f8a0 	bl	8001dcc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d104      	bne.n	8002ca8 <HAL_OSPI_Abort+0x2c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d052      	beq.n	8002d4e <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d014      	beq.n	8002ce0 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f991 	bl	8001ff2 <HAL_DMA_Abort>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8002cd4:	7dfb      	ldrb	r3, [r7, #23]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2204      	movs	r2, #4
 8002cde:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d02b      	beq.n	8002d46 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0202 	orr.w	r2, r2, #2
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	2201      	movs	r2, #1
 8002d08:	2102      	movs	r1, #2
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fd2c 	bl	8003768 <OSPI_WaitFlagStateUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11f      	bne.n	8002d5a <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2202      	movs	r2, #2
 8002d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2120      	movs	r1, #32
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fd1a 	bl	8003768 <OSPI_WaitFlagStateUntilTimeout>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10d      	bne.n	8002d5a <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2202      	movs	r2, #2
 8002d42:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002d44:	e009      	b.n	8002d5a <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002d4c:	e005      	b.n	8002d5a <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2210      	movs	r2, #16
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
 8002d58:	e000      	b.n	8002d5c <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002d5a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b094      	sub	sp, #80	; 0x50
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a9d      	ldr	r2, [pc, #628]	; (8003018 <HAL_OSPIM_Config+0x294>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d105      	bne.n	8002db2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002db0:	e004      	b.n	8002dbc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002db2:	2301      	movs	r3, #1
 8002db4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002dc2:	e01d      	b.n	8002e00 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dc8:	3301      	adds	r3, #1
 8002dca:	b2d8      	uxtb	r0, r3
 8002dcc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002dd0:	f107 0114 	add.w	r1, r7, #20
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	4619      	mov	r1, r3
 8002de0:	f000 fd02 	bl	80037e8 <OSPIM_GetConfig>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2208      	movs	r2, #8
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002e00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d9dd      	bls.n	8002dc4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8002e08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f040 849e 	bne.w	800374e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <HAL_OSPIM_Config+0x294>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00b      	beq.n	8002e36 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002e1e:	4b7e      	ldr	r3, [pc, #504]	; (8003018 <HAL_OSPIM_Config+0x294>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7d      	ldr	r2, [pc, #500]	; (8003018 <HAL_OSPIM_Config+0x294>)
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002e2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002e36:	4b79      	ldr	r3, [pc, #484]	; (800301c <HAL_OSPIM_Config+0x298>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_OSPIM_Config+0x298>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a75      	ldr	r2, [pc, #468]	; (800301c <HAL_OSPIM_Config+0x298>)
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002e4e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8002e5a:	4971      	ldr	r1, [pc, #452]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002e5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3350      	adds	r3, #80	; 0x50
 8002e68:	443b      	add	r3, r7
 8002e6a:	3b34      	subs	r3, #52	; 0x34
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	486a      	ldr	r0, [pc, #424]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002e78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	3350      	adds	r3, #80	; 0x50
 8002e84:	443b      	add	r3, r7
 8002e86:	3b34      	subs	r3, #52	; 0x34
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4403      	add	r3, r0
 8002e94:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8002e96:	4b62      	ldr	r3, [pc, #392]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 80c0 	beq.w	8003024 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a5d      	ldr	r2, [pc, #372]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002eaa:	f023 0301 	bic.w	r3, r3, #1
 8002eae:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8002eb0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	f040 8162 	bne.w	800317e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8002eba:	4959      	ldr	r1, [pc, #356]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002ebc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	3350      	adds	r3, #80	; 0x50
 8002eca:	443b      	add	r3, r7
 8002ecc:	3b3c      	subs	r3, #60	; 0x3c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	4851      	ldr	r0, [pc, #324]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002eda:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	3350      	adds	r3, #80	; 0x50
 8002ee8:	443b      	add	r3, r7
 8002eea:	3b3c      	subs	r3, #60	; 0x3c
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	f041 0202 	orr.w	r2, r1, #2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4403      	add	r3, r0
 8002ef8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002efa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	3350      	adds	r3, #80	; 0x50
 8002f08:	443b      	add	r3, r7
 8002f0a:	3b38      	subs	r3, #56	; 0x38
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01f      	beq.n	8002f52 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8002f12:	4943      	ldr	r1, [pc, #268]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002f14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f18:	4613      	mov	r3, r2
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	4413      	add	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	3350      	adds	r3, #80	; 0x50
 8002f22:	443b      	add	r3, r7
 8002f24:	3b38      	subs	r3, #56	; 0x38
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	483b      	ldr	r0, [pc, #236]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002f32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f36:	4613      	mov	r3, r2
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	4413      	add	r3, r2
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	3350      	adds	r3, #80	; 0x50
 8002f40:	443b      	add	r3, r7
 8002f42:	3b38      	subs	r3, #56	; 0x38
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	f041 0220 	orr.w	r2, r1, #32
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4403      	add	r3, r0
 8002f50:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f56:	4613      	mov	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4413      	add	r3, r2
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	3350      	adds	r3, #80	; 0x50
 8002f60:	443b      	add	r3, r7
 8002f62:	3b30      	subs	r3, #48	; 0x30
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d023      	beq.n	8002fb2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002f6a:	492d      	ldr	r1, [pc, #180]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002f6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f70:	4613      	mov	r3, r2
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	3350      	adds	r3, #80	; 0x50
 8002f7a:	443b      	add	r3, r7
 8002f7c:	3b30      	subs	r3, #48	; 0x30
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	4824      	ldr	r0, [pc, #144]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002f8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3350      	adds	r3, #80	; 0x50
 8002f9c:	443b      	add	r3, r7
 8002f9e:	3b30      	subs	r3, #48	; 0x30
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002fb2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	3350      	adds	r3, #80	; 0x50
 8002fc0:	443b      	add	r3, r7
 8002fc2:	3b2c      	subs	r3, #44	; 0x2c
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80d9 	beq.w	800317e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8002fcc:	4914      	ldr	r1, [pc, #80]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002fce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	3350      	adds	r3, #80	; 0x50
 8002fdc:	443b      	add	r3, r7
 8002fde:	3b2c      	subs	r3, #44	; 0x2c
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	480c      	ldr	r0, [pc, #48]	; (8003020 <HAL_OSPIM_Config+0x29c>)
 8002ff0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	3350      	adds	r3, #80	; 0x50
 8002ffe:	443b      	add	r3, r7
 8003000:	3b2c      	subs	r3, #44	; 0x2c
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3b01      	subs	r3, #1
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4403      	add	r3, r0
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	e0b3      	b.n	800317e <HAL_OSPIM_Config+0x3fa>
 8003016:	bf00      	nop
 8003018:	420d1400 	.word	0x420d1400
 800301c:	420d2400 	.word	0x420d2400
 8003020:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003024:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	3350      	adds	r3, #80	; 0x50
 8003030:	443b      	add	r3, r7
 8003032:	3b3c      	subs	r3, #60	; 0x3c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a1 	beq.w	800317e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800303c:	4993      	ldr	r1, [pc, #588]	; (800328c <HAL_OSPIM_Config+0x508>)
 800303e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	3350      	adds	r3, #80	; 0x50
 800304a:	443b      	add	r3, r7
 800304c:	3b3c      	subs	r3, #60	; 0x3c
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	6859      	ldr	r1, [r3, #4]
 8003058:	488c      	ldr	r0, [pc, #560]	; (800328c <HAL_OSPIM_Config+0x508>)
 800305a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800305c:	4613      	mov	r3, r2
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	3350      	adds	r3, #80	; 0x50
 8003066:	443b      	add	r3, r7
 8003068:	3b3c      	subs	r3, #60	; 0x3c
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	f021 0201 	bic.w	r2, r1, #1
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4403      	add	r3, r0
 8003076:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	3350      	adds	r3, #80	; 0x50
 8003084:	443b      	add	r3, r7
 8003086:	3b38      	subs	r3, #56	; 0x38
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d01d      	beq.n	80030ca <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800308e:	497f      	ldr	r1, [pc, #508]	; (800328c <HAL_OSPIM_Config+0x508>)
 8003090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	3350      	adds	r3, #80	; 0x50
 800309c:	443b      	add	r3, r7
 800309e:	3b38      	subs	r3, #56	; 0x38
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	4878      	ldr	r0, [pc, #480]	; (800328c <HAL_OSPIM_Config+0x508>)
 80030ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	3350      	adds	r3, #80	; 0x50
 80030b8:	443b      	add	r3, r7
 80030ba:	3b38      	subs	r3, #56	; 0x38
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	f021 0210 	bic.w	r2, r1, #16
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	4403      	add	r3, r0
 80030c8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80030ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	3350      	adds	r3, #80	; 0x50
 80030d6:	443b      	add	r3, r7
 80030d8:	3b30      	subs	r3, #48	; 0x30
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d021      	beq.n	8003124 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80030e0:	496a      	ldr	r1, [pc, #424]	; (800328c <HAL_OSPIM_Config+0x508>)
 80030e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	3350      	adds	r3, #80	; 0x50
 80030ee:	443b      	add	r3, r7
 80030f0:	3b30      	subs	r3, #48	; 0x30
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3b01      	subs	r3, #1
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	6859      	ldr	r1, [r3, #4]
 8003100:	4862      	ldr	r0, [pc, #392]	; (800328c <HAL_OSPIM_Config+0x508>)
 8003102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	3350      	adds	r3, #80	; 0x50
 800310e:	443b      	add	r3, r7
 8003110:	3b30      	subs	r3, #48	; 0x30
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4403      	add	r3, r0
 8003122:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	3350      	adds	r3, #80	; 0x50
 8003130:	443b      	add	r3, r7
 8003132:	3b2c      	subs	r3, #44	; 0x2c
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d021      	beq.n	800317e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800313a:	4954      	ldr	r1, [pc, #336]	; (800328c <HAL_OSPIM_Config+0x508>)
 800313c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	3350      	adds	r3, #80	; 0x50
 8003148:	443b      	add	r3, r7
 800314a:	3b2c      	subs	r3, #44	; 0x2c
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3b01      	subs	r3, #1
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	6859      	ldr	r1, [r3, #4]
 800315a:	484c      	ldr	r0, [pc, #304]	; (800328c <HAL_OSPIM_Config+0x508>)
 800315c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	443b      	add	r3, r7
 800316a:	3b2c      	subs	r3, #44	; 0x2c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3b01      	subs	r3, #1
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4403      	add	r3, r0
 800317c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003186:	4613      	mov	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	3350      	adds	r3, #80	; 0x50
 8003190:	443b      	add	r3, r7
 8003192:	3b3c      	subs	r3, #60	; 0x3c
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4299      	cmp	r1, r3
 8003198:	d038      	beq.n	800320c <HAL_OSPIM_Config+0x488>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	6859      	ldr	r1, [r3, #4]
 800319e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	3350      	adds	r3, #80	; 0x50
 80031ac:	443b      	add	r3, r7
 80031ae:	3b38      	subs	r3, #56	; 0x38
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4299      	cmp	r1, r3
 80031b4:	d02a      	beq.n	800320c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	3350      	adds	r3, #80	; 0x50
 80031c8:	443b      	add	r3, r7
 80031ca:	3b34      	subs	r3, #52	; 0x34
 80031cc:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80031ce:	4299      	cmp	r1, r3
 80031d0:	d01c      	beq.n	800320c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	68d9      	ldr	r1, [r3, #12]
 80031d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031da:	4613      	mov	r3, r2
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4413      	add	r3, r2
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	3350      	adds	r3, #80	; 0x50
 80031e4:	443b      	add	r3, r7
 80031e6:	3b30      	subs	r3, #48	; 0x30
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4299      	cmp	r1, r3
 80031ec:	d00e      	beq.n	800320c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6919      	ldr	r1, [r3, #16]
 80031f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	3350      	adds	r3, #80	; 0x50
 8003200:	443b      	add	r3, r7
 8003202:	3b2c      	subs	r3, #44	; 0x2c
 8003204:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003206:	4299      	cmp	r1, r3
 8003208:	f040 810e 	bne.w	8003428 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6819      	ldr	r1, [r3, #0]
 8003210:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	3350      	adds	r3, #80	; 0x50
 800321e:	443b      	add	r3, r7
 8003220:	3b3c      	subs	r3, #60	; 0x3c
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4299      	cmp	r1, r3
 8003226:	d133      	bne.n	8003290 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	3350      	adds	r3, #80	; 0x50
 800323a:	443b      	add	r3, r7
 800323c:	3b38      	subs	r3, #56	; 0x38
 800323e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003240:	4299      	cmp	r1, r3
 8003242:	d125      	bne.n	8003290 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	68d9      	ldr	r1, [r3, #12]
 8003248:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800324c:	4613      	mov	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	3350      	adds	r3, #80	; 0x50
 8003256:	443b      	add	r3, r7
 8003258:	3b30      	subs	r3, #48	; 0x30
 800325a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800325c:	4299      	cmp	r1, r3
 800325e:	d117      	bne.n	8003290 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	6919      	ldr	r1, [r3, #16]
 8003264:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003268:	4613      	mov	r3, r2
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	3350      	adds	r3, #80	; 0x50
 8003272:	443b      	add	r3, r7
 8003274:	3b2c      	subs	r3, #44	; 0x2c
 8003276:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003278:	4299      	cmp	r1, r3
 800327a:	d109      	bne.n	8003290 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_OSPIM_Config+0x508>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_OSPIM_Config+0x508>)
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e0ce      	b.n	8003428 <HAL_OSPIM_Config+0x6a4>
 800328a:	bf00      	nop
 800328c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003290:	49a4      	ldr	r1, [pc, #656]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003292:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	3350      	adds	r3, #80	; 0x50
 80032a0:	443b      	add	r3, r7
 80032a2:	3b3c      	subs	r3, #60	; 0x3c
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	489d      	ldr	r0, [pc, #628]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80032b0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	3350      	adds	r3, #80	; 0x50
 80032be:	443b      	add	r3, r7
 80032c0:	3b3c      	subs	r3, #60	; 0x3c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	f021 0201 	bic.w	r2, r1, #1
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4403      	add	r3, r0
 80032ce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80032d0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	3350      	adds	r3, #80	; 0x50
 80032de:	443b      	add	r3, r7
 80032e0:	3b38      	subs	r3, #56	; 0x38
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01f      	beq.n	8003328 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80032e8:	498e      	ldr	r1, [pc, #568]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80032ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	3350      	adds	r3, #80	; 0x50
 80032f8:	443b      	add	r3, r7
 80032fa:	3b38      	subs	r3, #56	; 0x38
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3b01      	subs	r3, #1
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	6859      	ldr	r1, [r3, #4]
 8003306:	4887      	ldr	r0, [pc, #540]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003308:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	3350      	adds	r3, #80	; 0x50
 8003316:	443b      	add	r3, r7
 8003318:	3b38      	subs	r3, #56	; 0x38
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	f021 0210 	bic.w	r2, r1, #16
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4403      	add	r3, r0
 8003326:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003328:	497e      	ldr	r1, [pc, #504]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800332a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3350      	adds	r3, #80	; 0x50
 8003338:	443b      	add	r3, r7
 800333a:	3b34      	subs	r3, #52	; 0x34
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3b01      	subs	r3, #1
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	4877      	ldr	r0, [pc, #476]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003348:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	3350      	adds	r3, #80	; 0x50
 8003356:	443b      	add	r3, r7
 8003358:	3b34      	subs	r3, #52	; 0x34
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	3b01      	subs	r3, #1
 800335e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4403      	add	r3, r0
 8003366:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003368:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	3350      	adds	r3, #80	; 0x50
 8003376:	443b      	add	r3, r7
 8003378:	3b30      	subs	r3, #48	; 0x30
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d023      	beq.n	80033c8 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003380:	4968      	ldr	r1, [pc, #416]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003382:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003386:	4613      	mov	r3, r2
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	4413      	add	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	3350      	adds	r3, #80	; 0x50
 8003390:	443b      	add	r3, r7
 8003392:	3b30      	subs	r3, #48	; 0x30
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3b01      	subs	r3, #1
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	6859      	ldr	r1, [r3, #4]
 80033a2:	4860      	ldr	r0, [pc, #384]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80033a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	3350      	adds	r3, #80	; 0x50
 80033b2:	443b      	add	r3, r7
 80033b4:	3b30      	subs	r3, #48	; 0x30
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4403      	add	r3, r0
 80033c6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80033c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	3350      	adds	r3, #80	; 0x50
 80033d6:	443b      	add	r3, r7
 80033d8:	3b2c      	subs	r3, #44	; 0x2c
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80033e0:	4950      	ldr	r1, [pc, #320]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80033e2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	3350      	adds	r3, #80	; 0x50
 80033f0:	443b      	add	r3, r7
 80033f2:	3b2c      	subs	r3, #44	; 0x2c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	6859      	ldr	r1, [r3, #4]
 8003402:	4848      	ldr	r0, [pc, #288]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003404:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3350      	adds	r3, #80	; 0x50
 8003412:	443b      	add	r3, r7
 8003414:	3b2c      	subs	r3, #44	; 0x2c
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4403      	add	r3, r0
 8003426:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003428:	4a3e      	ldr	r2, [pc, #248]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	3b01      	subs	r3, #1
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800343a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343c:	025b      	lsls	r3, r3, #9
 800343e:	431a      	orrs	r2, r3
 8003440:	4938      	ldr	r1, [pc, #224]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	3b01      	subs	r3, #1
 8003448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <HAL_OSPIM_Config+0x708>
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003462:	d813      	bhi.n	800348c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	1e5a      	subs	r2, r3, #1
 800346a:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	b2db      	uxtb	r3, r3
 8003472:	429a      	cmp	r2, r3
 8003474:	d90a      	bls.n	800348c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003476:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	3b01      	subs	r3, #1
 8003484:	041b      	lsls	r3, r3, #16
 8003486:	4927      	ldr	r1, [pc, #156]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 809a 	beq.w	80035ce <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800349a:	4a22      	ldr	r2, [pc, #136]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	491d      	ldr	r1, [pc, #116]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	f042 0201 	orr.w	r2, r2, #1
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d011      	beq.n	80034ea <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80034c6:	4a17      	ldr	r2, [pc, #92]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	3b01      	subs	r3, #1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80034d8:	4912      	ldr	r1, [pc, #72]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	f042 0210 	orr.w	r2, r2, #16
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d018      	beq.n	8003528 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800350c:	4905      	ldr	r1, [pc, #20]	; (8003524 <HAL_OSPIM_Config+0x7a0>)
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	3b01      	subs	r3, #1
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	605a      	str	r2, [r3, #4]
 8003522:	e01b      	b.n	800355c <HAL_OSPIM_Config+0x7d8>
 8003524:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003530:	4a8a      	ldr	r2, [pc, #552]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	3b01      	subs	r3, #1
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003546:	4985      	ldr	r1, [pc, #532]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	3b01      	subs	r3, #1
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d016      	beq.n	8003596 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003568:	4a7c      	ldr	r2, [pc, #496]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	3b01      	subs	r3, #1
 8003570:	f003 0301 	and.w	r3, r3, #1
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800357e:	4977      	ldr	r1, [pc, #476]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	3b01      	subs	r3, #1
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	e0c3      	b.n	800371e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 80bf 	beq.w	800371e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035a0:	4a6e      	ldr	r2, [pc, #440]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035b6:	4969      	ldr	r1, [pc, #420]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	3b01      	subs	r3, #1
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	605a      	str	r2, [r3, #4]
 80035cc:	e0a7      	b.n	800371e <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80035ce:	4a63      	ldr	r2, [pc, #396]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 0203 	bic.w	r2, r3, #3
 80035e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	431a      	orrs	r2, r3
 80035e6:	495d      	ldr	r1, [pc, #372]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	f042 0201 	orr.w	r2, r2, #1
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	440b      	add	r3, r1
 80035f6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d014      	beq.n	800362a <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003600:	4a56      	ldr	r2, [pc, #344]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003614:	015b      	lsls	r3, r3, #5
 8003616:	431a      	orrs	r2, r3
 8003618:	4950      	ldr	r1, [pc, #320]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	3b01      	subs	r3, #1
 8003620:	f042 0210 	orr.w	r2, r2, #16
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d019      	beq.n	800366a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003636:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	3b01      	subs	r3, #1
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800364c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800364e:	049b      	lsls	r3, r3, #18
 8003650:	431a      	orrs	r2, r3
 8003652:	4942      	ldr	r1, [pc, #264]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	3b01      	subs	r3, #1
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	e01c      	b.n	80036a4 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d018      	beq.n	80036a4 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003672:	4a3a      	ldr	r2, [pc, #232]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	3b01      	subs	r3, #1
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800368a:	069b      	lsls	r3, r3, #26
 800368c:	431a      	orrs	r2, r3
 800368e:	4933      	ldr	r1, [pc, #204]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d019      	beq.n	80036e4 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036b0:	4a2a      	ldr	r2, [pc, #168]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80036c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c8:	049b      	lsls	r3, r3, #18
 80036ca:	431a      	orrs	r2, r3
 80036cc:	4923      	ldr	r1, [pc, #140]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	e01c      	b.n	800371e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d018      	beq.n	800371e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003704:	069b      	lsls	r3, r3, #26
 8003706:	431a      	orrs	r2, r3
 8003708:	4914      	ldr	r1, [pc, #80]	; (800375c <HAL_OSPIM_Config+0x9d8>)
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	3b01      	subs	r3, #1
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800371e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800372a:	4b0d      	ldr	r3, [pc, #52]	; (8003760 <HAL_OSPIM_Config+0x9dc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a0c      	ldr	r2, [pc, #48]	; (8003760 <HAL_OSPIM_Config+0x9dc>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003736:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003742:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_OSPIM_Config+0x9e0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_OSPIM_Config+0x9e0>)
 8003748:	f043 0301 	orr.w	r3, r3, #1
 800374c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800374e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003752:	4618      	mov	r0, r3
 8003754:	3750      	adds	r7, #80	; 0x50
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	420c4000 	.word	0x420c4000
 8003760:	420d1400 	.word	0x420d1400
 8003764:	420d2400 	.word	0x420d2400

08003768 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003778:	e022      	b.n	80037c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003780:	d01e      	beq.n	80037c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe fb23 	bl	8001dcc <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d113      	bne.n	80037c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6a1a      	ldr	r2, [r3, #32]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	401a      	ands	r2, r3
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d00b      	beq.n	80037c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ae:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0201 	orr.w	r2, r3, #1
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e00e      	b.n	80037de <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf14      	ite	ne
 80037ce:	2301      	movne	r3, #1
 80037d0:	2300      	moveq	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1ce      	bne.n	800377a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d005      	beq.n	800380e <OSPIM_GetConfig+0x26>
 8003802:	79fb      	ldrb	r3, [r7, #7]
 8003804:	2b02      	cmp	r3, #2
 8003806:	d802      	bhi.n	800380e <OSPIM_GetConfig+0x26>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	75fb      	strb	r3, [r7, #23]
 8003812:	e098      	b.n	8003946 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2200      	movs	r2, #0
 800382a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2200      	movs	r2, #0
 8003830:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d10b      	bne.n	8003850 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003838:	4b46      	ldr	r3, [pc, #280]	; (8003954 <OSPIM_GetConfig+0x16c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003844:	4b44      	ldr	r3, [pc, #272]	; (8003958 <OSPIM_GetConfig+0x170>)
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	e002      	b.n	8003850 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800384a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800384e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	e074      	b.n	8003940 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003856:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <OSPIM_GetConfig+0x16c>)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d00a      	beq.n	8003882 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4053      	eors	r3, r2
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00a      	beq.n	80038a2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800388c:	68ba      	ldr	r2, [r7, #8]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4053      	eors	r3, r2
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d103      	bne.n	80038a2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80038ac:	68ba      	ldr	r2, [r7, #8]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4053      	eors	r3, r2
 80038b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d103      	bne.n	80038c2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d018      	beq.n	80038fe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4053      	eors	r3, r2
 80038d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d111      	bne.n	80038fe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d106      	bne.n	80038f2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	e005      	b.n	80038fe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3301      	adds	r3, #1
 80038f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d018      	beq.n	800393a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	4053      	eors	r3, r2
 800390e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d111      	bne.n	800393a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d106      	bne.n	800392e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	611a      	str	r2, [r3, #16]
 800392c:	e005      	b.n	800393a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	3301      	adds	r3, #1
 8003932:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d987      	bls.n	8003856 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	371c      	adds	r7, #28
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	420c4000 	.word	0x420c4000
 8003958:	04040222 	.word	0x04040222

0800395c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f042 0202 	orr.w	r2, r2, #2
 8003978:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2208      	movs	r2, #8
 800397e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d109      	bne.n	800399e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800398a:	4815      	ldr	r0, [pc, #84]	; (80039e0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800398c:	f7ff f8aa 	bl	8002ae4 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003990:	6839      	ldr	r1, [r7, #0]
 8003992:	4813      	ldr	r0, [pc, #76]	; (80039e0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003994:	f005 f948 	bl	8008c28 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	73fb      	strb	r3, [r7, #15]
 800399c:	e00d      	b.n	80039ba <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d108      	bne.n	80039ba <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80039a8:	480f      	ldr	r0, [pc, #60]	; (80039e8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80039aa:	f7ff f89b 	bl	8002ae4 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	480d      	ldr	r0, [pc, #52]	; (80039e8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80039b2:	f005 f939 	bl	8008c28 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff f95e 	bl	8002c7c <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0202 	bic.w	r2, r2, #2
 80039ce:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	420d1400 	.word	0x420d1400
 80039e0:	420cf000 	.word	0x420cf000
 80039e4:	420d2400 	.word	0x420d2400
 80039e8:	420cf400 	.word	0x420cf400

080039ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ee:	b08f      	sub	sp, #60	; 0x3c
 80039f0:	af0a      	add	r7, sp, #40	; 0x28
 80039f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e116      	b.n	8003c2c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fe f847 	bl	8001aac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f005 fb07 	bl	8009050 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	687e      	ldr	r6, [r7, #4]
 8003a4a:	466d      	mov	r5, sp
 8003a4c:	f106 0410 	add.w	r4, r6, #16
 8003a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a60:	1d33      	adds	r3, r6, #4
 8003a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	f005 fac7 	bl	8008ff8 <USB_CoreInit>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0d7      	b.n	8003c2c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f005 faf5 	bl	8009072 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e04a      	b.n	8003b24 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	333d      	adds	r3, #61	; 0x3d
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	333c      	adds	r3, #60	; 0x3c
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ab6:	7bfa      	ldrb	r2, [r7, #15]
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	b298      	uxth	r0, r3
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	3356      	adds	r3, #86	; 0x56
 8003aca:	4602      	mov	r2, r0
 8003acc:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3340      	adds	r3, #64	; 0x40
 8003ade:	2200      	movs	r2, #0
 8003ae0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ae2:	7bfa      	ldrb	r2, [r7, #15]
 8003ae4:	6879      	ldr	r1, [r7, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3344      	adds	r3, #68	; 0x44
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	4413      	add	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3348      	adds	r3, #72	; 0x48
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b0a:	7bfa      	ldrb	r2, [r7, #15]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334c      	adds	r3, #76	; 0x4c
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	3301      	adds	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d3af      	bcc.n	8003a8e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	73fb      	strb	r3, [r7, #15]
 8003b32:	e044      	b.n	8003bbe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b8c:	7bfa      	ldrb	r2, [r7, #15]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ba2:	7bfa      	ldrb	r2, [r7, #15]
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	7bfa      	ldrb	r2, [r7, #15]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3b5      	bcc.n	8003b34 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	687e      	ldr	r6, [r7, #4]
 8003bd0:	466d      	mov	r5, sp
 8003bd2:	f106 0410 	add.w	r4, r6, #16
 8003bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003be2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003be6:	1d33      	adds	r3, r6, #4
 8003be8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bea:	6838      	ldr	r0, [r7, #0]
 8003bec:	f005 fa8e 	bl	800910c <USB_DevInit>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e014      	b.n	8003c2c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f80a 	bl	8003c34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f005 fc32 	bl	800948e <USB_DevDisconnect>

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c66:	f043 0303 	orr.w	r3, r3, #3
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003c84:	4b39      	ldr	r3, [pc, #228]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c8c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10b      	bne.n	8003cae <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d905      	bls.n	8003caa <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003c9e:	4b33      	ldr	r3, [pc, #204]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	4a32      	ldr	r2, [pc, #200]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ca8:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e057      	b.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb4:	d90a      	bls.n	8003ccc <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003cb6:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc8:	60d3      	str	r3, [r2, #12]
 8003cca:	e007      	b.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003ccc:	4b27      	ldr	r3, [pc, #156]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003cd4:	4925      	ldr	r1, [pc, #148]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003cdc:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a24      	ldr	r2, [pc, #144]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2232      	movs	r2, #50	; 0x32
 8003cea:	fb02 f303 	mul.w	r3, r2, r3
 8003cee:	4a21      	ldr	r2, [pc, #132]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf4:	099b      	lsrs	r3, r3, #6
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003cfa:	e002      	b.n	8003d02 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003d02:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f3      	bne.n	8003cfc <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d01b      	beq.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	099b      	lsrs	r3, r3, #6
 8003d26:	2232      	movs	r2, #50	; 0x32
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	4a11      	ldr	r2, [pc, #68]	; (8003d74 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d32:	099b      	lsrs	r3, r3, #6
 8003d34:	3301      	adds	r3, #1
 8003d36:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d38:	e002      	b.n	8003d40 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003d40:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f3      	bne.n	8003d3a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e000      	b.n	8003d5e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	46020800 	.word	0x46020800
 8003d70:	20000008 	.word	0x20000008
 8003d74:	10624dd3 	.word	0x10624dd3

08003d78 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	46020800 	.word	0x46020800

08003d94 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d9c:	4b22      	ldr	r3, [pc, #136]	; (8003e28 <HAL_PWREx_ConfigSupply+0x94>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <HAL_PWREx_ConfigSupply+0x98>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	2232      	movs	r2, #50	; 0x32
 8003daa:	fb02 f303 	mul.w	r3, r2, r3
 8003dae:	4a1f      	ldr	r2, [pc, #124]	; (8003e2c <HAL_PWREx_ConfigSupply+0x98>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	3301      	adds	r3, #1
 8003db8:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d113      	bne.n	8003de8 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dc6:	f023 0302 	bic.w	r3, r3, #2
 8003dca:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003dd4:	4b16      	ldr	r3, [pc, #88]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d116      	bne.n	8003e0e <HAL_PWREx_ConfigSupply+0x7a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f3      	bne.n	8003dce <HAL_PWREx_ConfigSupply+0x3a>
 8003de6:	e012      	b.n	8003e0e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a10      	ldr	r2, [pc, #64]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003df4:	e002      	b.n	8003dfc <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <HAL_PWREx_ConfigSupply+0x9c>)
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_PWREx_ConfigSupply+0x7a>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f3      	bne.n	8003df6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e000      	b.n	8003e1a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000008 	.word	0x20000008
 8003e2c:	10624dd3 	.word	0x10624dd3
 8003e30:	46020800 	.word	0x46020800

08003e34 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003e38:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e42:	6113      	str	r3, [r2, #16]
}
 8003e44:	bf00      	nop
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	46020800 	.word	0x46020800

08003e54 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003e58:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	; (8003e70 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003e5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e62:	6113      	str	r3, [r2, #16]
}
 8003e64:	bf00      	nop
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	46020800 	.word	0x46020800

08003e74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08e      	sub	sp, #56	; 0x38
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f000 bec8 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e8e:	4b99      	ldr	r3, [pc, #612]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e98:	4b96      	ldr	r3, [pc, #600]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 816c 	beq.w	8004188 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x52>
 8003eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb8:	2b0c      	cmp	r3, #12
 8003eba:	f040 80de 	bne.w	800407a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	f040 80da 	bne.w	800407a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f000 bea5 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed8:	4b86      	ldr	r3, [pc, #536]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_RCC_OscConfig+0x7a>
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003eec:	e005      	b.n	8003efa <HAL_RCC_OscConfig+0x86>
 8003eee:	4b81      	ldr	r3, [pc, #516]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef4:	041b      	lsls	r3, r3, #16
 8003ef6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d255      	bcs.n	8003faa <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f001 f9df 	bl	80052cc <RCC_SetFlashLatencyFromMSIRange>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d002      	beq.n	8003f1a <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f000 be82 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f1a:	4b76      	ldr	r3, [pc, #472]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	4a75      	ldr	r2, [pc, #468]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f24:	6093      	str	r3, [r2, #8]
 8003f26:	4b73      	ldr	r3, [pc, #460]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	4970      	ldr	r1, [pc, #448]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003f40:	d309      	bcc.n	8003f56 <HAL_RCC_OscConfig+0xe2>
 8003f42:	4b6c      	ldr	r3, [pc, #432]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f023 021f 	bic.w	r2, r3, #31
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4969      	ldr	r1, [pc, #420]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60cb      	str	r3, [r1, #12]
 8003f54:	e07e      	b.n	8004054 <HAL_RCC_OscConfig+0x1e0>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da0a      	bge.n	8003f74 <HAL_RCC_OscConfig+0x100>
 8003f5e:	4b65      	ldr	r3, [pc, #404]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	015b      	lsls	r3, r3, #5
 8003f6c:	4961      	ldr	r1, [pc, #388]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60cb      	str	r3, [r1, #12]
 8003f72:	e06f      	b.n	8004054 <HAL_RCC_OscConfig+0x1e0>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7c:	d30a      	bcc.n	8003f94 <HAL_RCC_OscConfig+0x120>
 8003f7e:	4b5d      	ldr	r3, [pc, #372]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	029b      	lsls	r3, r3, #10
 8003f8c:	4959      	ldr	r1, [pc, #356]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60cb      	str	r3, [r1, #12]
 8003f92:	e05f      	b.n	8004054 <HAL_RCC_OscConfig+0x1e0>
 8003f94:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	03db      	lsls	r3, r3, #15
 8003fa2:	4954      	ldr	r1, [pc, #336]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60cb      	str	r3, [r1, #12]
 8003fa8:	e054      	b.n	8004054 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003faa:	4b52      	ldr	r3, [pc, #328]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4a51      	ldr	r2, [pc, #324]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fb4:	6093      	str	r3, [r2, #8]
 8003fb6:	4b4f      	ldr	r3, [pc, #316]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	494c      	ldr	r1, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003fd0:	d309      	bcc.n	8003fe6 <HAL_RCC_OscConfig+0x172>
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f023 021f 	bic.w	r2, r3, #31
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4945      	ldr	r1, [pc, #276]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60cb      	str	r3, [r1, #12]
 8003fe4:	e028      	b.n	8004038 <HAL_RCC_OscConfig+0x1c4>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da0a      	bge.n	8004004 <HAL_RCC_OscConfig+0x190>
 8003fee:	4b41      	ldr	r3, [pc, #260]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	015b      	lsls	r3, r3, #5
 8003ffc:	493d      	ldr	r1, [pc, #244]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60cb      	str	r3, [r1, #12]
 8004002:	e019      	b.n	8004038 <HAL_RCC_OscConfig+0x1c4>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400c:	d30a      	bcc.n	8004024 <HAL_RCC_OscConfig+0x1b0>
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	029b      	lsls	r3, r3, #10
 800401c:	4935      	ldr	r1, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 800401e:	4313      	orrs	r3, r2
 8004020:	60cb      	str	r3, [r1, #12]
 8004022:	e009      	b.n	8004038 <HAL_RCC_OscConfig+0x1c4>
 8004024:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	03db      	lsls	r3, r3, #15
 8004032:	4930      	ldr	r1, [pc, #192]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8004034:	4313      	orrs	r3, r2
 8004036:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	4618      	mov	r0, r3
 8004044:	f001 f942 	bl	80052cc <RCC_SetFlashLatencyFromMSIRange>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d002      	beq.n	8004054 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f000 bde5 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004054:	f001 f8e4 	bl	8005220 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004058:	4b27      	ldr	r3, [pc, #156]	; (80040f8 <HAL_RCC_OscConfig+0x284>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fd fe6b 	bl	8001d38 <HAL_InitTick>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 808a 	beq.w	8004186 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004072:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004076:	f000 bdd2 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d066      	beq.n	8004150 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004082:	4b1c      	ldr	r3, [pc, #112]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a1b      	ldr	r2, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 8004088:	f043 0301 	orr.w	r3, r3, #1
 800408c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800408e:	f7fd fe9d 	bl	8001dcc <HAL_GetTick>
 8004092:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004094:	e009      	b.n	80040aa <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004096:	f7fd fe99 	bl	8001dcc <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d902      	bls.n	80040aa <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	f000 bdba 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0ef      	beq.n	8004096 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	4909      	ldr	r1, [pc, #36]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80040dc:	d30e      	bcc.n	80040fc <HAL_RCC_OscConfig+0x288>
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f023 021f 	bic.w	r2, r3, #31
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4902      	ldr	r1, [pc, #8]	; (80040f4 <HAL_RCC_OscConfig+0x280>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
 80040f0:	e04a      	b.n	8004188 <HAL_RCC_OscConfig+0x314>
 80040f2:	bf00      	nop
 80040f4:	46020c00 	.word	0x46020c00
 80040f8:	2000000c 	.word	0x2000000c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	da0a      	bge.n	800411a <HAL_RCC_OscConfig+0x2a6>
 8004104:	4b98      	ldr	r3, [pc, #608]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	015b      	lsls	r3, r3, #5
 8004112:	4995      	ldr	r1, [pc, #596]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004114:	4313      	orrs	r3, r2
 8004116:	60cb      	str	r3, [r1, #12]
 8004118:	e036      	b.n	8004188 <HAL_RCC_OscConfig+0x314>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004122:	d30a      	bcc.n	800413a <HAL_RCC_OscConfig+0x2c6>
 8004124:	4b90      	ldr	r3, [pc, #576]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	029b      	lsls	r3, r3, #10
 8004132:	498d      	ldr	r1, [pc, #564]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004134:	4313      	orrs	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]
 8004138:	e026      	b.n	8004188 <HAL_RCC_OscConfig+0x314>
 800413a:	4b8b      	ldr	r3, [pc, #556]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	03db      	lsls	r3, r3, #15
 8004148:	4987      	ldr	r1, [pc, #540]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	60cb      	str	r3, [r1, #12]
 800414e:	e01b      	b.n	8004188 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004150:	4b85      	ldr	r3, [pc, #532]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a84      	ldr	r2, [pc, #528]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800415c:	f7fd fe36 	bl	8001dcc <HAL_GetTick>
 8004160:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004162:	e009      	b.n	8004178 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004164:	f7fd fe32 	bl	8001dcc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d902      	bls.n	8004178 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	f000 bd53 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004178:	4b7b      	ldr	r3, [pc, #492]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ef      	bne.n	8004164 <HAL_RCC_OscConfig+0x2f0>
 8004184:	e000      	b.n	8004188 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004186:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0301 	and.w	r3, r3, #1
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 808b 	beq.w	80042ac <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2b08      	cmp	r3, #8
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x334>
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d17d      	bne.n	80042ac <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	f000 bd34 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041be:	d106      	bne.n	80041ce <HAL_RCC_OscConfig+0x35a>
 80041c0:	4b69      	ldr	r3, [pc, #420]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a68      	ldr	r2, [pc, #416]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e041      	b.n	8004252 <HAL_RCC_OscConfig+0x3de>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041d6:	d112      	bne.n	80041fe <HAL_RCC_OscConfig+0x38a>
 80041d8:	4b63      	ldr	r3, [pc, #396]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a62      	ldr	r2, [pc, #392]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b60      	ldr	r3, [pc, #384]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5f      	ldr	r2, [pc, #380]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b5d      	ldr	r3, [pc, #372]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a5c      	ldr	r2, [pc, #368]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e029      	b.n	8004252 <HAL_RCC_OscConfig+0x3de>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004206:	d112      	bne.n	800422e <HAL_RCC_OscConfig+0x3ba>
 8004208:	4b57      	ldr	r3, [pc, #348]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a56      	ldr	r2, [pc, #344]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800420e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b54      	ldr	r3, [pc, #336]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a53      	ldr	r2, [pc, #332]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	4b51      	ldr	r3, [pc, #324]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a50      	ldr	r2, [pc, #320]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e011      	b.n	8004252 <HAL_RCC_OscConfig+0x3de>
 800422e:	4b4e      	ldr	r3, [pc, #312]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	6013      	str	r3, [r2, #0]
 800423a:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4a      	ldr	r2, [pc, #296]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b48      	ldr	r3, [pc, #288]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a47      	ldr	r2, [pc, #284]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800424c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004250:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d014      	beq.n	8004284 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800425a:	f7fd fdb7 	bl	8001dcc <HAL_GetTick>
 800425e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004260:	e009      	b.n	8004276 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004262:	f7fd fdb3 	bl	8001dcc <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	2b64      	cmp	r3, #100	; 0x64
 800426e:	d902      	bls.n	8004276 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004270:	2303      	movs	r3, #3
 8004272:	f000 bcd4 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004276:	4b3c      	ldr	r3, [pc, #240]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ef      	beq.n	8004262 <HAL_RCC_OscConfig+0x3ee>
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004284:	f7fd fda2 	bl	8001dcc <HAL_GetTick>
 8004288:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800428a:	e009      	b.n	80042a0 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fd9e 	bl	8001dcc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d902      	bls.n	80042a0 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f000 bcbf 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042a0:	4b31      	ldr	r3, [pc, #196]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1ef      	bne.n	800428c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05f      	beq.n	8004378 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d005      	beq.n	80042ca <HAL_RCC_OscConfig+0x456>
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d114      	bne.n	80042ee <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d111      	bne.n	80042ee <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	f000 bca3 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b23      	ldr	r3, [pc, #140]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	4920      	ldr	r1, [pc, #128]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80042ec:	e044      	b.n	8004378 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d024      	beq.n	8004340 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80042f6:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a1b      	ldr	r2, [pc, #108]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004302:	f7fd fd63 	bl	8001dcc <HAL_GetTick>
 8004306:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004308:	e009      	b.n	800431e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430a:	f7fd fd5f 	bl	8001dcc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d902      	bls.n	800431e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	f000 bc80 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800431e:	4b12      	ldr	r3, [pc, #72]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ef      	beq.n	800430a <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800432a:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	490b      	ldr	r1, [pc, #44]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 800433a:	4313      	orrs	r3, r2
 800433c:	610b      	str	r3, [r1, #16]
 800433e:	e01b      	b.n	8004378 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a08      	ldr	r2, [pc, #32]	; (8004368 <HAL_RCC_OscConfig+0x4f4>)
 8004346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800434a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800434c:	f7fd fd3e 	bl	8001dcc <HAL_GetTick>
 8004350:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004352:	e00b      	b.n	800436c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004354:	f7fd fd3a 	bl	8001dcc <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b02      	cmp	r3, #2
 8004360:	d904      	bls.n	800436c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	f000 bc5b 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
 8004368:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800436c:	4baf      	ldr	r3, [pc, #700]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ed      	bne.n	8004354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 80c8 	beq.w	8004516 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800438c:	4ba7      	ldr	r3, [pc, #668]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	f003 0304 	and.w	r3, r3, #4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d111      	bne.n	80043be <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800439a:	4ba4      	ldr	r3, [pc, #656]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800439c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043a0:	4aa2      	ldr	r2, [pc, #648]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80043a2:	f043 0304 	orr.w	r3, r3, #4
 80043a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043aa:	4ba0      	ldr	r3, [pc, #640]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80043ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80043b8:	2301      	movs	r3, #1
 80043ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043be:	4b9c      	ldr	r3, [pc, #624]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d119      	bne.n	80043fe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80043ca:	4b99      	ldr	r3, [pc, #612]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	4a98      	ldr	r2, [pc, #608]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043d6:	f7fd fcf9 	bl	8001dcc <HAL_GetTick>
 80043da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043dc:	e009      	b.n	80043f2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043de:	f7fd fcf5 	bl	8001dcc <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d902      	bls.n	80043f2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	f000 bc16 	b.w	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043f2:	4b8f      	ldr	r3, [pc, #572]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ef      	beq.n	80043de <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d05f      	beq.n	80044c6 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440c:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004418:	429a      	cmp	r2, r3
 800441a:	d037      	beq.n	800448c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800442c:	2b00      	cmp	r3, #0
 800442e:	d101      	bne.n	8004434 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e3f4      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d01b      	beq.n	8004476 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 800443e:	4b7b      	ldr	r3, [pc, #492]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004444:	4a79      	ldr	r2, [pc, #484]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004446:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800444a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800444e:	f7fd fcbd 	bl	8001dcc <HAL_GetTick>
 8004452:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004456:	f7fd fcb9 	bl	8001dcc <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b05      	cmp	r3, #5
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e3da      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004468:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800446a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800446e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ef      	bne.n	8004456 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004476:	4b6d      	ldr	r3, [pc, #436]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800447c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	4969      	ldr	r1, [pc, #420]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800448c:	4b67      	ldr	r3, [pc, #412]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800448e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004492:	4a66      	ldr	r2, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004498:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800449c:	f7fd fc96 	bl	8001dcc <HAL_GetTick>
 80044a0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fd fc92 	bl	8001dcc <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e3b3      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80044b6:	4b5d      	ldr	r3, [pc, #372]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80044b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0ef      	beq.n	80044a4 <HAL_RCC_OscConfig+0x630>
 80044c4:	e01b      	b.n	80044fe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80044c6:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80044c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044cc:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80044ce:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80044d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80044d6:	f7fd fc79 	bl	8001dcc <HAL_GetTick>
 80044da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044de:	f7fd fc75 	bl	8001dcc <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e396      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044f0:	4b4e      	ldr	r3, [pc, #312]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80044f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ef      	bne.n	80044de <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004506:	4b49      	ldr	r3, [pc, #292]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	4a47      	ldr	r2, [pc, #284]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800450e:	f023 0304 	bic.w	r3, r3, #4
 8004512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8111 	beq.w	8004746 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800452a:	4b40      	ldr	r3, [pc, #256]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800452c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004530:	f003 0304 	and.w	r3, r3, #4
 8004534:	2b00      	cmp	r3, #0
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004538:	4b3c      	ldr	r3, [pc, #240]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800453a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800453e:	4a3b      	ldr	r2, [pc, #236]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004548:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 800454a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800455c:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d118      	bne.n	800459a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004568:	4b31      	ldr	r3, [pc, #196]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	4a30      	ldr	r2, [pc, #192]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004574:	f7fd fc2a 	bl	8001dcc <HAL_GetTick>
 8004578:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457c:	f7fd fc26 	bl	8001dcc <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e347      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_RCC_OscConfig+0x7bc>)
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d01f      	beq.n	80045e6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d010      	beq.n	80045d4 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045b2:	4b1e      	ldr	r3, [pc, #120]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045b8:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045c2:	4b1a      	ldr	r3, [pc, #104]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045c8:	4a18      	ldr	r2, [pc, #96]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045ca:	f043 0301 	orr.w	r3, r3, #1
 80045ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045d2:	e018      	b.n	8004606 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045d4:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045da:	4a14      	ldr	r2, [pc, #80]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045e4:	e00f      	b.n	8004606 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045e6:	4b11      	ldr	r3, [pc, #68]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045ec:	4a0f      	ldr	r2, [pc, #60]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80045f6:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x7b8>)
 80045fe:	f023 0304 	bic.w	r3, r3, #4
 8004602:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d057      	beq.n	80046be <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 800460e:	f7fd fbdd 	bl	8001dcc <HAL_GetTick>
 8004612:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004614:	e00e      	b.n	8004634 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fd fbd9 	bl	8001dcc <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d905      	bls.n	8004634 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e2f8      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
 800462c:	46020c00 	.word	0x46020c00
 8004630:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004634:	4b9c      	ldr	r3, [pc, #624]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0e9      	beq.n	8004616 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d01b      	beq.n	8004686 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800464e:	4b96      	ldr	r3, [pc, #600]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004650:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004654:	4a94      	ldr	r2, [pc, #592]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fd fbb4 	bl	8001dcc <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e2d3      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004676:	4b8c      	ldr	r3, [pc, #560]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800467c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0ed      	beq.n	8004660 <HAL_RCC_OscConfig+0x7ec>
 8004684:	e053      	b.n	800472e <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004686:	4b88      	ldr	r3, [pc, #544]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004688:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800468c:	4a86      	ldr	r2, [pc, #536]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800468e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004692:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fd fb98 	bl	8001dcc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e2b7      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80046ae:	4b7e      	ldr	r3, [pc, #504]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80046b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1ed      	bne.n	8004698 <HAL_RCC_OscConfig+0x824>
 80046bc:	e037      	b.n	800472e <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80046be:	f7fd fb85 	bl	8001dcc <HAL_GetTick>
 80046c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046c4:	e00a      	b.n	80046dc <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fd fb81 	bl	8001dcc <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e2a0      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046dc:	4b72      	ldr	r3, [pc, #456]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80046de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1ed      	bne.n	80046c6 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80046ea:	4b6f      	ldr	r3, [pc, #444]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80046ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d01a      	beq.n	800472e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046f8:	4b6b      	ldr	r3, [pc, #428]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80046fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046fe:	4a6a      	ldr	r2, [pc, #424]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004708:	e00a      	b.n	8004720 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470a:	f7fd fb5f 	bl	8001dcc <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	f241 3288 	movw	r2, #5000	; 0x1388
 8004718:	4293      	cmp	r3, r2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e27e      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ed      	bne.n	800470a <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800472e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004732:	2b01      	cmp	r3, #1
 8004734:	d107      	bne.n	8004746 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004736:	4b5c      	ldr	r3, [pc, #368]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800473c:	4a5a      	ldr	r2, [pc, #360]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800473e:	f023 0304 	bic.w	r3, r3, #4
 8004742:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d036      	beq.n	80047c0 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d019      	beq.n	800478e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800475a:	4b53      	ldr	r3, [pc, #332]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a52      	ldr	r2, [pc, #328]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004760:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004764:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004766:	f7fd fb31 	bl	8001dcc <HAL_GetTick>
 800476a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800476e:	f7fd fb2d 	bl	8001dcc <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e24e      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x8fa>
 800478c:	e018      	b.n	80047c0 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800478e:	4b46      	ldr	r3, [pc, #280]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a45      	ldr	r2, [pc, #276]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004798:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800479a:	f7fd fb17 	bl	8001dcc <HAL_GetTick>
 800479e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80047a0:	e008      	b.n	80047b4 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a2:	f7fd fb13 	bl	8001dcc <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e234      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80047b4:	4b3c      	ldr	r3, [pc, #240]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f0      	bne.n	80047a2 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d036      	beq.n	800483a <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d019      	beq.n	8004808 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80047d4:	4b34      	ldr	r3, [pc, #208]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a33      	ldr	r2, [pc, #204]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80047da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047e0:	f7fd faf4 	bl	8001dcc <HAL_GetTick>
 80047e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80047e8:	f7fd faf0 	bl	8001dcc <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e211      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80047fa:	4b2b      	ldr	r3, [pc, #172]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x974>
 8004806:	e018      	b.n	800483a <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a26      	ldr	r2, [pc, #152]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800480e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004812:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004814:	f7fd fada 	bl	8001dcc <HAL_GetTick>
 8004818:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800481c:	f7fd fad6 	bl	8001dcc <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e1f7      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800482e:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004842:	2b00      	cmp	r3, #0
 8004844:	d07f      	beq.n	8004946 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484a:	2b00      	cmp	r3, #0
 800484c:	d062      	beq.n	8004914 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4a15      	ldr	r2, [pc, #84]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004858:	6093      	str	r3, [r2, #8]
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	4910      	ldr	r1, [pc, #64]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004868:	4313      	orrs	r3, r2
 800486a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004874:	d309      	bcc.n	800488a <HAL_RCC_OscConfig+0xa16>
 8004876:	4b0c      	ldr	r3, [pc, #48]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f023 021f 	bic.w	r2, r3, #31
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	4909      	ldr	r1, [pc, #36]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
 8004888:	e02a      	b.n	80048e0 <HAL_RCC_OscConfig+0xa6c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	da0c      	bge.n	80048ac <HAL_RCC_OscConfig+0xa38>
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
 800489e:	015b      	lsls	r3, r3, #5
 80048a0:	4901      	ldr	r1, [pc, #4]	; (80048a8 <HAL_RCC_OscConfig+0xa34>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60cb      	str	r3, [r1, #12]
 80048a6:	e01b      	b.n	80048e0 <HAL_RCC_OscConfig+0xa6c>
 80048a8:	46020c00 	.word	0x46020c00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d30a      	bcc.n	80048cc <HAL_RCC_OscConfig+0xa58>
 80048b6:	4ba1      	ldr	r3, [pc, #644]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	499d      	ldr	r1, [pc, #628]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60cb      	str	r3, [r1, #12]
 80048ca:	e009      	b.n	80048e0 <HAL_RCC_OscConfig+0xa6c>
 80048cc:	4b9b      	ldr	r3, [pc, #620]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	03db      	lsls	r3, r3, #15
 80048da:	4998      	ldr	r1, [pc, #608]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80048e0:	4b96      	ldr	r3, [pc, #600]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a95      	ldr	r2, [pc, #596]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80048e6:	f043 0310 	orr.w	r3, r3, #16
 80048ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048ec:	f7fd fa6e 	bl	8001dcc <HAL_GetTick>
 80048f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80048f4:	f7fd fa6a 	bl	8001dcc <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e18b      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004906:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d0f0      	beq.n	80048f4 <HAL_RCC_OscConfig+0xa80>
 8004912:	e018      	b.n	8004946 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004914:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a88      	ldr	r2, [pc, #544]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 800491a:	f023 0310 	bic.w	r3, r3, #16
 800491e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004920:	f7fd fa54 	bl	8001dcc <HAL_GetTick>
 8004924:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004926:	e008      	b.n	800493a <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004928:	f7fd fa50 	bl	8001dcc <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	2b02      	cmp	r3, #2
 8004934:	d901      	bls.n	800493a <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e171      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800493a:	4b80      	ldr	r3, [pc, #512]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f0      	bne.n	8004928 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8166 	beq.w	8004c1c <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004950:	2300      	movs	r3, #0
 8004952:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004956:	4b79      	ldr	r3, [pc, #484]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	2b0c      	cmp	r3, #12
 8004960:	f000 80f2 	beq.w	8004b48 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	2b02      	cmp	r3, #2
 800496a:	f040 80c5 	bne.w	8004af8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800496e:	4b73      	ldr	r3, [pc, #460]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a72      	ldr	r2, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004978:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800497a:	f7fd fa27 	bl	8001dcc <HAL_GetTick>
 800497e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004982:	f7fd fa23 	bl	8001dcc <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e144      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004994:	4b69      	ldr	r3, [pc, #420]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1f0      	bne.n	8004982 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a0:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d111      	bne.n	80049d2 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80049ae:	4b63      	ldr	r3, [pc, #396]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80049b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b4:	4a61      	ldr	r2, [pc, #388]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80049b6:	f043 0304 	orr.w	r3, r3, #4
 80049ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80049be:	4b5f      	ldr	r3, [pc, #380]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80049c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80049d2:	4b5b      	ldr	r3, [pc, #364]	; (8004b40 <HAL_RCC_OscConfig+0xccc>)
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80049de:	d102      	bne.n	80049e6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <HAL_RCC_OscConfig+0xccc>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	4a55      	ldr	r2, [pc, #340]	; (8004b40 <HAL_RCC_OscConfig+0xccc>)
 80049ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049f0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80049f2:	4b52      	ldr	r3, [pc, #328]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	f023 0303 	bic.w	r3, r3, #3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a06:	3a01      	subs	r2, #1
 8004a08:	0212      	lsls	r2, r2, #8
 8004a0a:	4311      	orrs	r1, r2
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a10:	430a      	orrs	r2, r1
 8004a12:	494a      	ldr	r1, [pc, #296]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	628b      	str	r3, [r1, #40]	; 0x28
 8004a18:	4b48      	ldr	r3, [pc, #288]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a1c:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <HAL_RCC_OscConfig+0xcd0>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a24:	3a01      	subs	r2, #1
 8004a26:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	0252      	lsls	r2, r2, #9
 8004a32:	b292      	uxth	r2, r2
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004a3a:	3a01      	subs	r2, #1
 8004a3c:	0412      	lsls	r2, r2, #16
 8004a3e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004a42:	4311      	orrs	r1, r2
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004a48:	3a01      	subs	r2, #1
 8004a4a:	0612      	lsls	r2, r2, #24
 8004a4c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004a50:	430a      	orrs	r2, r1
 8004a52:	493a      	ldr	r1, [pc, #232]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004a58:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	4a37      	ldr	r2, [pc, #220]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a5e:	f023 0310 	bic.w	r3, r3, #16
 8004a62:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a68:	4a34      	ldr	r2, [pc, #208]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004a6e:	4b33      	ldr	r3, [pc, #204]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a72:	4a32      	ldr	r2, [pc, #200]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a74:	f043 0310 	orr.w	r3, r3, #16
 8004a78:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004a7a:	4b30      	ldr	r3, [pc, #192]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7e:	f023 020c 	bic.w	r2, r3, #12
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	492d      	ldr	r1, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d105      	bne.n	8004aa0 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a94:	4b2a      	ldr	r3, [pc, #168]	; (8004b40 <HAL_RCC_OscConfig+0xccc>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4a29      	ldr	r2, [pc, #164]	; (8004b40 <HAL_RCC_OscConfig+0xccc>)
 8004a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004aa0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d107      	bne.n	8004ab8 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aae:	4a23      	ldr	r2, [pc, #140]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004ab0:	f023 0304 	bic.w	r3, r3, #4
 8004ab4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ab8:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004abe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1c      	ldr	r2, [pc, #112]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ace:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ad0:	f7fd f97c 	bl	8001dcc <HAL_GetTick>
 8004ad4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd f978 	bl	8001dcc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e099      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004aea:	4b14      	ldr	r3, [pc, #80]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0f0      	beq.n	8004ad8 <HAL_RCC_OscConfig+0xc64>
 8004af6:	e091      	b.n	8004c1c <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004af8:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a0f      	ldr	r2, [pc, #60]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b04:	f7fd f962 	bl	8001dcc <HAL_GetTick>
 8004b08:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b0c:	f7fd f95e 	bl	8001dcc <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e07f      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b1e:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	4a03      	ldr	r2, [pc, #12]	; (8004b3c <HAL_RCC_OscConfig+0xcc8>)
 8004b30:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004b34:	f023 0303 	bic.w	r3, r3, #3
 8004b38:	6293      	str	r3, [r2, #40]	; 0x28
 8004b3a:	e06f      	b.n	8004c1c <HAL_RCC_OscConfig+0xda8>
 8004b3c:	46020c00 	.word	0x46020c00
 8004b40:	46020800 	.word	0x46020800
 8004b44:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004b48:	4b37      	ldr	r3, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b4e:	4b36      	ldr	r3, [pc, #216]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b52:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d039      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0203 	and.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d132      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	0a1b      	lsrs	r3, r3, #8
 8004b6e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d129      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d122      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b94:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d11a      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	0a5b      	lsrs	r3, r3, #9
 8004b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d111      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d108      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	0e1b      	lsrs	r3, r3, #24
 8004bc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d001      	beq.n	8004bd4 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e024      	b.n	8004c1e <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d01a      	beq.n	8004c1c <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004be6:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	4a0f      	ldr	r2, [pc, #60]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fd f8eb 	bl	8001dcc <HAL_GetTick>
 8004bf6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004bf8:	bf00      	nop
 8004bfa:	f7fd f8e7 	bl	8001dcc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d0f9      	beq.n	8004bfa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0a:	4a07      	ldr	r2, [pc, #28]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004c0c:	00db      	lsls	r3, r3, #3
 8004c0e:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <HAL_RCC_OscConfig+0xdb4>)
 8004c16:	f043 0310 	orr.w	r3, r3, #16
 8004c1a:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3738      	adds	r7, #56	; 0x38
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	46020c00 	.word	0x46020c00

08004c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e1d9      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b9b      	ldr	r3, [pc, #620]	; (8004eb0 <HAL_RCC_ClockConfig+0x284>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b98      	ldr	r3, [pc, #608]	; (8004eb0 <HAL_RCC_ClockConfig+0x284>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 020f 	bic.w	r2, r3, #15
 8004c56:	4996      	ldr	r1, [pc, #600]	; (8004eb0 <HAL_RCC_ClockConfig+0x284>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b94      	ldr	r3, [pc, #592]	; (8004eb0 <HAL_RCC_ClockConfig+0x284>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e1c1      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	4b8c      	ldr	r3, [pc, #560]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d908      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004c8c:	4b89      	ldr	r3, [pc, #548]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	4986      	ldr	r1, [pc, #536]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d012      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	4b81      	ldr	r3, [pc, #516]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d909      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004cbc:	4b7d      	ldr	r3, [pc, #500]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	691b      	ldr	r3, [r3, #16]
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	497a      	ldr	r1, [pc, #488]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d010      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	4b74      	ldr	r3, [pc, #464]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d908      	bls.n	8004cfe <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004cec:	4b71      	ldr	r3, [pc, #452]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	496e      	ldr	r1, [pc, #440]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d010      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	4b69      	ldr	r3, [pc, #420]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d908      	bls.n	8004d2c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004d1a:	4b66      	ldr	r3, [pc, #408]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	f023 020f 	bic.w	r2, r3, #15
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	4963      	ldr	r1, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 80d2 	beq.w	8004ede <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	d143      	bne.n	8004dce <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d110      	bne.n	8004d76 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004d54:	4b57      	ldr	r3, [pc, #348]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d5a:	4a56      	ldr	r2, [pc, #344]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d5c:	f043 0304 	orr.w	r3, r3, #4
 8004d60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004d64:	4b53      	ldr	r3, [pc, #332]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004d72:	2301      	movs	r3, #1
 8004d74:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004d76:	f7fd f829 	bl	8001dcc <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004d7c:	4b4e      	ldr	r3, [pc, #312]	; (8004eb8 <HAL_RCC_ClockConfig+0x28c>)
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00f      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004d8a:	f7fd f81f 	bl	8001dcc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e12b      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004d9c:	4b46      	ldr	r3, [pc, #280]	; (8004eb8 <HAL_RCC_ClockConfig+0x28c>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db4:	4a3f      	ldr	r2, [pc, #252]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004db6:	f023 0304 	bic.w	r3, r3, #4
 8004dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004dbe:	4b3d      	ldr	r3, [pc, #244]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d121      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e112      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d107      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d115      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e106      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d107      	bne.n	8004dfe <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004dee:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e0fa      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dfe:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e0f2      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004e0e:	4b29      	ldr	r3, [pc, #164]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004e10:	69db      	ldr	r3, [r3, #28]
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	4926      	ldr	r1, [pc, #152]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004e20:	f7fc ffd4 	bl	8001dcc <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b03      	cmp	r3, #3
 8004e2c:	d112      	bne.n	8004e54 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e2e:	e00a      	b.n	8004e46 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e30:	f7fc ffcc 	bl	8001dcc <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e0d6      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 030c 	and.w	r3, r3, #12
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d1ee      	bne.n	8004e30 <HAL_RCC_ClockConfig+0x204>
 8004e52:	e044      	b.n	8004ede <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d112      	bne.n	8004e82 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5e:	f7fc ffb5 	bl	8001dcc <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0bf      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e74:	4b0f      	ldr	r3, [pc, #60]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d1ee      	bne.n	8004e5e <HAL_RCC_ClockConfig+0x232>
 8004e80:	e02d      	b.n	8004ede <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d123      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8c:	f7fc ff9e 	bl	8001dcc <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0a8      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ea2:	4b04      	ldr	r3, [pc, #16]	; (8004eb4 <HAL_RCC_ClockConfig+0x288>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1ee      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x260>
 8004eae:	e016      	b.n	8004ede <HAL_RCC_ClockConfig+0x2b2>
 8004eb0:	40022000 	.word	0x40022000
 8004eb4:	46020c00 	.word	0x46020c00
 8004eb8:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ebc:	f7fc ff86 	bl	8001dcc <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e090      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ed2:	4b4a      	ldr	r3, [pc, #296]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d1ee      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d010      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689a      	ldr	r2, [r3, #8]
 8004eee:	4b43      	ldr	r3, [pc, #268]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d208      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004efa:	4b40      	ldr	r3, [pc, #256]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 020f 	bic.w	r2, r3, #15
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	493d      	ldr	r1, [pc, #244]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b3c      	ldr	r3, [pc, #240]	; (8005000 <HAL_RCC_ClockConfig+0x3d4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d210      	bcs.n	8004f3c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <HAL_RCC_ClockConfig+0x3d4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 020f 	bic.w	r2, r3, #15
 8004f22:	4937      	ldr	r1, [pc, #220]	; (8005000 <HAL_RCC_ClockConfig+0x3d4>)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b35      	ldr	r3, [pc, #212]	; (8005000 <HAL_RCC_ClockConfig+0x3d4>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e05b      	b.n	8004ff4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0304 	and.w	r3, r3, #4
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d010      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	4b2b      	ldr	r3, [pc, #172]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d208      	bcs.n	8004f6a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f58:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	4925      	ldr	r1, [pc, #148]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d012      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	4b20      	ldr	r3, [pc, #128]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d209      	bcs.n	8004f9c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f88:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	4919      	ldr	r1, [pc, #100]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0310 	and.w	r3, r3, #16
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d010      	beq.n	8004fca <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	695a      	ldr	r2, [r3, #20]
 8004fac:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d208      	bcs.n	8004fca <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004fb8:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	490d      	ldr	r1, [pc, #52]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004fca:	f000 f821 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_RCC_ClockConfig+0x3d0>)
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	490a      	ldr	r1, [pc, #40]	; (8005004 <HAL_RCC_ClockConfig+0x3d8>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe0:	4a09      	ldr	r2, [pc, #36]	; (8005008 <HAL_RCC_ClockConfig+0x3dc>)
 8004fe2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004fe4:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_RCC_ClockConfig+0x3e0>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fc fea5 	bl	8001d38 <HAL_InitTick>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]

  return status;
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	46020c00 	.word	0x46020c00
 8005000:	40022000 	.word	0x40022000
 8005004:	080095d4 	.word	0x080095d4
 8005008:	20000008 	.word	0x20000008
 800500c:	2000000c 	.word	0x2000000c

08005010 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b08b      	sub	sp, #44	; 0x2c
 8005014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800501e:	4b7b      	ldr	r3, [pc, #492]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005028:	4b78      	ldr	r3, [pc, #480]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x34>
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	2b0c      	cmp	r3, #12
 800503c:	d121      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d11e      	bne.n	8005082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005044:	4b71      	ldr	r3, [pc, #452]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d107      	bne.n	8005060 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005050:	4b6e      	ldr	r3, [pc, #440]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005056:	0b1b      	lsrs	r3, r3, #12
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	e005      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005060:	4b6a      	ldr	r3, [pc, #424]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	0f1b      	lsrs	r3, r3, #28
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800506c:	4a68      	ldr	r2, [pc, #416]	; (8005210 <HAL_RCC_GetSysClockFreq+0x200>)
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005074:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d110      	bne.n	800509e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800507c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005080:	e00d      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005082:	4b62      	ldr	r3, [pc, #392]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f003 030c 	and.w	r3, r3, #12
 800508a:	2b04      	cmp	r3, #4
 800508c:	d102      	bne.n	8005094 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800508e:	4b61      	ldr	r3, [pc, #388]	; (8005214 <HAL_RCC_GetSysClockFreq+0x204>)
 8005090:	623b      	str	r3, [r7, #32]
 8005092:	e004      	b.n	800509e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b08      	cmp	r3, #8
 8005098:	d101      	bne.n	800509e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800509a:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <HAL_RCC_GetSysClockFreq+0x204>)
 800509c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	2b0c      	cmp	r3, #12
 80050a2:	f040 80ac 	bne.w	80051fe <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80050a6:	4b59      	ldr	r3, [pc, #356]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80050b0:	4b56      	ldr	r3, [pc, #344]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80050be:	4b53      	ldr	r3, [pc, #332]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80050ca:	4b50      	ldr	r3, [pc, #320]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ce:	08db      	lsrs	r3, r3, #3
 80050d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	ee07 3a90 	vmov	s15, r3
 80050de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 8086 	beq.w	80051fa <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d003      	beq.n	80050fc <HAL_RCC_GetSysClockFreq+0xec>
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b03      	cmp	r3, #3
 80050f8:	d022      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x130>
 80050fa:	e043      	b.n	8005184 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	ee07 3a90 	vmov	s15, r3
 8005102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005106:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005218 <HAL_RCC_GetSysClockFreq+0x208>
 800510a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800510e:	4b3f      	ldr	r3, [pc, #252]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800511e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005122:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800521c <HAL_RCC_GetSysClockFreq+0x20c>
 8005126:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800512a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800512e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005132:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800513e:	e046      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005218 <HAL_RCC_GetSysClockFreq+0x208>
 800514e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005152:	4b2e      	ldr	r3, [pc, #184]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005162:	ed97 6a01 	vldr	s12, [r7, #4]
 8005166:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800521c <HAL_RCC_GetSysClockFreq+0x20c>
 800516a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800516e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005176:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800517a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800517e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005182:	e024      	b.n	80051ce <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	ee07 3a90 	vmov	s15, r3
 8005194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519c:	4b1b      	ldr	r3, [pc, #108]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a4:	ee07 3a90 	vmov	s15, r3
 80051a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051ac:	ed97 6a01 	vldr	s12, [r7, #4]
 80051b0:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800521c <HAL_RCC_GetSysClockFreq+0x20c>
 80051b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80051cc:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80051ce:	4b0f      	ldr	r3, [pc, #60]	; (800520c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80051d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051d2:	0e1b      	lsrs	r3, r3, #24
 80051d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051d8:	3301      	adds	r3, #1
 80051da:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80051ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f2:	ee17 3a90 	vmov	r3, s15
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	e001      	b.n	80051fe <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80051fe:	6a3b      	ldr	r3, [r7, #32]
}
 8005200:	4618      	mov	r0, r3
 8005202:	372c      	adds	r7, #44	; 0x2c
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	46020c00 	.word	0x46020c00
 8005210:	080095ec 	.word	0x080095ec
 8005214:	00f42400 	.word	0x00f42400
 8005218:	4b742400 	.word	0x4b742400
 800521c:	46000000 	.word	0x46000000

08005220 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005224:	f7ff fef4 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b07      	ldr	r3, [pc, #28]	; (8005248 <HAL_RCC_GetHCLKFreq+0x28>)
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f003 030f 	and.w	r3, r3, #15
 8005232:	4906      	ldr	r1, [pc, #24]	; (800524c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005234:	5ccb      	ldrb	r3, [r1, r3]
 8005236:	fa22 f303 	lsr.w	r3, r2, r3
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <HAL_RCC_GetHCLKFreq+0x30>)
 800523c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800523e:	4b04      	ldr	r3, [pc, #16]	; (8005250 <HAL_RCC_GetHCLKFreq+0x30>)
 8005240:	681b      	ldr	r3, [r3, #0]
}
 8005242:	4618      	mov	r0, r3
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	46020c00 	.word	0x46020c00
 800524c:	080095d4 	.word	0x080095d4
 8005250:	20000008 	.word	0x20000008

08005254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005258:	f7ff ffe2 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 800525c:	4602      	mov	r2, r0
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	4903      	ldr	r1, [pc, #12]	; (8005278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800526a:	5ccb      	ldrb	r3, [r1, r3]
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005270:	4618      	mov	r0, r3
 8005272:	bd80      	pop	{r7, pc}
 8005274:	46020c00 	.word	0x46020c00
 8005278:	080095e4 	.word	0x080095e4

0800527c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005280:	f7ff ffce 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005284:	4602      	mov	r2, r0
 8005286:	4b05      	ldr	r3, [pc, #20]	; (800529c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	4903      	ldr	r1, [pc, #12]	; (80052a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005292:	5ccb      	ldrb	r3, [r1, r3]
 8005294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005298:	4618      	mov	r0, r3
 800529a:	bd80      	pop	{r7, pc}
 800529c:	46020c00 	.word	0x46020c00
 80052a0:	080095e4 	.word	0x080095e4

080052a4 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80052a8:	f7ff ffba 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80052ac:	4602      	mov	r2, r0
 80052ae:	4b05      	ldr	r3, [pc, #20]	; (80052c4 <HAL_RCC_GetPCLK3Freq+0x20>)
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	091b      	lsrs	r3, r3, #4
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	4903      	ldr	r1, [pc, #12]	; (80052c8 <HAL_RCC_GetPCLK3Freq+0x24>)
 80052ba:	5ccb      	ldrb	r3, [r1, r3]
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	46020c00 	.word	0x46020c00
 80052c8:	080095e4 	.word	0x080095e4

080052cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80052d4:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80052e2:	f7fe fd49 	bl	8003d78 <HAL_PWREx_GetVoltageRange>
 80052e6:	6178      	str	r0, [r7, #20]
 80052e8:	e019      	b.n	800531e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80052ea:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f0:	4a37      	ldr	r2, [pc, #220]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052f2:	f043 0304 	orr.w	r3, r3, #4
 80052f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052fa:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005308:	f7fe fd36 	bl	8003d78 <HAL_PWREx_GetVoltageRange>
 800530c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800530e:	4b30      	ldr	r3, [pc, #192]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005314:	4a2e      	ldr	r2, [pc, #184]	; (80053d0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005316:	f023 0304 	bic.w	r3, r3, #4
 800531a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005324:	d003      	beq.n	800532e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800532c:	d109      	bne.n	8005342 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005334:	d202      	bcs.n	800533c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005336:	2301      	movs	r3, #1
 8005338:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800533a:	e033      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005340:	e030      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005348:	d208      	bcs.n	800535c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d102      	bne.n	8005358 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005352:	2303      	movs	r3, #3
 8005354:	613b      	str	r3, [r7, #16]
 8005356:	e025      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e035      	b.n	80053c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005362:	d90f      	bls.n	8005384 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005370:	d902      	bls.n	8005378 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	e015      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005378:	2301      	movs	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	e012      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800537e:	2300      	movs	r3, #0
 8005380:	613b      	str	r3, [r7, #16]
 8005382:	e00f      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800538a:	d109      	bne.n	80053a0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d102      	bne.n	800539a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005394:	2301      	movs	r3, #1
 8005396:	613b      	str	r3, [r7, #16]
 8005398:	e004      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800539a:	2302      	movs	r3, #2
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	e001      	b.n	80053a4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80053a0:	2301      	movs	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f023 020f 	bic.w	r2, r3, #15
 80053ac:	4909      	ldr	r1, [pc, #36]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80053b4:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d001      	beq.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	46020c00 	.word	0x46020c00
 80053d4:	40022000 	.word	0x40022000

080053d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80053d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053dc:	b0ba      	sub	sp, #232	; 0xe8
 80053de:	af00      	add	r7, sp, #0
 80053e0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80053ea:	2300      	movs	r3, #0
 80053ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f002 0401 	and.w	r4, r2, #1
 80053fc:	2500      	movs	r5, #0
 80053fe:	ea54 0305 	orrs.w	r3, r4, r5
 8005402:	d00b      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005404:	4bcb      	ldr	r3, [pc, #812]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800540a:	f023 0103 	bic.w	r1, r3, #3
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	4ac7      	ldr	r2, [pc, #796]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005416:	430b      	orrs	r3, r1
 8005418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800541c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	f002 0802 	and.w	r8, r2, #2
 8005428:	f04f 0900 	mov.w	r9, #0
 800542c:	ea58 0309 	orrs.w	r3, r8, r9
 8005430:	d00b      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005432:	4bc0      	ldr	r3, [pc, #768]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005438:	f023 010c 	bic.w	r1, r3, #12
 800543c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005442:	4abc      	ldr	r2, [pc, #752]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005444:	430b      	orrs	r3, r1
 8005446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800544a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005452:	f002 0a04 	and.w	sl, r2, #4
 8005456:	f04f 0b00 	mov.w	fp, #0
 800545a:	ea5a 030b 	orrs.w	r3, sl, fp
 800545e:	d00b      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005460:	4bb4      	ldr	r3, [pc, #720]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005466:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800546a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800546e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005470:	4ab0      	ldr	r2, [pc, #704]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005472:	430b      	orrs	r3, r1
 8005474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005478:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f002 0308 	and.w	r3, r2, #8
 8005484:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005488:	2300      	movs	r3, #0
 800548a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800548e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005492:	460b      	mov	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	d00b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005498:	4ba6      	ldr	r3, [pc, #664]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800549a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800549e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80054a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a8:	4aa2      	ldr	r2, [pc, #648]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054aa:	430b      	orrs	r3, r1
 80054ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	f002 0310 	and.w	r3, r2, #16
 80054bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80054c0:	2300      	movs	r3, #0
 80054c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80054c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80054d0:	4b98      	ldr	r3, [pc, #608]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e0:	4a94      	ldr	r2, [pc, #592]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e2:	430b      	orrs	r3, r1
 80054e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f002 0320 	and.w	r3, r2, #32
 80054f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054f8:	2300      	movs	r3, #0
 80054fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80054fe:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005502:	460b      	mov	r3, r1
 8005504:	4313      	orrs	r3, r2
 8005506:	d00b      	beq.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005508:	4b8a      	ldr	r3, [pc, #552]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800550a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800550e:	f023 0107 	bic.w	r1, r3, #7
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005518:	4a86      	ldr	r2, [pc, #536]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551a:	430b      	orrs	r3, r1
 800551c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005520:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800552c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005536:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800553a:	460b      	mov	r3, r1
 800553c:	4313      	orrs	r3, r2
 800553e:	d00b      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005540:	4b7c      	ldr	r3, [pc, #496]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005546:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800554e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005550:	4a78      	ldr	r2, [pc, #480]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005552:	430b      	orrs	r3, r1
 8005554:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800556e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005572:	460b      	mov	r3, r1
 8005574:	4313      	orrs	r3, r2
 8005576:	d00b      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005578:	4b6e      	ldr	r3, [pc, #440]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800557e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005588:	4a6a      	ldr	r2, [pc, #424]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558a:	430b      	orrs	r3, r1
 800558c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005590:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005598:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800559c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80055a6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4313      	orrs	r3, r2
 80055ae:	d00b      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80055b0:	4b60      	ldr	r3, [pc, #384]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80055ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c0:	4a5c      	ldr	r2, [pc, #368]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c2:	430b      	orrs	r3, r1
 80055c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80055d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055d8:	2300      	movs	r3, #0
 80055da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80055e2:	460b      	mov	r3, r1
 80055e4:	4313      	orrs	r3, r2
 80055e6:	d00b      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80055e8:	4b52      	ldr	r3, [pc, #328]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055ee:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80055f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f8:	4a4e      	ldr	r2, [pc, #312]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005600:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800560c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005610:	2300      	movs	r3, #0
 8005612:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005616:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800561a:	460b      	mov	r3, r1
 800561c:	4313      	orrs	r3, r2
 800561e:	d00b      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005620:	4b44      	ldr	r3, [pc, #272]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005626:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800562a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800562e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005630:	4a40      	ldr	r2, [pc, #256]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005632:	430b      	orrs	r3, r1
 8005634:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005638:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005648:	2300      	movs	r3, #0
 800564a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800564e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005652:	460b      	mov	r3, r1
 8005654:	4313      	orrs	r3, r2
 8005656:	d00b      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005658:	4b36      	ldr	r3, [pc, #216]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800565e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005668:	4a32      	ldr	r2, [pc, #200]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566a:	430b      	orrs	r3, r1
 800566c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800567c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005680:	2300      	movs	r3, #0
 8005682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005686:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800568a:	460b      	mov	r3, r1
 800568c:	4313      	orrs	r3, r2
 800568e:	d00c      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005690:	4b28      	ldr	r3, [pc, #160]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800569a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	4a24      	ldr	r2, [pc, #144]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80056b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80056b8:	2300      	movs	r3, #0
 80056ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d04f      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80056c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	2b80      	cmp	r3, #128	; 0x80
 80056d0:	d02d      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80056d2:	2b80      	cmp	r3, #128	; 0x80
 80056d4:	d827      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80056d6:	2b60      	cmp	r3, #96	; 0x60
 80056d8:	d02e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80056da:	2b60      	cmp	r3, #96	; 0x60
 80056dc:	d823      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80056de:	2b40      	cmp	r3, #64	; 0x40
 80056e0:	d006      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80056e2:	2b40      	cmp	r3, #64	; 0x40
 80056e4:	d81f      	bhi.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x326>
 80056ea:	2b20      	cmp	r3, #32
 80056ec:	d011      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80056ee:	e01a      	b.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056f0:	4b10      	ldr	r3, [pc, #64]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f4:	4a0f      	ldr	r2, [pc, #60]	; (8005734 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fa:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80056fc:	e01d      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005702:	3308      	adds	r3, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f002 fa41 	bl	8007b8c <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005710:	e013      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005716:	332c      	adds	r3, #44	; 0x2c
 8005718:	4618      	mov	r0, r3
 800571a:	f002 facf 	bl	8007cbc <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005724:	e009      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800572c:	e005      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800572e:	bf00      	nop
 8005730:	e003      	b.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005732:	bf00      	nop
 8005734:	46020c00 	.word	0x46020c00
        break;
 8005738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800573a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10d      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005742:	4bb6      	ldr	r3, [pc, #728]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005744:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005748:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800574c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005754:	4ab1      	ldr	r2, [pc, #708]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005756:	430b      	orrs	r3, r1
 8005758:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800575e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005762:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005772:	673b      	str	r3, [r7, #112]	; 0x70
 8005774:	2300      	movs	r3, #0
 8005776:	677b      	str	r3, [r7, #116]	; 0x74
 8005778:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800577c:	460b      	mov	r3, r1
 800577e:	4313      	orrs	r3, r2
 8005780:	d053      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800578e:	d033      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005794:	d82c      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800579a:	d02f      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x424>
 800579c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a0:	d826      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80057a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057a6:	d008      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80057a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057ac:	d820      	bhi.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d011      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x404>
 80057b8:	e01a      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057ba:	4b98      	ldr	r3, [pc, #608]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057be:	4a97      	ldr	r2, [pc, #604]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057c6:	e01a      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057cc:	3308      	adds	r3, #8
 80057ce:	4618      	mov	r0, r3
 80057d0:	f002 f9dc 	bl	8007b8c <RCCEx_PLL2_Config>
 80057d4:	4603      	mov	r3, r0
 80057d6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057da:	e010      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e0:	332c      	adds	r3, #44	; 0x2c
 80057e2:	4618      	mov	r0, r3
 80057e4:	f002 fa6a 	bl	8007cbc <RCCEx_PLL3_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80057ee:	e006      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057f6:	e002      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80057f8:	bf00      	nop
 80057fa:	e000      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80057fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005806:	4b85      	ldr	r3, [pc, #532]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005808:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800580c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005810:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005818:	4a80      	ldr	r2, [pc, #512]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800581a:	430b      	orrs	r3, r1
 800581c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005820:	e003      	b.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005822:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005826:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005832:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005836:	66bb      	str	r3, [r7, #104]	; 0x68
 8005838:	2300      	movs	r3, #0
 800583a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800583c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005840:	460b      	mov	r3, r1
 8005842:	4313      	orrs	r3, r2
 8005844:	d046      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800584a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800584e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005852:	d028      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005854:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005858:	d821      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800585a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585e:	d022      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005860:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005864:	d81b      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005866:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800586a:	d01c      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800586c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005870:	d815      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005876:	d008      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800587c:	d80f      	bhi.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d011      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005886:	d00e      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005888:	e009      	b.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800588a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588e:	3308      	adds	r3, #8
 8005890:	4618      	mov	r0, r3
 8005892:	f002 f97b 	bl	8007b8c <RCCEx_PLL2_Config>
 8005896:	4603      	mov	r3, r0
 8005898:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800589c:	e004      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80058a4:	e000      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80058a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058a8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d10d      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80058b0:	4b5a      	ldr	r3, [pc, #360]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058b6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058c2:	4a56      	ldr	r2, [pc, #344]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80058ca:	e003      	b.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058d0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80058d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80058e0:	663b      	str	r3, [r7, #96]	; 0x60
 80058e2:	2300      	movs	r3, #0
 80058e4:	667b      	str	r3, [r7, #100]	; 0x64
 80058e6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d03f      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80058f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d81e      	bhi.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x562>
 80058fc:	a201      	add	r2, pc, #4	; (adr r2, 8005904 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	08005943 	.word	0x08005943
 8005908:	08005919 	.word	0x08005919
 800590c:	08005927 	.word	0x08005927
 8005910:	08005943 	.word	0x08005943
 8005914:	08005943 	.word	0x08005943
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005918:	4b40      	ldr	r3, [pc, #256]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800591a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591c:	4a3f      	ldr	r2, [pc, #252]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800591e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005922:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005924:	e00e      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592a:	332c      	adds	r3, #44	; 0x2c
 800592c:	4618      	mov	r0, r3
 800592e:	f002 f9c5 	bl	8007cbc <RCCEx_PLL3_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005938:	e004      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005940:	e000      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005942:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005944:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800594c:	4b33      	ldr	r3, [pc, #204]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800594e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005952:	f023 0107 	bic.w	r1, r3, #7
 8005956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800595a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595e:	4a2f      	ldr	r2, [pc, #188]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005960:	430b      	orrs	r3, r1
 8005962:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800596c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800597c:	65bb      	str	r3, [r7, #88]	; 0x58
 800597e:	2300      	movs	r3, #0
 8005980:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005982:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d04d      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800598c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005998:	d028      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x614>
 800599a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800599e:	d821      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80059a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059a4:	d024      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80059a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059aa:	d81b      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80059ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b0:	d00e      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80059b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b6:	d815      	bhi.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80059bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c0:	d110      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059c2:	4b16      	ldr	r3, [pc, #88]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059cc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80059ce:	e012      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d4:	332c      	adds	r3, #44	; 0x2c
 80059d6:	4618      	mov	r0, r3
 80059d8:	f002 f970 	bl	8007cbc <RCCEx_PLL3_Config>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059e2:	e008      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059ea:	e004      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80059ec:	bf00      	nop
 80059ee:	e002      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80059f4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d110      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80059fe:	4b07      	ldr	r3, [pc, #28]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a04:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005a08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a10:	4a02      	ldr	r2, [pc, #8]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005a1a:	bf00      	nop
 8005a1c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a24:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005a34:	653b      	str	r3, [r7, #80]	; 0x50
 8005a36:	2300      	movs	r3, #0
 8005a38:	657b      	str	r3, [r7, #84]	; 0x54
 8005a3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f000 80b5 	beq.w	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2300      	movs	r3, #0
 8005a48:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4c:	4b9d      	ldr	r3, [pc, #628]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d113      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a5a:	4b9a      	ldr	r3, [pc, #616]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a60:	4a98      	ldr	r2, [pc, #608]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a62:	f043 0304 	orr.w	r3, r3, #4
 8005a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005a6a:	4b96      	ldr	r3, [pc, #600]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005a82:	4b91      	ldr	r3, [pc, #580]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	4a90      	ldr	r2, [pc, #576]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005a88:	f043 0301 	orr.w	r3, r3, #1
 8005a8c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a8e:	f7fc f99d 	bl	8001dcc <HAL_GetTick>
 8005a92:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005a96:	e00b      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a98:	f7fc f998 	bl	8001dcc <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d903      	bls.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005aae:	e005      	b.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ab0:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ed      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005abc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d165      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ac4:	4b7f      	ldr	r3, [pc, #508]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ace:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d023      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ade:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d01b      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005aea:	4b76      	ldr	r3, [pc, #472]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005aec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005af4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005af8:	4b72      	ldr	r3, [pc, #456]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005afe:	4a71      	ldr	r2, [pc, #452]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b08:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b0e:	4a6d      	ldr	r2, [pc, #436]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b18:	4a6a      	ldr	r2, [pc, #424]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d019      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2e:	f7fc f94d 	bl	8001dcc <HAL_GetTick>
 8005b32:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b36:	e00d      	b.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b38:	f7fc f948 	bl	8001dcc <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b42:	1ad2      	subs	r2, r2, r3
 8005b44:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d903      	bls.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005b52:	e006      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b54:	4b5b      	ldr	r3, [pc, #364]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0ea      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005b62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10d      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005b6a:	4b56      	ldr	r3, [pc, #344]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b70:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005b7c:	4a51      	ldr	r2, [pc, #324]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b84:	e008      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b8a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b94:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b98:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d107      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba0:	4b48      	ldr	r3, [pc, #288]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ba6:	4a47      	ldr	r2, [pc, #284]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005bb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005bc6:	460b      	mov	r3, r1
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	d042      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005bd4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005bd8:	d022      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005bda:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005bde:	d81b      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be4:	d011      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bea:	d815      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d019      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005bf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf4:	d110      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f001 ffc5 	bl	8007b8c <RCCEx_PLL2_Config>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c08:	e00d      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0a:	4b2e      	ldr	r3, [pc, #184]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0e:	4a2d      	ldr	r2, [pc, #180]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c14:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005c16:	e006      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c1e:	e002      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005c20:	bf00      	nop
 8005c22:	e000      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005c24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10d      	bne.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005c2e:	4b25      	ldr	r3, [pc, #148]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c34:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c40:	4a20      	ldr	r2, [pc, #128]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c42:	430b      	orrs	r3, r1
 8005c44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c48:	e003      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c4e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8005c60:	2300      	movs	r3, #0
 8005c62:	647b      	str	r3, [r7, #68]	; 0x44
 8005c64:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	d032      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7a:	d00b      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c80:	d804      	bhi.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8a:	d007      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c92:	e004      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005c94:	bf00      	nop
 8005c96:	e002      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005c98:	bf00      	nop
 8005c9a:	e000      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005c9c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d112      	bne.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005ca6:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ca8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cb0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cb8:	4a02      	ldr	r2, [pc, #8]	; (8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005cc0:	e008      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005cc2:	bf00      	nop
 8005cc4:	46020c00 	.word	0x46020c00
 8005cc8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ccc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cd0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cdc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ce0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ce6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005cea:	460b      	mov	r3, r1
 8005cec:	4313      	orrs	r3, r2
 8005cee:	d00c      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005cf0:	4b98      	ldr	r3, [pc, #608]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005cf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005cf6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005cfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d02:	4a94      	ldr	r2, [pc, #592]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d04:	430b      	orrs	r3, r1
 8005d06:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d12:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005d16:	633b      	str	r3, [r7, #48]	; 0x30
 8005d18:	2300      	movs	r3, #0
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005d1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005d20:	460b      	mov	r3, r1
 8005d22:	4313      	orrs	r3, r2
 8005d24:	d019      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005d26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d32:	d105      	bne.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d34:	4b87      	ldr	r3, [pc, #540]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	4a86      	ldr	r2, [pc, #536]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d3e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005d40:	4b84      	ldr	r3, [pc, #528]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d46:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d52:	4a80      	ldr	r2, [pc, #512]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005d5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d62:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d68:	2300      	movs	r3, #0
 8005d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005d70:	460b      	mov	r3, r1
 8005d72:	4313      	orrs	r3, r2
 8005d74:	d00c      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005d76:	4b77      	ldr	r3, [pc, #476]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d88:	4972      	ldr	r1, [pc, #456]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005d9c:	623b      	str	r3, [r7, #32]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
 8005da2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005da6:	460b      	mov	r3, r1
 8005da8:	4313      	orrs	r3, r2
 8005daa:	d00c      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005dac:	4b69      	ldr	r3, [pc, #420]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005dbe:	4965      	ldr	r1, [pc, #404]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	61fb      	str	r3, [r7, #28]
 8005dd8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d00c      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005de2:	4b5c      	ldr	r3, [pc, #368]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005de4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005de8:	f023 0218 	bic.w	r2, r3, #24
 8005dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005df4:	4957      	ldr	r1, [pc, #348]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e12:	460b      	mov	r3, r1
 8005e14:	4313      	orrs	r3, r2
 8005e16:	d032      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005e18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e24:	d105      	bne.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e26:	4b4b      	ldr	r3, [pc, #300]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	4a4a      	ldr	r2, [pc, #296]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e30:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e3e:	d108      	bne.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e44:	3308      	adds	r3, #8
 8005e46:	4618      	mov	r0, r3
 8005e48:	f001 fea0 	bl	8007b8c <RCCEx_PLL2_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005e52:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10d      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005e5a:	4b3e      	ldr	r3, [pc, #248]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e5c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005e60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e6c:	4939      	ldr	r1, [pc, #228]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005e74:	e003      	b.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e76:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e7a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005e7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e94:	460b      	mov	r3, r1
 8005e96:	4313      	orrs	r3, r2
 8005e98:	d03a      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ea6:	d00e      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eac:	d815      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d017      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005eb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eb6:	d110      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb8:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	4a25      	ldr	r2, [pc, #148]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ec2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eca:	3308      	adds	r3, #8
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fe5d 	bl	8007b8c <RCCEx_PLL2_Config>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005ed8:	e004      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005ee2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ee4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005eec:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ef2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005efe:	4915      	ldr	r1, [pc, #84]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005f06:	e003      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f0c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005f1c:	603b      	str	r3, [r7, #0]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
 8005f22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f26:	460b      	mov	r3, r1
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	d00c      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005f2c:	4b09      	ldr	r3, [pc, #36]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f32:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f3e:	4905      	ldr	r1, [pc, #20]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005f46:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	37e8      	adds	r7, #232	; 0xe8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f54:	46020c00 	.word	0x46020c00

08005f58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005f60:	4bad      	ldr	r3, [pc, #692]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f68:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f6a:	4bab      	ldr	r3, [pc, #684]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	f003 0303 	and.w	r3, r3, #3
 8005f72:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005f74:	4ba8      	ldr	r3, [pc, #672]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	3301      	adds	r3, #1
 8005f80:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f82:	4ba5      	ldr	r3, [pc, #660]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f86:	091b      	lsrs	r3, r3, #4
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f8e:	4ba2      	ldr	r3, [pc, #648]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f92:	08db      	lsrs	r3, r3, #3
 8005f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 8123 	beq.w	80061f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d062      	beq.n	800607e <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f200 8081 	bhi.w	80060c2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d024      	beq.n	8006010 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d17a      	bne.n	80060c2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eddf 6a91 	vldr	s13, [pc, #580]	; 800621c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b8e      	ldr	r3, [pc, #568]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8006220 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600e:	e08f      	b.n	8006130 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006010:	4b81      	ldr	r3, [pc, #516]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800601c:	4b7e      	ldr	r3, [pc, #504]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0f1b      	lsrs	r3, r3, #28
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8006028:	4b7b      	ldr	r3, [pc, #492]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0f1b      	lsrs	r3, r3, #28
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a7b      	ldr	r2, [pc, #492]	; (8006224 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006060:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006220 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006070:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800607c:	e058      	b.n	8006130 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eddf 6a64 	vldr	s13, [pc, #400]	; 800621c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800608c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006090:	4b61      	ldr	r3, [pc, #388]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006220 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c0:	e036      	b.n	8006130 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060c2:	4b55      	ldr	r3, [pc, #340]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80060ce:	4b52      	ldr	r3, [pc, #328]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	0f1b      	lsrs	r3, r3, #28
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80060da:	4b4f      	ldr	r3, [pc, #316]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	4a4e      	ldr	r2, [pc, #312]	; (8006224 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80060ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006112:	eddf 5a43 	vldr	s11, [pc, #268]	; 8006220 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006130:	4b39      	ldr	r3, [pc, #228]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d017      	beq.n	800616c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	0a5b      	lsrs	r3, r3, #9
 8006142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800614e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006152:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006156:	edd7 6a07 	vldr	s13, [r7, #28]
 800615a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006162:	ee17 2a90 	vmov	r2, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006172:	4b29      	ldr	r3, [pc, #164]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d017      	beq.n	80061ae <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006194:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006198:	edd7 6a07 	vldr	s13, [r7, #28]
 800619c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a4:	ee17 2a90 	vmov	r2, s15
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80061b4:	4b18      	ldr	r3, [pc, #96]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d017      	beq.n	80061f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061c0:	4b15      	ldr	r3, [pc, #84]	; (8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80061ee:	e00c      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	609a      	str	r2, [r3, #8]
}
 80061f6:	e008      	b.n	800620a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
}
 800620a:	bf00      	nop
 800620c:	3724      	adds	r7, #36	; 0x24
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	46020c00 	.word	0x46020c00
 800621c:	4b742400 	.word	0x4b742400
 8006220:	46000000 	.word	0x46000000
 8006224:	080095ec 	.word	0x080095ec

08006228 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006228:	b480      	push	{r7}
 800622a:	b089      	sub	sp, #36	; 0x24
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006230:	4bad      	ldr	r3, [pc, #692]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006238:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800623a:	4bab      	ldr	r3, [pc, #684]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623e:	f003 0303 	and.w	r3, r3, #3
 8006242:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006244:	4ba8      	ldr	r3, [pc, #672]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	f003 030f 	and.w	r3, r3, #15
 800624e:	3301      	adds	r3, #1
 8006250:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006252:	4ba5      	ldr	r3, [pc, #660]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	f003 0301 	and.w	r3, r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800625e:	4ba2      	ldr	r3, [pc, #648]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	ee07 3a90 	vmov	s15, r3
 8006272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006276:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	2b00      	cmp	r3, #0
 800627e:	f000 8123 	beq.w	80064c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d062      	beq.n	800634e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b03      	cmp	r3, #3
 800628c:	f200 8081 	bhi.w	8006392 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d024      	beq.n	80062e0 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2b02      	cmp	r3, #2
 800629a:	d17a      	bne.n	8006392 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	ee07 3a90 	vmov	s15, r3
 80062a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062a6:	eddf 6a91 	vldr	s13, [pc, #580]	; 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80062aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ae:	4b8e      	ldr	r3, [pc, #568]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80062be:	ed97 6a02 	vldr	s12, [r7, #8]
 80062c2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80062c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80062ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80062d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062de:	e08f      	b.n	8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80062e0:	4b81      	ldr	r3, [pc, #516]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 80062ec:	4b7e      	ldr	r3, [pc, #504]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	0f1b      	lsrs	r3, r3, #28
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	e006      	b.n	8006306 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80062f8:	4b7b      	ldr	r3, [pc, #492]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	0f1b      	lsrs	r3, r3, #28
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	4a7b      	ldr	r2, [pc, #492]	; (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8006308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006330:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006340:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634c:	e058      	b.n	8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006358:	eddf 6a64 	vldr	s13, [pc, #400]	; 80064ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800635c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006360:	4b61      	ldr	r3, [pc, #388]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006370:	ed97 6a02 	vldr	s12, [r7, #8]
 8006374:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006378:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800637c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006384:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006390:	e036      	b.n	8006400 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006392:	4b55      	ldr	r3, [pc, #340]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800639e:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	0f1b      	lsrs	r3, r3, #28
 80063a4:	f003 030f 	and.w	r3, r3, #15
 80063a8:	e006      	b.n	80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 80063aa:	4b4f      	ldr	r3, [pc, #316]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063b0:	041b      	lsls	r3, r3, #16
 80063b2:	0f1b      	lsrs	r3, r3, #28
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	4a4e      	ldr	r2, [pc, #312]	; (80064f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80063ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063de:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80064f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80063e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063fe:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006400:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d017      	beq.n	800643c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800640c:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	0a5b      	lsrs	r3, r3, #9
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800641e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006422:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006426:	edd7 6a07 	vldr	s13, [r7, #28]
 800642a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006432:	ee17 2a90 	vmov	r2, s15
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	e002      	b.n	8006442 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d017      	beq.n	800647e <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800644e:	4b26      	ldr	r3, [pc, #152]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006452:	0c1b      	lsrs	r3, r3, #16
 8006454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006458:	ee07 3a90 	vmov	s15, r3
 800645c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006464:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006468:	edd7 6a07 	vldr	s13, [r7, #28]
 800646c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006470:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006474:	ee17 2a90 	vmov	r2, s15
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	e002      	b.n	8006484 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006484:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d017      	beq.n	80064c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006490:	4b15      	ldr	r3, [pc, #84]	; (80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006494:	0e1b      	lsrs	r3, r3, #24
 8006496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80064a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064a6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80064ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064b6:	ee17 2a90 	vmov	r2, s15
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80064be:	e00c      	b.n	80064da <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	609a      	str	r2, [r3, #8]
}
 80064c6:	e008      	b.n	80064da <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
}
 80064da:	bf00      	nop
 80064dc:	3724      	adds	r7, #36	; 0x24
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	46020c00 	.word	0x46020c00
 80064ec:	4b742400 	.word	0x4b742400
 80064f0:	46000000 	.word	0x46000000
 80064f4:	080095ec 	.word	0x080095ec

080064f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b089      	sub	sp, #36	; 0x24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006500:	4bad      	ldr	r3, [pc, #692]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006508:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800650a:	4bab      	ldr	r3, [pc, #684]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800650c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006514:	4ba8      	ldr	r3, [pc, #672]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	3301      	adds	r3, #1
 8006520:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006522:	4ba5      	ldr	r3, [pc, #660]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006526:	091b      	lsrs	r3, r3, #4
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800652e:	4ba2      	ldr	r3, [pc, #648]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006532:	08db      	lsrs	r3, r3, #3
 8006534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	fb02 f303 	mul.w	r3, r2, r3
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8123 	beq.w	8006798 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2b03      	cmp	r3, #3
 8006556:	d062      	beq.n	800661e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b03      	cmp	r3, #3
 800655c:	f200 8081 	bhi.w	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d024      	beq.n	80065b0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	2b02      	cmp	r3, #2
 800656a:	d17a      	bne.n	8006662 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	ee07 3a90 	vmov	s15, r3
 8006572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006576:	eddf 6a91 	vldr	s13, [pc, #580]	; 80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657e:	4b8e      	ldr	r3, [pc, #568]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006586:	ee07 3a90 	vmov	s15, r3
 800658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800658e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006592:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006596:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065aa:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80065ae:	e08f      	b.n	80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80065b0:	4b81      	ldr	r3, [pc, #516]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 80065bc:	4b7e      	ldr	r3, [pc, #504]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	0f1b      	lsrs	r3, r3, #28
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	e006      	b.n	80065d6 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 80065c8:	4b7b      	ldr	r3, [pc, #492]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065ce:	041b      	lsls	r3, r3, #16
 80065d0:	0f1b      	lsrs	r3, r3, #28
 80065d2:	f003 030f 	and.w	r3, r3, #15
 80065d6:	4a7b      	ldr	r2, [pc, #492]	; (80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 80065d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065dc:	ee07 3a90 	vmov	s15, r3
 80065e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	ee07 3a90 	vmov	s15, r3
 80065ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	ee07 3a90 	vmov	s15, r3
 80065f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006600:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800660c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006610:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006618:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800661c:	e058      	b.n	80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	eddf 6a64 	vldr	s13, [pc, #400]	; 80067bc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800662c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006630:	4b61      	ldr	r3, [pc, #388]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006640:	ed97 6a02 	vldr	s12, [r7, #8]
 8006644:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006648:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800664c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006654:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800665c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006660:	e036      	b.n	80066d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006662:	4b55      	ldr	r3, [pc, #340]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800666e:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	0f1b      	lsrs	r3, r3, #28
 8006674:	f003 030f 	and.w	r3, r3, #15
 8006678:	e006      	b.n	8006688 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800667a:	4b4f      	ldr	r3, [pc, #316]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800667c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006680:	041b      	lsls	r3, r3, #16
 8006682:	0f1b      	lsrs	r3, r3, #28
 8006684:	f003 030f 	and.w	r3, r3, #15
 8006688:	4a4e      	ldr	r2, [pc, #312]	; (80067c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800668a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800668e:	ee07 3a90 	vmov	s15, r3
 8006692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	ee07 3a90 	vmov	s15, r3
 800669c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80066b2:	eddf 5a43 	vldr	s11, [pc, #268]	; 80067c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80066b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066ce:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80066d0:	4b39      	ldr	r3, [pc, #228]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d017      	beq.n	800670c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066dc:	4b36      	ldr	r3, [pc, #216]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	0a5b      	lsrs	r3, r3, #9
 80066e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80066ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80066f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80066fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006702:	ee17 2a90 	vmov	r2, s15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	601a      	str	r2, [r3, #0]
 800670a:	e002      	b.n	8006712 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006712:	4b29      	ldr	r3, [pc, #164]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d017      	beq.n	800674e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800671e:	4b26      	ldr	r3, [pc, #152]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006728:	ee07 3a90 	vmov	s15, r3
 800672c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006730:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006734:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006738:	edd7 6a07 	vldr	s13, [r7, #28]
 800673c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006744:	ee17 2a90 	vmov	r2, s15
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	e002      	b.n	8006754 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006754:	4b18      	ldr	r3, [pc, #96]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d017      	beq.n	8006790 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006760:	4b15      	ldr	r3, [pc, #84]	; (80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006772:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006776:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800677a:	edd7 6a07 	vldr	s13, [r7, #28]
 800677e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006786:	ee17 2a90 	vmov	r2, s15
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800678e:	e00c      	b.n	80067aa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	609a      	str	r2, [r3, #8]
}
 8006796:	e008      	b.n	80067aa <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
}
 80067aa:	bf00      	nop
 80067ac:	3724      	adds	r7, #36	; 0x24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	46020c00 	.word	0x46020c00
 80067bc:	4b742400 	.word	0x4b742400
 80067c0:	46000000 	.word	0x46000000
 80067c4:	080095ec 	.word	0x080095ec

080067c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08e      	sub	sp, #56	; 0x38
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80067d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80067da:	430b      	orrs	r3, r1
 80067dc:	d145      	bne.n	800686a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80067de:	4ba7      	ldr	r3, [pc, #668]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80067ea:	4ba4      	ldr	r3, [pc, #656]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80067ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d108      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fe:	d104      	bne.n	800680a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006800:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006804:	637b      	str	r3, [r7, #52]	; 0x34
 8006806:	f001 b9b3 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800680a:	4b9c      	ldr	r3, [pc, #624]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800680c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006818:	d114      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006820:	d110      	bne.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006822:	4b96      	ldr	r3, [pc, #600]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006830:	d103      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006832:	23fa      	movs	r3, #250	; 0xfa
 8006834:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006836:	f001 b99b 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800683a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800683e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006840:	f001 b996 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006844:	4b8d      	ldr	r3, [pc, #564]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006850:	d107      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006858:	d103      	bne.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800685a:	4b89      	ldr	r3, [pc, #548]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
 800685e:	f001 b987 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
 8006866:	f001 b983 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800686a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006872:	430b      	orrs	r3, r1
 8006874:	d151      	bne.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006876:	4b81      	ldr	r3, [pc, #516]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006878:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800687c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006880:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d035      	beq.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	2b80      	cmp	r3, #128	; 0x80
 800688c:	d841      	bhi.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b60      	cmp	r3, #96	; 0x60
 8006892:	d02a      	beq.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	2b60      	cmp	r3, #96	; 0x60
 8006898:	d83b      	bhi.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800689a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689c:	2b40      	cmp	r3, #64	; 0x40
 800689e:	d009      	beq.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80068a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d835      	bhi.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00c      	beq.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80068ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	d012      	beq.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80068b2:	e02e      	b.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fb4d 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068c2:	f001 b955 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068c6:	f107 0318 	add.w	r3, r7, #24
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff fcac 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068d4:	f001 b94c 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068d8:	f107 030c 	add.w	r3, r7, #12
 80068dc:	4618      	mov	r0, r3
 80068de:	f7ff fe0b 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068e6:	f001 b943 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80068ea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80068f0:	f001 b93e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80068f4:	4b61      	ldr	r3, [pc, #388]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006900:	d103      	bne.n	800690a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006902:	4b60      	ldr	r3, [pc, #384]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006904:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006906:	f001 b933 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800690e:	f001 b92f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006916:	f001 b92b 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800691a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006922:	430b      	orrs	r3, r1
 8006924:	d158      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006926:	4b55      	ldr	r3, [pc, #340]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006928:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800692c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006930:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006938:	d03b      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006940:	d846      	bhi.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006944:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006948:	d02e      	beq.n	80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006950:	d83e      	bhi.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006958:	d00b      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006960:	d836      	bhi.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696e:	d012      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006970:	e02e      	b.n	80069d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff faee 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006980:	f001 b8f6 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006984:	f107 0318 	add.w	r3, r7, #24
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fc4d 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006992:	f001 b8ed 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006996:	f107 030c 	add.w	r3, r7, #12
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff fdac 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069a4:	f001 b8e4 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80069a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80069ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ae:	f001 b8df 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b2:	4b32      	ldr	r3, [pc, #200]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d103      	bne.n	80069c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80069c0:	4b30      	ldr	r3, [pc, #192]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c4:	f001 b8d4 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069cc:	f001 b8d0 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069d4:	f001 b8cc 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80069d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069dc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80069e0:	430b      	orrs	r3, r1
 80069e2:	d126      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80069e4:	4b25      	ldr	r3, [pc, #148]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ee:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80069f0:	4b22      	ldr	r3, [pc, #136]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fc:	d106      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006a04:	4b1f      	ldr	r3, [pc, #124]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
 8006a08:	f001 b8b2 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a18:	d107      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a20:	d103      	bne.n	8006a2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
 8006a26:	f001 b8a3 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2e:	f001 b89f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a36:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	d16e      	bne.n	8006b1c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a44:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006a48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a50:	d03d      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a58:	d85c      	bhi.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a60:	d014      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a68:	d854      	bhi.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d01f      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a76:	d012      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006a78:	e04c      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006a7a:	bf00      	nop
 8006a7c:	46020c00 	.word	0x46020c00
 8006a80:	0007a120 	.word	0x0007a120
 8006a84:	00f42400 	.word	0x00f42400
 8006a88:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fa61 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a9a:	f001 b869 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fbc0 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aac:	f001 b860 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006ab0:	4ba7      	ldr	r3, [pc, #668]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006abc:	d103      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006abe:	4ba5      	ldr	r3, [pc, #660]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac2:	f001 b855 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006aca:	f001 b851 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ace:	4ba0      	ldr	r3, [pc, #640]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d118      	bne.n	8006b0c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ada:	4b9d      	ldr	r3, [pc, #628]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006ae6:	4b9a      	ldr	r3, [pc, #616]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	e006      	b.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006af2:	4b97      	ldr	r3, [pc, #604]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	0e1b      	lsrs	r3, r3, #24
 8006afc:	f003 030f 	and.w	r3, r3, #15
 8006b00:	4a95      	ldr	r2, [pc, #596]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b08:	f001 b832 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b10:	f001 b82e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b18:	f001 b82a 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b20:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006b24:	430b      	orrs	r3, r1
 8006b26:	d17f      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006b28:	4b89      	ldr	r3, [pc, #548]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b32:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d165      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006b3a:	4b85      	ldr	r3, [pc, #532]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b40:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b4c:	d034      	beq.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b54:	d853      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5c:	d00b      	beq.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b64:	d84b      	bhi.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d016      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b72:	d009      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006b74:	e043      	b.n	8006bfe <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff f9ec 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006b84:	f000 bff4 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b88:	f107 0318 	add.w	r3, r7, #24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fb4b 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006b96:	f000 bfeb 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006b9a:	4b6d      	ldr	r3, [pc, #436]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba6:	d103      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006ba8:	4b6a      	ldr	r3, [pc, #424]	; (8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006bac:	f000 bfe0 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006bb4:	f000 bfdc 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bb8:	4b65      	ldr	r3, [pc, #404]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d118      	bne.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc4:	4b62      	ldr	r3, [pc, #392]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006bd0:	4b5f      	ldr	r3, [pc, #380]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006bdc:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	4a5b      	ldr	r2, [pc, #364]	; (8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006bf2:	f000 bfbd 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006bfa:	f000 bfb9 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006c02:	f000 bfb5 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c0c:	d108      	bne.n	8006c20 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f9a0 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c1c:	f000 bfa8 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	637b      	str	r3, [r7, #52]	; 0x34
 8006c24:	f000 bfa4 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2c:	1e51      	subs	r1, r2, #1
 8006c2e:	430b      	orrs	r3, r1
 8006c30:	d136      	bne.n	8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c32:	4b47      	ldr	r3, [pc, #284]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006c44:	f7fe fb1a 	bl	800527c <HAL_RCC_GetPCLK2Freq>
 8006c48:	6378      	str	r0, [r7, #52]	; 0x34
 8006c4a:	f000 bf91 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d104      	bne.n	8006c5e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c54:	f7fe f9dc 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006c58:	6378      	str	r0, [r7, #52]	; 0x34
 8006c5a:	f000 bf89 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006c5e:	4b3c      	ldr	r3, [pc, #240]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6a:	d106      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d103      	bne.n	8006c7a <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006c72:	4b3a      	ldr	r3, [pc, #232]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
 8006c76:	f000 bf7b 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006c7a:	4b35      	ldr	r3, [pc, #212]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b02      	cmp	r3, #2
 8006c86:	d107      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d104      	bne.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c92:	637b      	str	r3, [r7, #52]	; 0x34
 8006c94:	f000 bf6c 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9c:	f000 bf68 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ca4:	1e91      	subs	r1, r2, #2
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	d136      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006caa:	4b29      	ldr	r3, [pc, #164]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d104      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cbc:	f7fe faca 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8006cc0:	6378      	str	r0, [r7, #52]	; 0x34
 8006cc2:	f000 bf55 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d104      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ccc:	f7fe f9a0 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006cd0:	6378      	str	r0, [r7, #52]	; 0x34
 8006cd2:	f000 bf4d 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006cd6:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce2:	d106      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d103      	bne.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006cea:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
 8006cee:	f000 bf3f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006cf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	2b0c      	cmp	r3, #12
 8006d04:	d104      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0c:	f000 bf30 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
 8006d14:	f000 bf2c 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	1f11      	subs	r1, r2, #4
 8006d1e:	430b      	orrs	r3, r1
 8006d20:	d13f      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d22:	4b0b      	ldr	r3, [pc, #44]	; (8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d2c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d34:	f7fe fa8e 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8006d38:	6378      	str	r0, [r7, #52]	; 0x34
 8006d3a:	f000 bf19 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2b10      	cmp	r3, #16
 8006d42:	d10d      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d44:	f7fe f964 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006d48:	6378      	str	r0, [r7, #52]	; 0x34
 8006d4a:	f000 bf11 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006d4e:	bf00      	nop
 8006d50:	46020c00 	.word	0x46020c00
 8006d54:	02dc6c00 	.word	0x02dc6c00
 8006d58:	080095ec 	.word	0x080095ec
 8006d5c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006d60:	4ba6      	ldr	r3, [pc, #664]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d103      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006d74:	4ba2      	ldr	r3, [pc, #648]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	f000 befa 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006d7c:	4b9f      	ldr	r3, [pc, #636]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d104      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d94:	637b      	str	r3, [r7, #52]	; 0x34
 8006d96:	f000 beeb 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9e:	f000 bee7 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006da6:	f1a2 0108 	sub.w	r1, r2, #8
 8006daa:	430b      	orrs	r3, r1
 8006dac:	d136      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006dae:	4b93      	ldr	r3, [pc, #588]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006db8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d104      	bne.n	8006dca <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fe fa48 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	6378      	str	r0, [r7, #52]	; 0x34
 8006dc6:	f000 bed3 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	d104      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006dd0:	f7fe f91e 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006dd4:	6378      	str	r0, [r7, #52]	; 0x34
 8006dd6:	f000 becb 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006dda:	4b88      	ldr	r3, [pc, #544]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de6:	d106      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	2b80      	cmp	r3, #128	; 0x80
 8006dec:	d103      	bne.n	8006df6 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006dee:	4b84      	ldr	r3, [pc, #528]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006df0:	637b      	str	r3, [r7, #52]	; 0x34
 8006df2:	f000 bebd 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006df6:	4b81      	ldr	r3, [pc, #516]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d107      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	2bc0      	cmp	r3, #192	; 0xc0
 8006e08:	d104      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e10:	f000 beae 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	637b      	str	r3, [r7, #52]	; 0x34
 8006e18:	f000 beaa 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	f1a2 0110 	sub.w	r1, r2, #16
 8006e24:	430b      	orrs	r3, r1
 8006e26:	d139      	bne.n	8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e28:	4b74      	ldr	r3, [pc, #464]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e3a:	f7fe fa0b 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8006e3e:	6378      	str	r0, [r7, #52]	; 0x34
 8006e40:	f000 be96 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4a:	d104      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e4c:	f7fe f8e0 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006e50:	6378      	str	r0, [r7, #52]	; 0x34
 8006e52:	f000 be8d 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006e56:	4b69      	ldr	r3, [pc, #420]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e62:	d107      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6a:	d103      	bne.n	8006e74 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006e6c:	4b64      	ldr	r3, [pc, #400]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e70:	f000 be7e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006e74:	4b61      	ldr	r3, [pc, #388]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d108      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e88:	d104      	bne.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e90:	f000 be6e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006e94:	2300      	movs	r3, #0
 8006e96:	637b      	str	r3, [r7, #52]	; 0x34
 8006e98:	f000 be6a 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006e9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea0:	f1a2 0120 	sub.w	r1, r2, #32
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	d158      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ea8:	4b54      	ldr	r3, [pc, #336]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006eba:	f7fe f9f3 	bl	80052a4 <HAL_RCC_GetPCLK3Freq>
 8006ebe:	6378      	str	r0, [r7, #52]	; 0x34
 8006ec0:	f000 be56 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d104      	bne.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fe f8a1 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006ece:	6378      	str	r0, [r7, #52]	; 0x34
 8006ed0:	f000 be4e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ed4:	4b49      	ldr	r3, [pc, #292]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee0:	d106      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d103      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006ee8:	4b45      	ldr	r3, [pc, #276]	; (8007000 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
 8006eec:	f000 be40 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ef0:	4b42      	ldr	r3, [pc, #264]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d107      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d104      	bne.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f08:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0a:	f000 be31 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d11b      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d118      	bne.n	8006f52 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f20:	4b36      	ldr	r3, [pc, #216]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006f2c:	4b33      	ldr	r3, [pc, #204]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	0e1b      	lsrs	r3, r3, #24
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	e006      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006f38:	4b30      	ldr	r3, [pc, #192]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	0e1b      	lsrs	r3, r3, #24
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4e:	f000 be0f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	637b      	str	r3, [r7, #52]	; 0x34
 8006f56:	f000 be0b 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006f62:	430b      	orrs	r3, r1
 8006f64:	d172      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f6c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006f70:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f78:	d104      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f7a:	f7fe f849 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8006f7e:	6378      	str	r0, [r7, #52]	; 0x34
 8006f80:	f000 bdf6 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8a:	d108      	bne.n	8006f9e <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f8c:	f107 0318 	add.w	r3, r7, #24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7ff f949 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
 8006f9a:	f000 bde9 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d104      	bne.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006fa4:	f7fe f93c 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8006fa8:	6378      	str	r0, [r7, #52]	; 0x34
 8006faa:	f000 bde1 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006fb4:	d128      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fb6:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0320 	and.w	r3, r3, #32
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	d118      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fc2:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8006fce:	4b0b      	ldr	r3, [pc, #44]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	0e1b      	lsrs	r3, r3, #24
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	e006      	b.n	8006fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8006fda:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	0e1b      	lsrs	r3, r3, #24
 8006fe4:	f003 030f 	and.w	r3, r3, #15
 8006fe8:	4a06      	ldr	r2, [pc, #24]	; (8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fee:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff0:	f000 bdbe 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff8:	f000 bdba 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006ffc:	46020c00 	.word	0x46020c00
 8007000:	00f42400 	.word	0x00f42400
 8007004:	080095ec 	.word	0x080095ec
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007008:	4baf      	ldr	r3, [pc, #700]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800701c:	d103      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800701e:	4bab      	ldr	r3, [pc, #684]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007020:	637b      	str	r3, [r7, #52]	; 0x34
 8007022:	f000 bda5 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007026:	4ba8      	ldr	r3, [pc, #672]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800702e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007032:	d107      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703a:	d103      	bne.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800703c:	4ba3      	ldr	r3, [pc, #652]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800703e:	637b      	str	r3, [r7, #52]	; 0x34
 8007040:	f000 bd96 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
 8007048:	f000 bd92 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007054:	430b      	orrs	r3, r1
 8007056:	d158      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007058:	4b9b      	ldr	r3, [pc, #620]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800705a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800705e:	f003 0307 	and.w	r3, r3, #7
 8007062:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	2b04      	cmp	r3, #4
 8007068:	d84b      	bhi.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800706a:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800706c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007070:	080070a9 	.word	0x080070a9
 8007074:	08007085 	.word	0x08007085
 8007078:	08007097 	.word	0x08007097
 800707c:	080070b3 	.word	0x080070b3
 8007080:	080070bd 	.word	0x080070bd
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007084:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe ff65 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007092:	f000 bd6d 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007096:	f107 030c 	add.w	r3, r7, #12
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fa2c 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070a4:	f000 bd64 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80070a8:	f7fe f8ba 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80070ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80070ae:	f000 bd5f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80070b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b8:	f000 bd5a 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070bc:	4b82      	ldr	r3, [pc, #520]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d118      	bne.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070c8:	4b7f      	ldr	r3, [pc, #508]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80070d4:	4b7c      	ldr	r3, [pc, #496]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	0e1b      	lsrs	r3, r3, #24
 80070da:	f003 030f 	and.w	r3, r3, #15
 80070de:	e006      	b.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80070e0:	4b79      	ldr	r3, [pc, #484]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	0e1b      	lsrs	r3, r3, #24
 80070ea:	f003 030f 	and.w	r3, r3, #15
 80070ee:	4a78      	ldr	r2, [pc, #480]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80070f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070f6:	f000 bd3b 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070fe:	f000 bd37 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007106:	f000 bd33 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800710a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007112:	430b      	orrs	r3, r1
 8007114:	d167      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007116:	4b6c      	ldr	r3, [pc, #432]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007118:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800711c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007120:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007124:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007128:	d036      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800712a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007130:	d855      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007138:	d029      	beq.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007140:	d84d      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007148:	d013      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800714a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007150:	d845      	bhi.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d015      	beq.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715e:	d13e      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe fef7 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800716e:	f000 bcff 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff f9be 	bl	80064f8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007180:	f000 bcf6 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007184:	f7fe f84c 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8007188:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800718a:	f000 bcf1 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800718e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007194:	f000 bcec 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007198:	4b4b      	ldr	r3, [pc, #300]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 0320 	and.w	r3, r3, #32
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d118      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071a4:	4b48      	ldr	r3, [pc, #288]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d005      	beq.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80071b0:	4b45      	ldr	r3, [pc, #276]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	0e1b      	lsrs	r3, r3, #24
 80071b6:	f003 030f 	and.w	r3, r3, #15
 80071ba:	e006      	b.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80071bc:	4b42      	ldr	r3, [pc, #264]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071c2:	041b      	lsls	r3, r3, #16
 80071c4:	0e1b      	lsrs	r3, r3, #24
 80071c6:	f003 030f 	and.w	r3, r3, #15
 80071ca:	4a41      	ldr	r2, [pc, #260]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80071cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071d2:	f000 bccd 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071da:	f000 bcc9 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071e2:	f000 bcc5 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80071e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ea:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80071ee:	430b      	orrs	r3, r1
 80071f0:	d14c      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80071f2:	4b35      	ldr	r3, [pc, #212]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80071fc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fe f826 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8007208:	6378      	str	r0, [r7, #52]	; 0x34
 800720a:	f000 bcb1 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007214:	d104      	bne.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007216:	f7fd fefb 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800721a:	6378      	str	r0, [r7, #52]	; 0x34
 800721c:	f000 bca8 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007220:	4b29      	ldr	r3, [pc, #164]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722c:	d107      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007234:	d103      	bne.n	800723e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8007236:	4b25      	ldr	r3, [pc, #148]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
 800723a:	f000 bc99 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800723e:	4b22      	ldr	r3, [pc, #136]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d11c      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800724c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007250:	d118      	bne.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007252:	4b1d      	ldr	r3, [pc, #116]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d005      	beq.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800725e:	4b1a      	ldr	r3, [pc, #104]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0e1b      	lsrs	r3, r3, #24
 8007264:	f003 030f 	and.w	r3, r3, #15
 8007268:	e006      	b.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800726a:	4b17      	ldr	r3, [pc, #92]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800726c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007270:	041b      	lsls	r3, r3, #16
 8007272:	0e1b      	lsrs	r3, r3, #24
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800727a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727e:	637b      	str	r3, [r7, #52]	; 0x34
 8007280:	f000 bc76 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007284:	2300      	movs	r3, #0
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
 8007288:	f000 bc72 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800728c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007290:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007294:	430b      	orrs	r3, r1
 8007296:	d153      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007298:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800729a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800729e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d104      	bne.n	80072b4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072aa:	f7fd ffd3 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 80072ae:	6378      	str	r0, [r7, #52]	; 0x34
 80072b0:	f000 bc5e 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ba:	d10b      	bne.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072bc:	f7fd fea8 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 80072c0:	6378      	str	r0, [r7, #52]	; 0x34
 80072c2:	f000 bc55 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80072c6:	bf00      	nop
 80072c8:	46020c00 	.word	0x46020c00
 80072cc:	00f42400 	.word	0x00f42400
 80072d0:	080095ec 	.word	0x080095ec
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80072d4:	4ba1      	ldr	r3, [pc, #644]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072e0:	d107      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e8:	d103      	bne.n	80072f2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 80072ea:	4b9d      	ldr	r3, [pc, #628]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	f000 bc3f 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80072f2:	4b9a      	ldr	r3, [pc, #616]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d11c      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007304:	d118      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007306:	4b95      	ldr	r3, [pc, #596]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d005      	beq.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8007312:	4b92      	ldr	r3, [pc, #584]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	0e1b      	lsrs	r3, r3, #24
 8007318:	f003 030f 	and.w	r3, r3, #15
 800731c:	e006      	b.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800731e:	4b8f      	ldr	r3, [pc, #572]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007324:	041b      	lsls	r3, r3, #16
 8007326:	0e1b      	lsrs	r3, r3, #24
 8007328:	f003 030f 	and.w	r3, r3, #15
 800732c:	4a8d      	ldr	r2, [pc, #564]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800732e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007332:	637b      	str	r3, [r7, #52]	; 0x34
 8007334:	f000 bc1c 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
 800733c:	f000 bc18 	b.w	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007344:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007348:	430b      	orrs	r3, r1
 800734a:	d151      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800734c:	4b83      	ldr	r3, [pc, #524]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800734e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007352:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007356:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735a:	2bc0      	cmp	r3, #192	; 0xc0
 800735c:	d024      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	2bc0      	cmp	r3, #192	; 0xc0
 8007362:	d842      	bhi.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	2b80      	cmp	r3, #128	; 0x80
 8007368:	d00d      	beq.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	2b80      	cmp	r3, #128	; 0x80
 800736e:	d83c      	bhi.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	d003      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d011      	beq.n	80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800737c:	e035      	b.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800737e:	f7fd ff91 	bl	80052a4 <HAL_RCC_GetPCLK3Freq>
 8007382:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007384:	e3f4      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007386:	4b75      	ldr	r3, [pc, #468]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800738e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007392:	d102      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007394:	4b72      	ldr	r3, [pc, #456]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007398:	e3ea      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800739e:	e3e7      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80073a0:	f7fd fe36 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 80073a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80073a6:	e3e3      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073a8:	4b6c      	ldr	r3, [pc, #432]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0320 	and.w	r3, r3, #32
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d117      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073b4:	4b69      	ldr	r3, [pc, #420]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 80073c0:	4b66      	ldr	r3, [pc, #408]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	e006      	b.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80073cc:	4b63      	ldr	r3, [pc, #396]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	0e1b      	lsrs	r3, r3, #24
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	4a62      	ldr	r2, [pc, #392]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80073dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073e2:	e3c5      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e8:	e3c2      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ee:	e3bf      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80073f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f4:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80073f8:	430b      	orrs	r3, r1
 80073fa:	d147      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80073fc:	4b57      	ldr	r3, [pc, #348]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007402:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007406:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800740e:	f7fd ff21 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8007412:	6378      	str	r0, [r7, #52]	; 0x34
 8007414:	e3ac      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800741c:	d103      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800741e:	f7fd fdf7 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007422:	6378      	str	r0, [r7, #52]	; 0x34
 8007424:	e3a4      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007426:	4b4d      	ldr	r3, [pc, #308]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800742e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800743a:	d102      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800743c:	4b48      	ldr	r3, [pc, #288]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
 8007440:	e396      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007442:	4b46      	ldr	r3, [pc, #280]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b20      	cmp	r3, #32
 800744c:	d11b      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800744e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007450:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007454:	d117      	bne.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007456:	4b41      	ldr	r3, [pc, #260]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d005      	beq.n	800746e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8007462:	4b3e      	ldr	r3, [pc, #248]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	0e1b      	lsrs	r3, r3, #24
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	e006      	b.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800746e:	4b3b      	ldr	r3, [pc, #236]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007470:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007474:	041b      	lsls	r3, r3, #16
 8007476:	0e1b      	lsrs	r3, r3, #24
 8007478:	f003 030f 	and.w	r3, r3, #15
 800747c:	4a39      	ldr	r2, [pc, #228]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800747e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007482:	637b      	str	r3, [r7, #52]	; 0x34
 8007484:	e374      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007486:	2300      	movs	r3, #0
 8007488:	637b      	str	r3, [r7, #52]	; 0x34
 800748a:	e371      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800748c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007490:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007494:	430b      	orrs	r3, r1
 8007496:	d16a      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007498:	4b30      	ldr	r3, [pc, #192]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800749a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800749e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d120      	bne.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074aa:	4b2c      	ldr	r3, [pc, #176]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d117      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074b6:	4b29      	ldr	r3, [pc, #164]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 80074c2:	4b26      	ldr	r3, [pc, #152]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	0e1b      	lsrs	r3, r3, #24
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074d4:	041b      	lsls	r3, r3, #16
 80074d6:	0e1b      	lsrs	r3, r3, #24
 80074d8:	f003 030f 	and.w	r3, r3, #15
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80074de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
 80074e4:	e344      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ea:	e341      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80074ec:	4b1b      	ldr	r3, [pc, #108]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80074f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074fa:	d112      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007502:	d10e      	bne.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007504:	4b15      	ldr	r3, [pc, #84]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800750a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800750e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007512:	d102      	bne.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8007514:	23fa      	movs	r3, #250	; 0xfa
 8007516:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007518:	e32a      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800751a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800751e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007520:	e326      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007522:	4b0e      	ldr	r3, [pc, #56]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800752a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752e:	d106      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007536:	d102      	bne.n	800753e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8007538:	4b09      	ldr	r3, [pc, #36]	; (8007560 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800753a:	637b      	str	r3, [r7, #52]	; 0x34
 800753c:	e318      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007544:	f003 0302 	and.w	r3, r3, #2
 8007548:	2b02      	cmp	r3, #2
 800754a:	d10d      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007552:	d109      	bne.n	8007568 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007558:	637b      	str	r3, [r7, #52]	; 0x34
 800755a:	e309      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800755c:	46020c00 	.word	0x46020c00
 8007560:	00f42400 	.word	0x00f42400
 8007564:	080095ec 	.word	0x080095ec
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	637b      	str	r3, [r7, #52]	; 0x34
 800756c:	e300      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800756e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007572:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007576:	430b      	orrs	r3, r1
 8007578:	d164      	bne.n	8007644 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800757a:	4ba2      	ldr	r3, [pc, #648]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800757c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007580:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007584:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b00      	cmp	r3, #0
 800758a:	d120      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800758c:	4b9d      	ldr	r3, [pc, #628]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b20      	cmp	r3, #32
 8007596:	d117      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007598:	4b9a      	ldr	r3, [pc, #616]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d005      	beq.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 80075a4:	4b97      	ldr	r3, [pc, #604]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	0e1b      	lsrs	r3, r3, #24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	e006      	b.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 80075b0:	4b94      	ldr	r3, [pc, #592]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075b6:	041b      	lsls	r3, r3, #16
 80075b8:	0e1b      	lsrs	r3, r3, #24
 80075ba:	f003 030f 	and.w	r3, r3, #15
 80075be:	4a92      	ldr	r2, [pc, #584]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80075c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e2d3      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
 80075cc:	e2d0      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80075ce:	4b8d      	ldr	r3, [pc, #564]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075dc:	d112      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d10e      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075e6:	4b87      	ldr	r3, [pc, #540]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80075e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075f4:	d102      	bne.n	80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80075f6:	23fa      	movs	r3, #250	; 0xfa
 80075f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075fa:	e2b9      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80075fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007600:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007602:	e2b5      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007604:	4b7f      	ldr	r3, [pc, #508]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800760c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007610:	d106      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8007612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007618:	d102      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800761a:	4b7c      	ldr	r3, [pc, #496]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
 800761e:	e2a7      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007620:	4b78      	ldr	r3, [pc, #480]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007622:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007626:	f003 0302 	and.w	r3, r3, #2
 800762a:	2b02      	cmp	r3, #2
 800762c:	d107      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007634:	d103      	bne.n	800763e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8007636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
 800763c:	e298      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
 8007642:	e295      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007648:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800764c:	430b      	orrs	r3, r1
 800764e:	d147      	bne.n	80076e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007650:	4b6c      	ldr	r3, [pc, #432]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007656:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800765a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800765c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765e:	2b00      	cmp	r3, #0
 8007660:	d103      	bne.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007662:	f7fd fdf7 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 8007666:	6378      	str	r0, [r7, #52]	; 0x34
 8007668:	e282      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800766a:	4b66      	ldr	r3, [pc, #408]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800766c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007678:	d112      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007680:	d10e      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007682:	4b60      	ldr	r3, [pc, #384]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800768c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007690:	d102      	bne.n	8007698 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8007692:	23fa      	movs	r3, #250	; 0xfa
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007696:	e26b      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007698:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800769e:	e267      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80076a0:	4b58      	ldr	r3, [pc, #352]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ac:	d106      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80076ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80076b4:	d102      	bne.n	80076bc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 80076b6:	4b55      	ldr	r3, [pc, #340]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80076b8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ba:	e259      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80076bc:	4b51      	ldr	r3, [pc, #324]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d107      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80076d0:	d103      	bne.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 80076d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	e24a      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	637b      	str	r3, [r7, #52]	; 0x34
 80076de:	e247      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80076e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e4:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80076e8:	430b      	orrs	r3, r1
 80076ea:	d12d      	bne.n	8007748 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076f2:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80076f6:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80076f8:	4b42      	ldr	r3, [pc, #264]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007700:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007704:	d105      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d102      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800770c:	4b3f      	ldr	r3, [pc, #252]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800770e:	637b      	str	r3, [r7, #52]	; 0x34
 8007710:	e22e      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007718:	d107      	bne.n	800772a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800771a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fc1a 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
 8007728:	e222      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007730:	d107      	bne.n	8007742 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007732:	f107 0318 	add.w	r3, r7, #24
 8007736:	4618      	mov	r0, r3
 8007738:	f7fe fd76 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	e216      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
 8007746:	e213      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8007748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8007750:	430b      	orrs	r3, r1
 8007752:	d15d      	bne.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007754:	4b2b      	ldr	r3, [pc, #172]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800775a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800775e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007762:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007766:	d028      	beq.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800776e:	d845      	bhi.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007772:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007776:	d013      	beq.n	80077a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800777e:	d83d      	bhi.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	2b00      	cmp	r3, #0
 8007784:	d004      	beq.n	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800778c:	d004      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800778e:	e035      	b.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007790:	f7fd fd74 	bl	800527c <HAL_RCC_GetPCLK2Freq>
 8007794:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007796:	e1eb      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007798:	f7fd fc3a 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 800779c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800779e:	e1e7      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a0:	4b18      	ldr	r3, [pc, #96]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ac:	d102      	bne.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80077ae:	4b17      	ldr	r3, [pc, #92]	; (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80077b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077b2:	e1dd      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077b8:	e1da      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b20      	cmp	r3, #32
 80077c4:	d117      	bne.n	80077f6 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077c6:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	0e1b      	lsrs	r3, r3, #24
 80077d8:	f003 030f 	and.w	r3, r3, #15
 80077dc:	e006      	b.n	80077ec <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 80077de:	4b09      	ldr	r3, [pc, #36]	; (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	0e1b      	lsrs	r3, r3, #24
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	4a06      	ldr	r2, [pc, #24]	; (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 80077ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077f4:	e1bc      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077fa:	e1b9      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007800:	e1b6      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007802:	bf00      	nop
 8007804:	46020c00 	.word	0x46020c00
 8007808:	080095ec 	.word	0x080095ec
 800780c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007810:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007814:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8007818:	430b      	orrs	r3, r1
 800781a:	d156      	bne.n	80078ca <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800781c:	4ba5      	ldr	r3, [pc, #660]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800781e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007826:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800782e:	d028      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007836:	d845      	bhi.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800783e:	d013      	beq.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8007840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007846:	d83d      	bhi.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8007848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784a:	2b00      	cmp	r3, #0
 800784c:	d004      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d004      	beq.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007856:	e035      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007858:	f7fd fcfc 	bl	8005254 <HAL_RCC_GetPCLK1Freq>
 800785c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800785e:	e187      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007860:	f7fd fbd6 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007864:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007866:	e183      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007868:	4b92      	ldr	r3, [pc, #584]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007870:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007874:	d102      	bne.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007876:	4b90      	ldr	r3, [pc, #576]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800787a:	e179      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800787c:	2300      	movs	r3, #0
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007880:	e176      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007882:	4b8c      	ldr	r3, [pc, #560]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b20      	cmp	r3, #32
 800788c:	d117      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800788e:	4b89      	ldr	r3, [pc, #548]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800789a:	4b86      	ldr	r3, [pc, #536]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	0e1b      	lsrs	r3, r3, #24
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	e006      	b.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80078a6:	4b83      	ldr	r3, [pc, #524]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80078a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078ac:	041b      	lsls	r3, r3, #16
 80078ae:	0e1b      	lsrs	r3, r3, #24
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	4a81      	ldr	r2, [pc, #516]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80078b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078bc:	e158      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c2:	e155      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078c8:	e152      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80078ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ce:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80078d2:	430b      	orrs	r3, r1
 80078d4:	d177      	bne.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80078d6:	4b77      	ldr	r3, [pc, #476]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80078d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80078dc:	f003 0318 	and.w	r3, r3, #24
 80078e0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80078e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e4:	2b18      	cmp	r3, #24
 80078e6:	d86b      	bhi.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80078e8:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007955 	.word	0x08007955
 80078f4:	080079c1 	.word	0x080079c1
 80078f8:	080079c1 	.word	0x080079c1
 80078fc:	080079c1 	.word	0x080079c1
 8007900:	080079c1 	.word	0x080079c1
 8007904:	080079c1 	.word	0x080079c1
 8007908:	080079c1 	.word	0x080079c1
 800790c:	080079c1 	.word	0x080079c1
 8007910:	0800795d 	.word	0x0800795d
 8007914:	080079c1 	.word	0x080079c1
 8007918:	080079c1 	.word	0x080079c1
 800791c:	080079c1 	.word	0x080079c1
 8007920:	080079c1 	.word	0x080079c1
 8007924:	080079c1 	.word	0x080079c1
 8007928:	080079c1 	.word	0x080079c1
 800792c:	080079c1 	.word	0x080079c1
 8007930:	08007965 	.word	0x08007965
 8007934:	080079c1 	.word	0x080079c1
 8007938:	080079c1 	.word	0x080079c1
 800793c:	080079c1 	.word	0x080079c1
 8007940:	080079c1 	.word	0x080079c1
 8007944:	080079c1 	.word	0x080079c1
 8007948:	080079c1 	.word	0x080079c1
 800794c:	080079c1 	.word	0x080079c1
 8007950:	0800797f 	.word	0x0800797f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007954:	f7fd fca6 	bl	80052a4 <HAL_RCC_GetPCLK3Freq>
 8007958:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800795a:	e109      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800795c:	f7fd fb58 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007960:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007962:	e105      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007964:	4b53      	ldr	r3, [pc, #332]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d102      	bne.n	8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007972:	4b51      	ldr	r3, [pc, #324]	; (8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007976:	e0fb      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797c:	e0f8      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800797e:	4b4d      	ldr	r3, [pc, #308]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b20      	cmp	r3, #32
 8007988:	d117      	bne.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800798a:	4b4a      	ldr	r3, [pc, #296]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d005      	beq.n	80079a2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007996:	4b47      	ldr	r3, [pc, #284]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	0e1b      	lsrs	r3, r3, #24
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	e006      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80079a2:	4b44      	ldr	r3, [pc, #272]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079a8:	041b      	lsls	r3, r3, #16
 80079aa:	0e1b      	lsrs	r3, r3, #24
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	4a42      	ldr	r2, [pc, #264]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80079b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079b8:	e0da      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079be:	e0d7      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079c4:	e0d4      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80079c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ca:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80079ce:	430b      	orrs	r3, r1
 80079d0:	d155      	bne.n	8007a7e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80079d2:	4b38      	ldr	r3, [pc, #224]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80079d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80079dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e4:	d013      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ec:	d844      	bhi.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f4:	d013      	beq.n	8007a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80079f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079fc:	d83c      	bhi.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80079fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d014      	beq.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a0a:	d014      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007a0c:	e034      	b.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a0e:	f107 0318 	add.w	r3, r7, #24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fe fc08 	bl	8006228 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a1c:	e0a8      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7fe fa98 	bl	8005f58 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a2c:	e0a0      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a2e:	f7fd faef 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8007a32:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a34:	e09c      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a36:	4b1f      	ldr	r3, [pc, #124]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b20      	cmp	r3, #32
 8007a40:	d117      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d005      	beq.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007a4e:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	0e1b      	lsrs	r3, r3, #24
 8007a54:	f003 030f 	and.w	r3, r3, #15
 8007a58:	e006      	b.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007a5a:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a60:	041b      	lsls	r3, r3, #16
 8007a62:	0e1b      	lsrs	r3, r3, #24
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	4a14      	ldr	r2, [pc, #80]	; (8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a70:	e07e      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a76:	e07b      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a7c:	e078      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007a7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a82:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007a86:	430b      	orrs	r3, r1
 8007a88:	d138      	bne.n	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007a8a:	4b0a      	ldr	r3, [pc, #40]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a94:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007a96:	4b07      	ldr	r3, [pc, #28]	; (8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d10d      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10a      	bne.n	8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007aaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab0:	e05e      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007ab2:	bf00      	nop
 8007ab4:	46020c00 	.word	0x46020c00
 8007ab8:	00f42400 	.word	0x00f42400
 8007abc:	080095ec 	.word	0x080095ec
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007ac0:	4b2e      	ldr	r3, [pc, #184]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ace:	d112      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad6:	d10e      	bne.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ad8:	4b28      	ldr	r3, [pc, #160]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007ada:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ae6:	d102      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007ae8:	23fa      	movs	r3, #250	; 0xfa
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007aec:	e040      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007aee:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007af4:	e03c      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	e039      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b00:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007b04:	430b      	orrs	r3, r1
 8007b06:	d131      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007b08:	4b1c      	ldr	r3, [pc, #112]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b20:	d105      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007b28:	4b15      	ldr	r3, [pc, #84]	; (8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2c:	e020      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007b2e:	4b13      	ldr	r3, [pc, #76]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3a:	d106      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d102      	bne.n	8007b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007b46:	637b      	str	r3, [r7, #52]	; 0x34
 8007b48:	e012      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007b4a:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b56:	d106      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b5e:	d102      	bne.n	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007b60:	4b09      	ldr	r3, [pc, #36]	; (8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
 8007b64:	e004      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007b66:	2300      	movs	r3, #0
 8007b68:	637b      	str	r3, [r7, #52]	; 0x34
 8007b6a:	e001      	b.n	8007b70 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3738      	adds	r7, #56	; 0x38
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	46020c00 	.word	0x46020c00
 8007b80:	02dc6c00 	.word	0x02dc6c00
 8007b84:	016e3600 	.word	0x016e3600
 8007b88:	00f42400 	.word	0x00f42400

08007b8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007b94:	4b47      	ldr	r3, [pc, #284]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a46      	ldr	r2, [pc, #280]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007b9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ba0:	f7fa f914 	bl	8001dcc <HAL_GetTick>
 8007ba4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ba6:	e008      	b.n	8007bba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ba8:	f7fa f910 	bl	8001dcc <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	2b02      	cmp	r3, #2
 8007bb4:	d901      	bls.n	8007bba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bb6:	2303      	movs	r3, #3
 8007bb8:	e077      	b.n	8007caa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bba:	4b3e      	ldr	r3, [pc, #248]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f0      	bne.n	8007ba8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007bc6:	4b3b      	ldr	r3, [pc, #236]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	6811      	ldr	r1, [r2, #0]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6852      	ldr	r2, [r2, #4]
 8007bda:	3a01      	subs	r2, #1
 8007bdc:	0212      	lsls	r2, r2, #8
 8007bde:	430a      	orrs	r2, r1
 8007be0:	4934      	ldr	r1, [pc, #208]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007be6:	4b33      	ldr	r3, [pc, #204]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bea:	4b33      	ldr	r3, [pc, #204]	; (8007cb8 <RCCEx_PLL2_Config+0x12c>)
 8007bec:	4013      	ands	r3, r2
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6892      	ldr	r2, [r2, #8]
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	68d2      	ldr	r2, [r2, #12]
 8007bfc:	3a01      	subs	r2, #1
 8007bfe:	0252      	lsls	r2, r2, #9
 8007c00:	b292      	uxth	r2, r2
 8007c02:	4311      	orrs	r1, r2
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6912      	ldr	r2, [r2, #16]
 8007c08:	3a01      	subs	r2, #1
 8007c0a:	0412      	lsls	r2, r2, #16
 8007c0c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007c10:	4311      	orrs	r1, r2
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6952      	ldr	r2, [r2, #20]
 8007c16:	3a01      	subs	r2, #1
 8007c18:	0612      	lsls	r2, r2, #24
 8007c1a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	4924      	ldr	r1, [pc, #144]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007c26:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	f023 020c 	bic.w	r2, r3, #12
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	4920      	ldr	r1, [pc, #128]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007c38:	4b1e      	ldr	r3, [pc, #120]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a1b      	ldr	r3, [r3, #32]
 8007c40:	491c      	ldr	r1, [pc, #112]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007c46:	4b1b      	ldr	r3, [pc, #108]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4a:	4a1a      	ldr	r2, [pc, #104]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c4c:	f023 0310 	bic.w	r3, r3, #16
 8007c50:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c52:	4b18      	ldr	r3, [pc, #96]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	69d2      	ldr	r2, [r2, #28]
 8007c62:	00d2      	lsls	r2, r2, #3
 8007c64:	4913      	ldr	r1, [pc, #76]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c66:	4313      	orrs	r3, r2
 8007c68:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007c6a:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6e:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c70:	f043 0310 	orr.w	r3, r3, #16
 8007c74:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007c76:	4b0f      	ldr	r3, [pc, #60]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a0e      	ldr	r2, [pc, #56]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c80:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c82:	f7fa f8a3 	bl	8001dcc <HAL_GetTick>
 8007c86:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c88:	e008      	b.n	8007c9c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c8a:	f7fa f89f 	bl	8001dcc <HAL_GetTick>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d901      	bls.n	8007c9c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e006      	b.n	8007caa <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <RCCEx_PLL2_Config+0x128>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0f0      	beq.n	8007c8a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0

}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	46020c00 	.word	0x46020c00
 8007cb8:	80800000 	.word	0x80800000

08007cbc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007cc4:	4b47      	ldr	r3, [pc, #284]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a46      	ldr	r2, [pc, #280]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007cd0:	f7fa f87c 	bl	8001dcc <HAL_GetTick>
 8007cd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cd6:	e008      	b.n	8007cea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cd8:	f7fa f878 	bl	8001dcc <HAL_GetTick>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	1ad3      	subs	r3, r2, r3
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	d901      	bls.n	8007cea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e077      	b.n	8007dda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cea:	4b3e      	ldr	r3, [pc, #248]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f0      	bne.n	8007cd8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007cf6:	4b3b      	ldr	r3, [pc, #236]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	6811      	ldr	r1, [r2, #0]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6852      	ldr	r2, [r2, #4]
 8007d0a:	3a01      	subs	r2, #1
 8007d0c:	0212      	lsls	r2, r2, #8
 8007d0e:	430a      	orrs	r2, r1
 8007d10:	4934      	ldr	r1, [pc, #208]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	630b      	str	r3, [r1, #48]	; 0x30
 8007d16:	4b33      	ldr	r3, [pc, #204]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d1a:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <RCCEx_PLL3_Config+0x12c>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6892      	ldr	r2, [r2, #8]
 8007d22:	3a01      	subs	r2, #1
 8007d24:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	68d2      	ldr	r2, [r2, #12]
 8007d2c:	3a01      	subs	r2, #1
 8007d2e:	0252      	lsls	r2, r2, #9
 8007d30:	b292      	uxth	r2, r2
 8007d32:	4311      	orrs	r1, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6912      	ldr	r2, [r2, #16]
 8007d38:	3a01      	subs	r2, #1
 8007d3a:	0412      	lsls	r2, r2, #16
 8007d3c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007d40:	4311      	orrs	r1, r2
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	6952      	ldr	r2, [r2, #20]
 8007d46:	3a01      	subs	r2, #1
 8007d48:	0612      	lsls	r2, r2, #24
 8007d4a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	4924      	ldr	r1, [pc, #144]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007d56:	4b23      	ldr	r3, [pc, #140]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	f023 020c 	bic.w	r2, r3, #12
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	4920      	ldr	r1, [pc, #128]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007d68:	4b1e      	ldr	r3, [pc, #120]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	491c      	ldr	r1, [pc, #112]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007d76:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d7a:	4a1a      	ldr	r2, [pc, #104]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d7c:	f023 0310 	bic.w	r3, r3, #16
 8007d80:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d82:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	69d2      	ldr	r2, [r2, #28]
 8007d92:	00d2      	lsls	r2, r2, #3
 8007d94:	4913      	ldr	r1, [pc, #76]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	4a11      	ldr	r2, [pc, #68]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007da0:	f043 0310 	orr.w	r3, r3, #16
 8007da4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007da6:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a0e      	ldr	r2, [pc, #56]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007db2:	f7fa f80b 	bl	8001dcc <HAL_GetTick>
 8007db6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007db8:	e008      	b.n	8007dcc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dba:	f7fa f807 	bl	8001dcc <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e006      	b.n	8007dda <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <RCCEx_PLL3_Config+0x128>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f0      	beq.n	8007dba <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	46020c00 	.word	0x46020c00
 8007de8:	80800000 	.word	0x80800000

08007dec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e0fb      	b.n	8007ff6 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a7f      	ldr	r2, [pc, #508]	; (8008000 <HAL_SPI_Init+0x214>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d004      	beq.n	8007e12 <HAL_SPI_Init+0x26>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a7d      	ldr	r2, [pc, #500]	; (8008004 <HAL_SPI_Init+0x218>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	e000      	b.n	8007e14 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007e12:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a78      	ldr	r2, [pc, #480]	; (8008000 <HAL_SPI_Init+0x214>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d004      	beq.n	8007e2e <HAL_SPI_Init+0x42>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a76      	ldr	r2, [pc, #472]	; (8008004 <HAL_SPI_Init+0x218>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d105      	bne.n	8007e3a <HAL_SPI_Init+0x4e>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d901      	bls.n	8007e3a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e0dd      	b.n	8007ff6 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f8ec 	bl	8008018 <SPI_GetPacketSize>
 8007e40:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a6e      	ldr	r2, [pc, #440]	; (8008000 <HAL_SPI_Init+0x214>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d004      	beq.n	8007e56 <HAL_SPI_Init+0x6a>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a6c      	ldr	r2, [pc, #432]	; (8008004 <HAL_SPI_Init+0x218>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d102      	bne.n	8007e5c <HAL_SPI_Init+0x70>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	d816      	bhi.n	8007e8a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e60:	4a69      	ldr	r2, [pc, #420]	; (8008008 <HAL_SPI_Init+0x21c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a68      	ldr	r2, [pc, #416]	; (800800c <HAL_SPI_Init+0x220>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_SPI_Init+0x98>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a66      	ldr	r2, [pc, #408]	; (8008010 <HAL_SPI_Init+0x224>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_SPI_Init+0x98>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a65      	ldr	r2, [pc, #404]	; (8008014 <HAL_SPI_Init+0x228>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d104      	bne.n	8007e8e <HAL_SPI_Init+0xa2>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2b10      	cmp	r3, #16
 8007e88:	d901      	bls.n	8007e8e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e0b3      	b.n	8007ff6 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7f9 fcba 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0201 	bic.w	r2, r2, #1
 8007ebe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007eca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ed4:	d119      	bne.n	8007f0a <HAL_SPI_Init+0x11e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ede:	d103      	bne.n	8007ee8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10c      	bne.n	8007f0a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ef8:	d107      	bne.n	8007f0a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00f      	beq.n	8007f36 <HAL_SPI_Init+0x14a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2b06      	cmp	r3, #6
 8007f1c:	d90b      	bls.n	8007f36 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	601a      	str	r2, [r3, #0]
 8007f34:	e007      	b.n	8007f46 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69da      	ldr	r2, [r3, #28]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	431a      	orrs	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f58:	ea42 0103 	orr.w	r1, r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f70:	431a      	orrs	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	431a      	orrs	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	431a      	orrs	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fac:	431a      	orrs	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fb2:	ea42 0103 	orr.w	r1, r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	46002000 	.word	0x46002000
 8008004:	56002000 	.word	0x56002000
 8008008:	40013000 	.word	0x40013000
 800800c:	50013000 	.word	0x50013000
 8008010:	40003800 	.word	0x40003800
 8008014:	50003800 	.word	0x50003800

08008018 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008018:	b480      	push	{r7}
 800801a:	b085      	sub	sp, #20
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008024:	095b      	lsrs	r3, r3, #5
 8008026:	3301      	adds	r3, #1
 8008028:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	3307      	adds	r3, #7
 8008036:	08db      	lsrs	r3, r3, #3
 8008038:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d12e      	bne.n	80080c2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800806e:	2302      	movs	r3, #2
 8008070:	e028      	b.n	80080c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2202      	movs	r2, #2
 800807e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681a      	ldr	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f022 0201 	bic.w	r2, r2, #1
 8008090:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800809e:	ea42 0103 	orr.w	r1, r2, r3
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e000      	b.n	80080c4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
  }
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e042      	b.n	8008168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7f9 fc21 	bl	800193c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2224      	movs	r2, #36	; 0x24
 80080fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0201 	bic.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f8ca 	bl	80082ac <UART_SetConfig>
 8008118:	4603      	mov	r3, r0
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	e022      	b.n	8008168 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fa60 	bl	80085f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800813e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	689a      	ldr	r2, [r3, #8]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800814e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f042 0201 	orr.w	r2, r2, #1
 800815e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fae7 	bl	8008734 <UART_CheckIdleState>
 8008166:	4603      	mov	r3, r0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b08a      	sub	sp, #40	; 0x28
 8008174:	af02      	add	r7, sp, #8
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008186:	2b20      	cmp	r3, #32
 8008188:	f040 808b 	bne.w	80082a2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <HAL_UART_Transmit+0x28>
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e083      	b.n	80082a4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	d107      	bne.n	80081ba <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2221      	movs	r2, #33	; 0x21
 80081c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ca:	f7f9 fdff 	bl	8001dcc <HAL_GetTick>
 80081ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	88fa      	ldrh	r2, [r7, #6]
 80081d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e8:	d108      	bne.n	80081fc <HAL_UART_Transmit+0x8c>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	691b      	ldr	r3, [r3, #16]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d104      	bne.n	80081fc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	61bb      	str	r3, [r7, #24]
 80081fa:	e003      	b.n	8008204 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008200:	2300      	movs	r3, #0
 8008202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008204:	e030      	b.n	8008268 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	9300      	str	r3, [sp, #0]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2200      	movs	r2, #0
 800820e:	2180      	movs	r1, #128	; 0x80
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	f000 fb39 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d005      	beq.n	8008228 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2220      	movs	r2, #32
 8008220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e03d      	b.n	80082a4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d10b      	bne.n	8008246 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	881b      	ldrh	r3, [r3, #0]
 8008232:	461a      	mov	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800823c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	3302      	adds	r3, #2
 8008242:	61bb      	str	r3, [r7, #24]
 8008244:	e007      	b.n	8008256 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	781a      	ldrb	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	3301      	adds	r3, #1
 8008254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b01      	subs	r3, #1
 8008260:	b29a      	uxth	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800826e:	b29b      	uxth	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1c8      	bne.n	8008206 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	9300      	str	r3, [sp, #0]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	2200      	movs	r2, #0
 800827c:	2140      	movs	r1, #64	; 0x40
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 fb02 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008292:	2303      	movs	r3, #3
 8008294:	e006      	b.n	80082a4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80082b0:	b094      	sub	sp, #80	; 0x50
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80082bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	4b7e      	ldr	r3, [pc, #504]	; (80084bc <UART_SetConfig+0x210>)
 80082c2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
 80082ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	431a      	orrs	r2, r3
 80082d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	4313      	orrs	r3, r2
 80082da:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4977      	ldr	r1, [pc, #476]	; (80084c0 <UART_SetConfig+0x214>)
 80082e4:	4019      	ands	r1, r3
 80082e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082ec:	430b      	orrs	r3, r1
 80082ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	68d9      	ldr	r1, [r3, #12]
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	ea40 0301 	orr.w	r3, r0, r1
 8008306:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800830a:	699b      	ldr	r3, [r3, #24]
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	4b6a      	ldr	r3, [pc, #424]	; (80084bc <UART_SetConfig+0x210>)
 8008314:	429a      	cmp	r2, r3
 8008316:	d009      	beq.n	800832c <UART_SetConfig+0x80>
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b69      	ldr	r3, [pc, #420]	; (80084c4 <UART_SetConfig+0x218>)
 800831e:	429a      	cmp	r2, r3
 8008320:	d004      	beq.n	800832c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008324:	6a1a      	ldr	r2, [r3, #32]
 8008326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008328:	4313      	orrs	r3, r2
 800832a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008336:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800833a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008340:	430b      	orrs	r3, r1
 8008342:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834a:	f023 000f 	bic.w	r0, r3, #15
 800834e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008350:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	ea40 0301 	orr.w	r3, r0, r1
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	4b59      	ldr	r3, [pc, #356]	; (80084c8 <UART_SetConfig+0x21c>)
 8008362:	429a      	cmp	r2, r3
 8008364:	d102      	bne.n	800836c <UART_SetConfig+0xc0>
 8008366:	2301      	movs	r3, #1
 8008368:	64bb      	str	r3, [r7, #72]	; 0x48
 800836a:	e029      	b.n	80083c0 <UART_SetConfig+0x114>
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	4b56      	ldr	r3, [pc, #344]	; (80084cc <UART_SetConfig+0x220>)
 8008372:	429a      	cmp	r2, r3
 8008374:	d102      	bne.n	800837c <UART_SetConfig+0xd0>
 8008376:	2302      	movs	r3, #2
 8008378:	64bb      	str	r3, [r7, #72]	; 0x48
 800837a:	e021      	b.n	80083c0 <UART_SetConfig+0x114>
 800837c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	4b53      	ldr	r3, [pc, #332]	; (80084d0 <UART_SetConfig+0x224>)
 8008382:	429a      	cmp	r2, r3
 8008384:	d102      	bne.n	800838c <UART_SetConfig+0xe0>
 8008386:	2304      	movs	r3, #4
 8008388:	64bb      	str	r3, [r7, #72]	; 0x48
 800838a:	e019      	b.n	80083c0 <UART_SetConfig+0x114>
 800838c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4b50      	ldr	r3, [pc, #320]	; (80084d4 <UART_SetConfig+0x228>)
 8008392:	429a      	cmp	r2, r3
 8008394:	d102      	bne.n	800839c <UART_SetConfig+0xf0>
 8008396:	2308      	movs	r3, #8
 8008398:	64bb      	str	r3, [r7, #72]	; 0x48
 800839a:	e011      	b.n	80083c0 <UART_SetConfig+0x114>
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	4b4d      	ldr	r3, [pc, #308]	; (80084d8 <UART_SetConfig+0x22c>)
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d102      	bne.n	80083ac <UART_SetConfig+0x100>
 80083a6:	2310      	movs	r3, #16
 80083a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083aa:	e009      	b.n	80083c0 <UART_SetConfig+0x114>
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	4b42      	ldr	r3, [pc, #264]	; (80084bc <UART_SetConfig+0x210>)
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d102      	bne.n	80083bc <UART_SetConfig+0x110>
 80083b6:	2320      	movs	r3, #32
 80083b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ba:	e001      	b.n	80083c0 <UART_SetConfig+0x114>
 80083bc:	2300      	movs	r3, #0
 80083be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	4b3d      	ldr	r3, [pc, #244]	; (80084bc <UART_SetConfig+0x210>)
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d005      	beq.n	80083d6 <UART_SetConfig+0x12a>
 80083ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b3d      	ldr	r3, [pc, #244]	; (80084c4 <UART_SetConfig+0x218>)
 80083d0:	429a      	cmp	r2, r3
 80083d2:	f040 8085 	bne.w	80084e0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80083d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083d8:	2200      	movs	r2, #0
 80083da:	623b      	str	r3, [r7, #32]
 80083dc:	627a      	str	r2, [r7, #36]	; 0x24
 80083de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80083e2:	f7fe f9f1 	bl	80067c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80083e6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80083e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80e8 	beq.w	80085c0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f4:	4a39      	ldr	r2, [pc, #228]	; (80084dc <UART_SetConfig+0x230>)
 80083f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083fa:	461a      	mov	r2, r3
 80083fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008402:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	4413      	add	r3, r2
 800840e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008410:	429a      	cmp	r2, r3
 8008412:	d305      	bcc.n	8008420 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800841a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800841c:	429a      	cmp	r2, r3
 800841e:	d903      	bls.n	8008428 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008426:	e048      	b.n	80084ba <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800842a:	2200      	movs	r2, #0
 800842c:	61bb      	str	r3, [r7, #24]
 800842e:	61fa      	str	r2, [r7, #28]
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	4a29      	ldr	r2, [pc, #164]	; (80084dc <UART_SetConfig+0x230>)
 8008436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800843a:	b29b      	uxth	r3, r3
 800843c:	2200      	movs	r2, #0
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	617a      	str	r2, [r7, #20]
 8008442:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008446:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800844a:	f7f7 ff15 	bl	8000278 <__aeabi_uldivmod>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4610      	mov	r0, r2
 8008454:	4619      	mov	r1, r3
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	f04f 0300 	mov.w	r3, #0
 800845e:	020b      	lsls	r3, r1, #8
 8008460:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008464:	0202      	lsls	r2, r0, #8
 8008466:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008468:	6849      	ldr	r1, [r1, #4]
 800846a:	0849      	lsrs	r1, r1, #1
 800846c:	2000      	movs	r0, #0
 800846e:	460c      	mov	r4, r1
 8008470:	4605      	mov	r5, r0
 8008472:	eb12 0804 	adds.w	r8, r2, r4
 8008476:	eb43 0905 	adc.w	r9, r3, r5
 800847a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	60bb      	str	r3, [r7, #8]
 8008482:	60fa      	str	r2, [r7, #12]
 8008484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008488:	4640      	mov	r0, r8
 800848a:	4649      	mov	r1, r9
 800848c:	f7f7 fef4 	bl	8000278 <__aeabi_uldivmod>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4613      	mov	r3, r2
 8008496:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800849e:	d308      	bcc.n	80084b2 <UART_SetConfig+0x206>
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084a6:	d204      	bcs.n	80084b2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80084a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80084ae:	60da      	str	r2, [r3, #12]
 80084b0:	e003      	b.n	80084ba <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80084b8:	e082      	b.n	80085c0 <UART_SetConfig+0x314>
 80084ba:	e081      	b.n	80085c0 <UART_SetConfig+0x314>
 80084bc:	46002400 	.word	0x46002400
 80084c0:	cfff69f3 	.word	0xcfff69f3
 80084c4:	56002400 	.word	0x56002400
 80084c8:	40013800 	.word	0x40013800
 80084cc:	40004400 	.word	0x40004400
 80084d0:	40004800 	.word	0x40004800
 80084d4:	40004c00 	.word	0x40004c00
 80084d8:	40005000 	.word	0x40005000
 80084dc:	080096ac 	.word	0x080096ac
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e8:	d13c      	bne.n	8008564 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80084ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084ec:	2200      	movs	r2, #0
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084f6:	f7fe f967 	bl	80067c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80084fa:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d05e      	beq.n	80085c0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	4a39      	ldr	r2, [pc, #228]	; (80085ec <UART_SetConfig+0x340>)
 8008508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800850c:	461a      	mov	r2, r3
 800850e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008510:	fbb3 f3f2 	udiv	r3, r3, r2
 8008514:	005a      	lsls	r2, r3, #1
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	441a      	add	r2, r3
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	fbb2 f3f3 	udiv	r3, r2, r3
 8008526:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852a:	2b0f      	cmp	r3, #15
 800852c:	d916      	bls.n	800855c <UART_SetConfig+0x2b0>
 800852e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008534:	d212      	bcs.n	800855c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008538:	b29b      	uxth	r3, r3
 800853a:	f023 030f 	bic.w	r3, r3, #15
 800853e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008542:	085b      	lsrs	r3, r3, #1
 8008544:	b29b      	uxth	r3, r3
 8008546:	f003 0307 	and.w	r3, r3, #7
 800854a:	b29a      	uxth	r2, r3
 800854c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800854e:	4313      	orrs	r3, r2
 8008550:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008558:	60da      	str	r2, [r3, #12]
 800855a:	e031      	b.n	80085c0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008562:	e02d      	b.n	80085c0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008566:	2200      	movs	r2, #0
 8008568:	469a      	mov	sl, r3
 800856a:	4693      	mov	fp, r2
 800856c:	4650      	mov	r0, sl
 800856e:	4659      	mov	r1, fp
 8008570:	f7fe f92a 	bl	80067c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008574:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008578:	2b00      	cmp	r3, #0
 800857a:	d021      	beq.n	80085c0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	4a1a      	ldr	r2, [pc, #104]	; (80085ec <UART_SetConfig+0x340>)
 8008582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008586:	461a      	mov	r2, r3
 8008588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800858a:	fbb3 f2f2 	udiv	r2, r3, r2
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	085b      	lsrs	r3, r3, #1
 8008594:	441a      	add	r2, r3
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	fbb2 f3f3 	udiv	r3, r2, r3
 800859e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a2:	2b0f      	cmp	r3, #15
 80085a4:	d909      	bls.n	80085ba <UART_SetConfig+0x30e>
 80085a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ac:	d205      	bcs.n	80085ba <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	60da      	str	r2, [r3, #12]
 80085b8:	e002      	b.n	80085c0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c2:	2201      	movs	r2, #1
 80085c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80085c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ca:	2201      	movs	r2, #1
 80085cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	2200      	movs	r2, #0
 80085d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2200      	movs	r2, #0
 80085da:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80085dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3750      	adds	r7, #80	; 0x50
 80085e4:	46bd      	mov	sp, r7
 80085e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ea:	bf00      	nop
 80085ec:	080096ac 	.word	0x080096ac

080085f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fc:	f003 0301 	and.w	r3, r3, #1
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00a      	beq.n	800861a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	430a      	orrs	r2, r1
 8008618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800861e:	f003 0302 	and.w	r3, r3, #2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00a      	beq.n	800863c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00a      	beq.n	800865e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b00      	cmp	r3, #0
 8008668:	d00a      	beq.n	8008680 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b00      	cmp	r3, #0
 800868a:	d00a      	beq.n	80086a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	430a      	orrs	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01a      	beq.n	8008706 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	430a      	orrs	r2, r1
 80086e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ee:	d10a      	bne.n	8008706 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	605a      	str	r2, [r3, #4]
  }
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b098      	sub	sp, #96	; 0x60
 8008738:	af02      	add	r7, sp, #8
 800873a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008744:	f7f9 fb42 	bl	8001dcc <HAL_GetTick>
 8008748:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0308 	and.w	r3, r3, #8
 8008754:	2b08      	cmp	r3, #8
 8008756:	d12f      	bne.n	80087b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008758:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008760:	2200      	movs	r2, #0
 8008762:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f88e 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 800876c:	4603      	mov	r3, r0
 800876e:	2b00      	cmp	r3, #0
 8008770:	d022      	beq.n	80087b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877a:	e853 3f00 	ldrex	r3, [r3]
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008786:	653b      	str	r3, [r7, #80]	; 0x50
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
 8008792:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008794:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008798:	e841 2300 	strex	r3, r2, [r1]
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800879e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d1e6      	bne.n	8008772 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2220      	movs	r2, #32
 80087a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e063      	b.n	8008880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 0304 	and.w	r3, r3, #4
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d149      	bne.n	800885a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087ca:	9300      	str	r3, [sp, #0]
 80087cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087ce:	2200      	movs	r2, #0
 80087d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f857 	bl	8008888 <UART_WaitOnFlagUntilTimeout>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d03c      	beq.n	800885a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	623b      	str	r3, [r7, #32]
   return(result);
 80087ee:	6a3b      	ldr	r3, [r7, #32]
 80087f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008800:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e6      	bne.n	80087e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	e853 3f00 	ldrex	r3, [r3]
 8008820:	60fb      	str	r3, [r7, #12]
   return(result);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	64bb      	str	r3, [r7, #72]	; 0x48
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008832:	61fa      	str	r2, [r7, #28]
 8008834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	69b9      	ldr	r1, [r7, #24]
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	617b      	str	r3, [r7, #20]
   return(result);
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e5      	bne.n	8008812 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e012      	b.n	8008880 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2220      	movs	r2, #32
 800885e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3758      	adds	r7, #88	; 0x58
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	603b      	str	r3, [r7, #0]
 8008894:	4613      	mov	r3, r2
 8008896:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008898:	e049      	b.n	800892e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a0:	d045      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088a2:	f7f9 fa93 	bl	8001dcc <HAL_GetTick>
 80088a6:	4602      	mov	r2, r0
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	1ad3      	subs	r3, r2, r3
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d302      	bcc.n	80088b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e048      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d031      	beq.n	800892e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	f003 0308 	and.w	r3, r3, #8
 80088d4:	2b08      	cmp	r3, #8
 80088d6:	d110      	bne.n	80088fa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2208      	movs	r2, #8
 80088de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f838 	bl	8008956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2208      	movs	r2, #8
 80088ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e029      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008908:	d111      	bne.n	800892e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f81e 	bl	8008956 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2220      	movs	r2, #32
 800891e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e00f      	b.n	800894e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69da      	ldr	r2, [r3, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	429a      	cmp	r2, r3
 800893c:	bf0c      	ite	eq
 800893e:	2301      	moveq	r3, #1
 8008940:	2300      	movne	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	461a      	mov	r2, r3
 8008946:	79fb      	ldrb	r3, [r7, #7]
 8008948:	429a      	cmp	r2, r3
 800894a:	d0a6      	beq.n	800889a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008956:	b480      	push	{r7}
 8008958:	b095      	sub	sp, #84	; 0x54
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	e853 3f00 	ldrex	r3, [r3]
 800896a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008972:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	461a      	mov	r2, r3
 800897a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897c:	643b      	str	r3, [r7, #64]	; 0x40
 800897e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008982:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008984:	e841 2300 	strex	r3, r2, [r1]
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1e6      	bne.n	800895e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3308      	adds	r3, #8
 8008996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	e853 3f00 	ldrex	r3, [r3]
 800899e:	61fb      	str	r3, [r7, #28]
   return(result);
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e3      	bne.n	8008990 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d118      	bne.n	8008a02 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f023 0310 	bic.w	r3, r3, #16
 80089e4:	647b      	str	r3, [r7, #68]	; 0x44
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6979      	ldr	r1, [r7, #20]
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	613b      	str	r3, [r7, #16]
   return(result);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e6      	bne.n	80089d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2220      	movs	r2, #32
 8008a06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008a16:	bf00      	nop
 8008a18:	3754      	adds	r7, #84	; 0x54
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a20:	4770      	bx	lr

08008a22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008a22:	b480      	push	{r7}
 8008a24:	b085      	sub	sp, #20
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d101      	bne.n	8008a38 <HAL_UARTEx_DisableFifoMode+0x16>
 8008a34:	2302      	movs	r3, #2
 8008a36:	e027      	b.n	8008a88 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2224      	movs	r2, #36	; 0x24
 8008a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0201 	bic.w	r2, r2, #1
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3714      	adds	r7, #20
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d101      	bne.n	8008aac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e02d      	b.n	8008b08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2224      	movs	r2, #36	; 0x24
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0201 	bic.w	r2, r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	683a      	ldr	r2, [r7, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f84f 	bl	8008b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e02d      	b.n	8008b84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2224      	movs	r2, #36	; 0x24
 8008b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f022 0201 	bic.w	r2, r2, #1
 8008b4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	683a      	ldr	r2, [r7, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f811 	bl	8008b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68fa      	ldr	r2, [r7, #12]
 8008b70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2220      	movs	r2, #32
 8008b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d108      	bne.n	8008bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008bac:	e031      	b.n	8008c12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008bae:	2308      	movs	r3, #8
 8008bb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	0e5b      	lsrs	r3, r3, #25
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	0f5b      	lsrs	r3, r3, #29
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bd6:	7bbb      	ldrb	r3, [r7, #14]
 8008bd8:	7b3a      	ldrb	r2, [r7, #12]
 8008bda:	4911      	ldr	r1, [pc, #68]	; (8008c20 <UARTEx_SetNbDataToProcess+0x94>)
 8008bdc:	5c8a      	ldrb	r2, [r1, r2]
 8008bde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008be2:	7b3a      	ldrb	r2, [r7, #12]
 8008be4:	490f      	ldr	r1, [pc, #60]	; (8008c24 <UARTEx_SetNbDataToProcess+0x98>)
 8008be6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
 8008bf6:	7b7a      	ldrb	r2, [r7, #13]
 8008bf8:	4909      	ldr	r1, [pc, #36]	; (8008c20 <UARTEx_SetNbDataToProcess+0x94>)
 8008bfa:	5c8a      	ldrb	r2, [r1, r2]
 8008bfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008c00:	7b7a      	ldrb	r2, [r7, #13]
 8008c02:	4908      	ldr	r1, [pc, #32]	; (8008c24 <UARTEx_SetNbDataToProcess+0x98>)
 8008c04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008c06:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c0a:	b29a      	uxth	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008c12:	bf00      	nop
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	080096c4 	.word	0x080096c4
 8008c24:	080096cc 	.word	0x080096cc

08008c28 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f043 0202 	orr.w	r2, r3, #2
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685a      	ldr	r2, [r3, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	021b      	lsls	r3, r3, #8
 8008c48:	431a      	orrs	r2, r3
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f023 0202 	bic.w	r2, r3, #2
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	601a      	str	r2, [r3, #0]
}
 8008c5a:	bf00      	nop
 8008c5c:	370c      	adds	r7, #12
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr

08008c66 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008c66:	b480      	push	{r7}
 8008c68:	b08b      	sub	sp, #44	; 0x2c
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	60f8      	str	r0, [r7, #12]
 8008c6e:	60b9      	str	r1, [r7, #8]
 8008c70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	fa93 f3a3 	rbit	r3, r3
 8008c80:	613b      	str	r3, [r7, #16]
  return result;
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008c8c:	2320      	movs	r3, #32
 8008c8e:	e003      	b.n	8008c98 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	fab3 f383 	clz	r3, r3
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	2103      	movs	r1, #3
 8008c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca0:	43db      	mvns	r3, r3
 8008ca2:	401a      	ands	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	fa93 f3a3 	rbit	r3, r3
 8008cae:	61fb      	str	r3, [r7, #28]
  return result;
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008cba:	2320      	movs	r3, #32
 8008cbc:	e003      	b.n	8008cc6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	fab3 f383 	clz	r3, r3
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	6879      	ldr	r1, [r7, #4]
 8008cca:	fa01 f303 	lsl.w	r3, r1, r3
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	601a      	str	r2, [r3, #0]
}
 8008cd4:	bf00      	nop
 8008cd6:	372c      	adds	r7, #44	; 0x2c
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	43db      	mvns	r3, r3
 8008cf4:	401a      	ands	r2, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6879      	ldr	r1, [r7, #4]
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	605a      	str	r2, [r3, #4]
}
 8008d04:	bf00      	nop
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b08b      	sub	sp, #44	; 0x2c
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	fa93 f3a3 	rbit	r3, r3
 8008d2a:	613b      	str	r3, [r7, #16]
  return result;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008d36:	2320      	movs	r3, #32
 8008d38:	e003      	b.n	8008d42 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	fab3 f383 	clz	r3, r3
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	2103      	movs	r1, #3
 8008d46:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4a:	43db      	mvns	r3, r3
 8008d4c:	401a      	ands	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	fa93 f3a3 	rbit	r3, r3
 8008d58:	61fb      	str	r3, [r7, #28]
  return result;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d101      	bne.n	8008d68 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008d64:	2320      	movs	r3, #32
 8008d66:	e003      	b.n	8008d70 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	fab3 f383 	clz	r3, r3
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	fa01 f303 	lsl.w	r3, r1, r3
 8008d78:	431a      	orrs	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008d7e:	bf00      	nop
 8008d80:	372c      	adds	r7, #44	; 0x2c
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b08b      	sub	sp, #44	; 0x2c
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	fa93 f3a3 	rbit	r3, r3
 8008da4:	613b      	str	r3, [r7, #16]
  return result;
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008db0:	2320      	movs	r3, #32
 8008db2:	e003      	b.n	8008dbc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	fab3 f383 	clz	r3, r3
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	005b      	lsls	r3, r3, #1
 8008dbe:	2103      	movs	r1, #3
 8008dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	401a      	ands	r2, r3
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dcc:	6a3b      	ldr	r3, [r7, #32]
 8008dce:	fa93 f3a3 	rbit	r3, r3
 8008dd2:	61fb      	str	r3, [r7, #28]
  return result;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d101      	bne.n	8008de2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008dde:	2320      	movs	r3, #32
 8008de0:	e003      	b.n	8008dea <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	fab3 f383 	clz	r3, r3
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	005b      	lsls	r3, r3, #1
 8008dec:	6879      	ldr	r1, [r7, #4]
 8008dee:	fa01 f303 	lsl.w	r3, r1, r3
 8008df2:	431a      	orrs	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	60da      	str	r2, [r3, #12]
}
 8008df8:	bf00      	nop
 8008dfa:	372c      	adds	r7, #44	; 0x2c
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b08b      	sub	sp, #44	; 0x2c
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a1a      	ldr	r2, [r3, #32]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	fa93 f3a3 	rbit	r3, r3
 8008e1e:	613b      	str	r3, [r7, #16]
  return result;
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008e2a:	2320      	movs	r3, #32
 8008e2c:	e003      	b.n	8008e36 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	fab3 f383 	clz	r3, r3
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	210f      	movs	r1, #15
 8008e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3e:	43db      	mvns	r3, r3
 8008e40:	401a      	ands	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	fa93 f3a3 	rbit	r3, r3
 8008e4c:	61fb      	str	r3, [r7, #28]
  return result;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d101      	bne.n	8008e5c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008e58:	2320      	movs	r3, #32
 8008e5a:	e003      	b.n	8008e64 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5e:	fab3 f383 	clz	r3, r3
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	fa01 f303 	lsl.w	r3, r1, r3
 8008e6c:	431a      	orrs	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008e72:	bf00      	nop
 8008e74:	372c      	adds	r7, #44	; 0x2c
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b08b      	sub	sp, #44	; 0x2c
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	0a1b      	lsrs	r3, r3, #8
 8008e92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	fa93 f3a3 	rbit	r3, r3
 8008e9a:	613b      	str	r3, [r7, #16]
  return result;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	e003      	b.n	8008eb2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008eaa:	69bb      	ldr	r3, [r7, #24]
 8008eac:	fab3 f383 	clz	r3, r3
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	210f      	movs	r1, #15
 8008eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eba:	43db      	mvns	r3, r3
 8008ebc:	401a      	ands	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	0a1b      	lsrs	r3, r3, #8
 8008ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	fa93 f3a3 	rbit	r3, r3
 8008eca:	61fb      	str	r3, [r7, #28]
  return result;
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	e003      	b.n	8008ee2 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	fab3 f383 	clz	r3, r3
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008ef0:	bf00      	nop
 8008ef2:	372c      	adds	r7, #44	; 0x2c
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	fa93 f3a3 	rbit	r3, r3
 8008f12:	617b      	str	r3, [r7, #20]
  return result;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8008f18:	69fb      	ldr	r3, [r7, #28]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <LL_GPIO_Init+0x26>
    return 32U;
 8008f1e:	2320      	movs	r3, #32
 8008f20:	e003      	b.n	8008f2a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	fab3 f383 	clz	r3, r3
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008f2c:	e058      	b.n	8008fe0 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	2101      	movs	r1, #1
 8008f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f36:	fa01 f303 	lsl.w	r3, r1, r3
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d04a      	beq.n	8008fda <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d003      	beq.n	8008f54 <LL_GPIO_Init+0x58>
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d10e      	bne.n	8008f72 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6a39      	ldr	r1, [r7, #32]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fed7 	bl	8008d10 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	6819      	ldr	r1, [r3, #0]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f7ff feb7 	bl	8008ce0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	461a      	mov	r2, r3
 8008f78:	6a39      	ldr	r1, [r7, #32]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff05 	bl	8008d8a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	d121      	bne.n	8008fcc <LL_GPIO_Init+0xd0>
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	fa93 f3a3 	rbit	r3, r3
 8008f92:	60bb      	str	r3, [r7, #8]
  return result;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <LL_GPIO_Init+0xa6>
    return 32U;
 8008f9e:	2320      	movs	r3, #32
 8008fa0:	e003      	b.n	8008faa <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	fab3 f383 	clz	r3, r3
 8008fa8:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8008faa:	2b07      	cmp	r3, #7
 8008fac:	d807      	bhi.n	8008fbe <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	6a39      	ldr	r1, [r7, #32]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff ff24 	bl	8008e04 <LL_GPIO_SetAFPin_0_7>
 8008fbc:	e006      	b.n	8008fcc <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	6a39      	ldr	r1, [r7, #32]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f7ff ff59 	bl	8008e7e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6a39      	ldr	r1, [r7, #32]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fe46 	bl	8008c66 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	3301      	adds	r3, #1
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d19f      	bne.n	8008f2e <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	f107 001c 	add.w	r0, r7, #28
 8009006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa68 	bl	80094ec <USB_CoreReset>
 800901c:	4603      	mov	r3, r0
 800901e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009022:	2b00      	cmp	r3, #0
 8009024:	d106      	bne.n	8009034 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800902a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	639a      	str	r2, [r3, #56]	; 0x38
 8009032:	e005      	b.n	8009040 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800904c:	b004      	add	sp, #16
 800904e:	4770      	bx	lr

08009050 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f023 0201 	bic.w	r2, r3, #1
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d115      	bne.n	80090c0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090a0:	2001      	movs	r0, #1
 80090a2:	f7f8 fe9f 	bl	8001de4 <HAL_Delay>
      ms++;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fa0f 	bl	80094d0 <USB_GetMode>
 80090b2:	4603      	mov	r3, r0
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d01e      	beq.n	80090f6 <USB_SetCurrentMode+0x84>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2b31      	cmp	r3, #49	; 0x31
 80090bc:	d9f0      	bls.n	80090a0 <USB_SetCurrentMode+0x2e>
 80090be:	e01a      	b.n	80090f6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d115      	bne.n	80090f2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80090d2:	2001      	movs	r0, #1
 80090d4:	f7f8 fe86 	bl	8001de4 <HAL_Delay>
      ms++;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	3301      	adds	r3, #1
 80090dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 f9f6 	bl	80094d0 <USB_GetMode>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d005      	beq.n	80090f6 <USB_SetCurrentMode+0x84>
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2b31      	cmp	r3, #49	; 0x31
 80090ee:	d9f0      	bls.n	80090d2 <USB_SetCurrentMode+0x60>
 80090f0:	e001      	b.n	80090f6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e005      	b.n	8009102 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2b32      	cmp	r3, #50	; 0x32
 80090fa:	d101      	bne.n	8009100 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e000      	b.n	8009102 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800910c:	b084      	sub	sp, #16
 800910e:	b580      	push	{r7, lr}
 8009110:	b086      	sub	sp, #24
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800911a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800911e:	2300      	movs	r3, #0
 8009120:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009126:	2300      	movs	r3, #0
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	e009      	b.n	8009140 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	3340      	adds	r3, #64	; 0x40
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	3301      	adds	r3, #1
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	2b0e      	cmp	r3, #14
 8009144:	d9f2      	bls.n	800912c <USB_DevInit+0x20>
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009148:	2b00      	cmp	r3, #0
 800914a:	d11c      	bne.n	8009186 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800915a:	f043 0302 	orr.w	r3, r3, #2
 800915e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009164:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e005      	b.n	8009192 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009198:	461a      	mov	r2, r3
 800919a:	2300      	movs	r3, #0
 800919c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800919e:	2103      	movs	r1, #3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f000 f95b 	bl	800945c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80091a6:	2110      	movs	r1, #16
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f8f3 	bl	8009394 <USB_FlushTxFifo>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80091b4:	2301      	movs	r3, #1
 80091b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f91f 	bl	80093fc <USB_FlushRxFifo>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d001      	beq.n	80091c8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ce:	461a      	mov	r2, r3
 80091d0:	2300      	movs	r3, #0
 80091d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091da:	461a      	mov	r2, r3
 80091dc:	2300      	movs	r3, #0
 80091de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e6:	461a      	mov	r2, r3
 80091e8:	2300      	movs	r3, #0
 80091ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091ec:	2300      	movs	r3, #0
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	e043      	b.n	800927a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009208:	d118      	bne.n	800923c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d10a      	bne.n	8009226 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4413      	add	r3, r2
 8009218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921c:	461a      	mov	r2, r3
 800921e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	e013      	b.n	800924e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	015a      	lsls	r2, r3, #5
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4413      	add	r3, r2
 800922e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009232:	461a      	mov	r2, r3
 8009234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009238:	6013      	str	r3, [r2, #0]
 800923a:	e008      	b.n	800924e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	015a      	lsls	r2, r3, #5
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4413      	add	r3, r2
 8009244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009248:	461a      	mov	r2, r3
 800924a:	2300      	movs	r3, #0
 800924c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4413      	add	r3, r2
 8009256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925a:	461a      	mov	r2, r3
 800925c:	2300      	movs	r3, #0
 800925e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	461a      	mov	r2, r3
 800926e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009272:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	3301      	adds	r3, #1
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	693a      	ldr	r2, [r7, #16]
 800927e:	429a      	cmp	r2, r3
 8009280:	d3b7      	bcc.n	80091f2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
 8009286:	e043      	b.n	8009310 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800929a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929e:	d118      	bne.n	80092d2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	015a      	lsls	r2, r3, #5
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	4413      	add	r3, r2
 80092ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b2:	461a      	mov	r2, r3
 80092b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092b8:	6013      	str	r3, [r2, #0]
 80092ba:	e013      	b.n	80092e4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c8:	461a      	mov	r2, r3
 80092ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092ce:	6013      	str	r3, [r2, #0]
 80092d0:	e008      	b.n	80092e4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092de:	461a      	mov	r2, r3
 80092e0:	2300      	movs	r3, #0
 80092e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	461a      	mov	r2, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	015a      	lsls	r2, r3, #5
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	4413      	add	r3, r2
 80092fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009302:	461a      	mov	r2, r3
 8009304:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	3301      	adds	r3, #1
 800930e:	613b      	str	r3, [r7, #16]
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	429a      	cmp	r2, r3
 8009316:	d3b7      	bcc.n	8009288 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009326:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800932a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009338:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800933a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800933c:	2b00      	cmp	r3, #0
 800933e:	d105      	bne.n	800934c <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f043 0210 	orr.w	r2, r3, #16
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699a      	ldr	r2, [r3, #24]
 8009350:	4b0f      	ldr	r3, [pc, #60]	; (8009390 <USB_DevInit+0x284>)
 8009352:	4313      	orrs	r3, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	699b      	ldr	r3, [r3, #24]
 8009362:	f043 0208 	orr.w	r2, r3, #8
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800936a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800936c:	2b01      	cmp	r3, #1
 800936e:	d107      	bne.n	8009380 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009378:	f043 0304 	orr.w	r3, r3, #4
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3718      	adds	r7, #24
 8009386:	46bd      	mov	sp, r7
 8009388:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800938c:	b004      	add	sp, #16
 800938e:	4770      	bx	lr
 8009390:	803c3800 	.word	0x803c3800

08009394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <USB_FlushTxFifo+0x64>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d901      	bls.n	80093b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e01b      	b.n	80093ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	daf2      	bge.n	80093a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	019b      	lsls	r3, r3, #6
 80093c4:	f043 0220 	orr.w	r2, r3, #32
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3301      	adds	r3, #1
 80093d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <USB_FlushTxFifo+0x64>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d901      	bls.n	80093de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093da:	2303      	movs	r3, #3
 80093dc:	e006      	b.n	80093ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	691b      	ldr	r3, [r3, #16]
 80093e2:	f003 0320 	and.w	r3, r3, #32
 80093e6:	2b20      	cmp	r3, #32
 80093e8:	d0f0      	beq.n	80093cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	00030d40 	.word	0x00030d40

080093fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4a11      	ldr	r2, [pc, #68]	; (8009458 <USB_FlushRxFifo+0x5c>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d901      	bls.n	800941a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e018      	b.n	800944c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	daf2      	bge.n	8009408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2210      	movs	r2, #16
 800942a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	4a08      	ldr	r2, [pc, #32]	; (8009458 <USB_FlushRxFifo+0x5c>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d901      	bls.n	800943e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e006      	b.n	800944c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b10      	cmp	r3, #16
 8009448:	d0f0      	beq.n	800942c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr
 8009458:	00030d40 	.word	0x00030d40

0800945c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	460b      	mov	r3, r1
 8009466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	68f9      	ldr	r1, [r7, #12]
 8009478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800947c:	4313      	orrs	r3, r2
 800947e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009480:	2300      	movs	r3, #0
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr

0800948e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800948e:	b480      	push	{r7}
 8009490:	b085      	sub	sp, #20
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094a8:	f023 0303 	bic.w	r3, r3, #3
 80094ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094bc:	f043 0302 	orr.w	r3, r3, #2
 80094c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	695b      	ldr	r3, [r3, #20]
 80094dc:	f003 0301 	and.w	r3, r3, #1
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094f4:	2300      	movs	r3, #0
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	4a13      	ldr	r2, [pc, #76]	; (8009550 <USB_CoreReset+0x64>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d901      	bls.n	800950a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009506:	2303      	movs	r3, #3
 8009508:	e01b      	b.n	8009542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	daf2      	bge.n	80094f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f043 0201 	orr.w	r2, r3, #1
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	3301      	adds	r3, #1
 8009526:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a09      	ldr	r2, [pc, #36]	; (8009550 <USB_CoreReset+0x64>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d901      	bls.n	8009534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e006      	b.n	8009542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	f003 0301 	and.w	r3, r3, #1
 800953c:	2b01      	cmp	r3, #1
 800953e:	d0f0      	beq.n	8009522 <USB_CoreReset+0x36>

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3714      	adds	r7, #20
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	00030d40 	.word	0x00030d40

08009554 <__libc_init_array>:
 8009554:	b570      	push	{r4, r5, r6, lr}
 8009556:	4d0d      	ldr	r5, [pc, #52]	; (800958c <__libc_init_array+0x38>)
 8009558:	2600      	movs	r6, #0
 800955a:	4c0d      	ldr	r4, [pc, #52]	; (8009590 <__libc_init_array+0x3c>)
 800955c:	1b64      	subs	r4, r4, r5
 800955e:	10a4      	asrs	r4, r4, #2
 8009560:	42a6      	cmp	r6, r4
 8009562:	d109      	bne.n	8009578 <__libc_init_array+0x24>
 8009564:	4d0b      	ldr	r5, [pc, #44]	; (8009594 <__libc_init_array+0x40>)
 8009566:	2600      	movs	r6, #0
 8009568:	4c0b      	ldr	r4, [pc, #44]	; (8009598 <__libc_init_array+0x44>)
 800956a:	f000 f81f 	bl	80095ac <_init>
 800956e:	1b64      	subs	r4, r4, r5
 8009570:	10a4      	asrs	r4, r4, #2
 8009572:	42a6      	cmp	r6, r4
 8009574:	d105      	bne.n	8009582 <__libc_init_array+0x2e>
 8009576:	bd70      	pop	{r4, r5, r6, pc}
 8009578:	f855 3b04 	ldr.w	r3, [r5], #4
 800957c:	3601      	adds	r6, #1
 800957e:	4798      	blx	r3
 8009580:	e7ee      	b.n	8009560 <__libc_init_array+0xc>
 8009582:	f855 3b04 	ldr.w	r3, [r5], #4
 8009586:	3601      	adds	r6, #1
 8009588:	4798      	blx	r3
 800958a:	e7f2      	b.n	8009572 <__libc_init_array+0x1e>
 800958c:	080096dc 	.word	0x080096dc
 8009590:	080096dc 	.word	0x080096dc
 8009594:	080096dc 	.word	0x080096dc
 8009598:	080096e0 	.word	0x080096e0

0800959c <memset>:
 800959c:	4402      	add	r2, r0
 800959e:	4603      	mov	r3, r0
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d100      	bne.n	80095a6 <memset+0xa>
 80095a4:	4770      	bx	lr
 80095a6:	f803 1b01 	strb.w	r1, [r3], #1
 80095aa:	e7f9      	b.n	80095a0 <memset+0x4>

080095ac <_init>:
 80095ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ae:	bf00      	nop
 80095b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095b2:	bc08      	pop	{r3}
 80095b4:	469e      	mov	lr, r3
 80095b6:	4770      	bx	lr

080095b8 <_fini>:
 80095b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ba:	bf00      	nop
 80095bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095be:	bc08      	pop	{r3}
 80095c0:	469e      	mov	lr, r3
 80095c2:	4770      	bx	lr
