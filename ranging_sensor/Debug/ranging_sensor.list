
ranging_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e888  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015943  0800eac0  0800eac0  0001eac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08024404  08024404  00034404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802440c  0802440c  0003440c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024410  08024410  00034410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  08024414  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000036b9  200000b0  080244c4  000400b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20003769  080244c4  00043769  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   000276ee  00000000  00000000  000400e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000483e  00000000  00000000  000677d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001d58  00000000  00000000  0006c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001bb0  00000000  00000000  0006dd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a0cb  00000000  00000000  0006f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026fea  00000000  00000000  000a99eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00161565  00000000  00000000  000d09d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00231f3a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008160  00000000  00000000  00231f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200000b0 	.word	0x200000b0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800eaa8 	.word	0x0800eaa8

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200000b4 	.word	0x200000b4
 8000274:	0800eaa8 	.word	0x0800eaa8

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002be:	4604      	mov	r4, r0
 80002c0:	460f      	mov	r7, r1
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0xa0>
 80002c6:	428a      	cmp	r2, r1
 80002c8:	4694      	mov	ip, r2
 80002ca:	d961      	bls.n	8000390 <__udivmoddi4+0xd8>
 80002cc:	fab2 f382 	clz	r3, r2
 80002d0:	b143      	cbz	r3, 80002e4 <__udivmoddi4+0x2c>
 80002d2:	f1c3 0120 	rsb	r1, r3, #32
 80002d6:	409f      	lsls	r7, r3
 80002d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80002dc:	409c      	lsls	r4, r3
 80002de:	fa20 f101 	lsr.w	r1, r0, r1
 80002e2:	430f      	orrs	r7, r1
 80002e4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002e8:	fa1f fe8c 	uxth.w	lr, ip
 80002ec:	0c22      	lsrs	r2, r4, #16
 80002ee:	fbb7 f6f1 	udiv	r6, r7, r1
 80002f2:	fb01 7716 	mls	r7, r1, r6, r7
 80002f6:	fb06 f00e 	mul.w	r0, r6, lr
 80002fa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002fe:	4290      	cmp	r0, r2
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x5c>
 8000302:	eb1c 0202 	adds.w	r2, ip, r2
 8000306:	f106 37ff 	add.w	r7, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x5a>
 800030c:	4290      	cmp	r0, r2
 800030e:	f200 8137 	bhi.w	8000580 <__udivmoddi4+0x2c8>
 8000312:	463e      	mov	r6, r7
 8000314:	1a12      	subs	r2, r2, r0
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb2 f0f1 	udiv	r0, r2, r1
 800031c:	fb01 2210 	mls	r2, r1, r0, r2
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000328:	45a6      	cmp	lr, r4
 800032a:	d908      	bls.n	800033e <__udivmoddi4+0x86>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 32ff 	add.w	r2, r0, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x84>
 8000336:	45a6      	cmp	lr, r4
 8000338:	f200 811c 	bhi.w	8000574 <__udivmoddi4+0x2bc>
 800033c:	4610      	mov	r0, r2
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	2600      	movs	r6, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c5 4300 	strd	r4, r3, [r5]
 8000352:	4631      	mov	r1, r6
 8000354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000358:	428b      	cmp	r3, r1
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0xb8>
 800035c:	2d00      	cmp	r5, #0
 800035e:	f000 80fd 	beq.w	800055c <__udivmoddi4+0x2a4>
 8000362:	2600      	movs	r6, #0
 8000364:	e9c5 0100 	strd	r0, r1, [r5]
 8000368:	4630      	mov	r0, r6
 800036a:	4631      	mov	r1, r6
 800036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000370:	fab3 f683 	clz	r6, r3
 8000374:	2e00      	cmp	r6, #0
 8000376:	d14b      	bne.n	8000410 <__udivmoddi4+0x158>
 8000378:	428b      	cmp	r3, r1
 800037a:	f0c0 80f2 	bcc.w	8000562 <__udivmoddi4+0x2aa>
 800037e:	4282      	cmp	r2, r0
 8000380:	f240 80ef 	bls.w	8000562 <__udivmoddi4+0x2aa>
 8000384:	4630      	mov	r0, r6
 8000386:	2d00      	cmp	r5, #0
 8000388:	d0e3      	beq.n	8000352 <__udivmoddi4+0x9a>
 800038a:	e9c5 4700 	strd	r4, r7, [r5]
 800038e:	e7e0      	b.n	8000352 <__udivmoddi4+0x9a>
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xdc>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 809d 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039e:	1a89      	subs	r1, r1, r2
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	b297      	uxth	r7, r2
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f2fe 	udiv	r2, r1, lr
 80003ae:	fb0e 1112 	mls	r1, lr, r2, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb07 f002 	mul.w	r0, r7, r2
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d90f      	bls.n	80003de <__udivmoddi4+0x126>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f102 38ff 	add.w	r8, r2, #4294967295
 80003c6:	bf2c      	ite	cs
 80003c8:	f04f 0901 	movcs.w	r9, #1
 80003cc:	f04f 0900 	movcc.w	r9, #0
 80003d0:	4288      	cmp	r0, r1
 80003d2:	d903      	bls.n	80003dc <__udivmoddi4+0x124>
 80003d4:	f1b9 0f00 	cmp.w	r9, #0
 80003d8:	f000 80cf 	beq.w	800057a <__udivmoddi4+0x2c2>
 80003dc:	4642      	mov	r2, r8
 80003de:	1a09      	subs	r1, r1, r0
 80003e0:	b2a4      	uxth	r4, r4
 80003e2:	fbb1 f0fe 	udiv	r0, r1, lr
 80003e6:	fb0e 1110 	mls	r1, lr, r0, r1
 80003ea:	fb00 f707 	mul.w	r7, r0, r7
 80003ee:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003f2:	42a7      	cmp	r7, r4
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x150>
 80003f6:	eb1c 0404 	adds.w	r4, ip, r4
 80003fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x14e>
 8000400:	42a7      	cmp	r7, r4
 8000402:	f200 80b4 	bhi.w	800056e <__udivmoddi4+0x2b6>
 8000406:	4608      	mov	r0, r1
 8000408:	1be4      	subs	r4, r4, r7
 800040a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800040e:	e79b      	b.n	8000348 <__udivmoddi4+0x90>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa01 f406 	lsl.w	r4, r1, r6
 800041a:	fa22 fc07 	lsr.w	ip, r2, r7
 800041e:	40f9      	lsrs	r1, r7
 8000420:	40b2      	lsls	r2, r6
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa20 f307 	lsr.w	r3, r0, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	431c      	orrs	r4, r3
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f8f9 	udiv	r8, r1, r9
 800043e:	fb09 1118 	mls	r1, r9, r8, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb08 f00e 	mul.w	r0, r8, lr
 800044a:	4288      	cmp	r0, r1
 800044c:	d90f      	bls.n	800046e <__udivmoddi4+0x1b6>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f108 3aff 	add.w	sl, r8, #4294967295
 8000456:	bf2c      	ite	cs
 8000458:	f04f 0b01 	movcs.w	fp, #1
 800045c:	f04f 0b00 	movcc.w	fp, #0
 8000460:	4288      	cmp	r0, r1
 8000462:	d903      	bls.n	800046c <__udivmoddi4+0x1b4>
 8000464:	f1bb 0f00 	cmp.w	fp, #0
 8000468:	f000 808d 	beq.w	8000586 <__udivmoddi4+0x2ce>
 800046c:	46d0      	mov	r8, sl
 800046e:	1a09      	subs	r1, r1, r0
 8000470:	b2a4      	uxth	r4, r4
 8000472:	fbb1 f0f9 	udiv	r0, r1, r9
 8000476:	fb09 1110 	mls	r1, r9, r0, r1
 800047a:	fb00 fe0e 	mul.w	lr, r0, lr
 800047e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000482:	458e      	cmp	lr, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1de>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d201      	bcs.n	8000494 <__udivmoddi4+0x1dc>
 8000490:	458e      	cmp	lr, r1
 8000492:	d87f      	bhi.n	8000594 <__udivmoddi4+0x2dc>
 8000494:	4620      	mov	r0, r4
 8000496:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	fba0 9802 	umull	r9, r8, r0, r2
 80004a2:	4541      	cmp	r1, r8
 80004a4:	464c      	mov	r4, r9
 80004a6:	46c6      	mov	lr, r8
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0x1f8>
 80004aa:	d106      	bne.n	80004ba <__udivmoddi4+0x202>
 80004ac:	454b      	cmp	r3, r9
 80004ae:	d204      	bcs.n	80004ba <__udivmoddi4+0x202>
 80004b0:	3801      	subs	r0, #1
 80004b2:	ebb9 0402 	subs.w	r4, r9, r2
 80004b6:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004ba:	2d00      	cmp	r5, #0
 80004bc:	d070      	beq.n	80005a0 <__udivmoddi4+0x2e8>
 80004be:	1b1a      	subs	r2, r3, r4
 80004c0:	eb61 010e 	sbc.w	r1, r1, lr
 80004c4:	fa22 f306 	lsr.w	r3, r2, r6
 80004c8:	fa01 f707 	lsl.w	r7, r1, r7
 80004cc:	40f1      	lsrs	r1, r6
 80004ce:	2600      	movs	r6, #0
 80004d0:	431f      	orrs	r7, r3
 80004d2:	e9c5 7100 	strd	r7, r1, [r5]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0020 	rsb	r0, r3, #32
 80004e0:	fa01 f203 	lsl.w	r2, r1, r3
 80004e4:	fa21 f600 	lsr.w	r6, r1, r0
 80004e8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ec:	fa24 f100 	lsr.w	r1, r4, r0
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	409c      	lsls	r4, r3
 80004f6:	4311      	orrs	r1, r2
 80004f8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004fc:	0c0a      	lsrs	r2, r1, #16
 80004fe:	fb0e 6610 	mls	r6, lr, r0, r6
 8000502:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000506:	fb00 f607 	mul.w	r6, r0, r7
 800050a:	4296      	cmp	r6, r2
 800050c:	d90e      	bls.n	800052c <__udivmoddi4+0x274>
 800050e:	eb1c 0202 	adds.w	r2, ip, r2
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	bf2c      	ite	cs
 8000518:	f04f 0901 	movcs.w	r9, #1
 800051c:	f04f 0900 	movcc.w	r9, #0
 8000520:	4296      	cmp	r6, r2
 8000522:	d902      	bls.n	800052a <__udivmoddi4+0x272>
 8000524:	f1b9 0f00 	cmp.w	r9, #0
 8000528:	d031      	beq.n	800058e <__udivmoddi4+0x2d6>
 800052a:	4640      	mov	r0, r8
 800052c:	1b92      	subs	r2, r2, r6
 800052e:	b289      	uxth	r1, r1
 8000530:	fbb2 f6fe 	udiv	r6, r2, lr
 8000534:	fb0e 2216 	mls	r2, lr, r6, r2
 8000538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800053c:	fb06 f207 	mul.w	r2, r6, r7
 8000540:	428a      	cmp	r2, r1
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x29c>
 8000544:	eb1c 0101 	adds.w	r1, ip, r1
 8000548:	f106 38ff 	add.w	r8, r6, #4294967295
 800054c:	d201      	bcs.n	8000552 <__udivmoddi4+0x29a>
 800054e:	428a      	cmp	r2, r1
 8000550:	d823      	bhi.n	800059a <__udivmoddi4+0x2e2>
 8000552:	4646      	mov	r6, r8
 8000554:	1a89      	subs	r1, r1, r2
 8000556:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800055a:	e725      	b.n	80003a8 <__udivmoddi4+0xf0>
 800055c:	462e      	mov	r6, r5
 800055e:	4628      	mov	r0, r5
 8000560:	e6f7      	b.n	8000352 <__udivmoddi4+0x9a>
 8000562:	1a84      	subs	r4, r0, r2
 8000564:	eb61 0303 	sbc.w	r3, r1, r3
 8000568:	2001      	movs	r0, #1
 800056a:	461f      	mov	r7, r3
 800056c:	e70b      	b.n	8000386 <__udivmoddi4+0xce>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e749      	b.n	8000408 <__udivmoddi4+0x150>
 8000574:	4464      	add	r4, ip
 8000576:	3802      	subs	r0, #2
 8000578:	e6e1      	b.n	800033e <__udivmoddi4+0x86>
 800057a:	3a02      	subs	r2, #2
 800057c:	4461      	add	r1, ip
 800057e:	e72e      	b.n	80003de <__udivmoddi4+0x126>
 8000580:	3e02      	subs	r6, #2
 8000582:	4462      	add	r2, ip
 8000584:	e6c6      	b.n	8000314 <__udivmoddi4+0x5c>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	e76f      	b.n	800046e <__udivmoddi4+0x1b6>
 800058e:	3802      	subs	r0, #2
 8000590:	4462      	add	r2, ip
 8000592:	e7cb      	b.n	800052c <__udivmoddi4+0x274>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	e77d      	b.n	8000496 <__udivmoddi4+0x1de>
 800059a:	3e02      	subs	r6, #2
 800059c:	4461      	add	r1, ip
 800059e:	e7d9      	b.n	8000554 <__udivmoddi4+0x29c>
 80005a0:	462e      	mov	r6, r5
 80005a2:	e6d6      	b.n	8000352 <__udivmoddi4+0x9a>

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4313      	orrs	r3, r2
 80005bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <LL_AHB2_GRP1_EnableClock+0x34>)
 80005c2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005cc:	68fb      	ldr	r3, [r7, #12]
}
 80005ce:	bf00      	nop
 80005d0:	3714      	adds	r7, #20
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	46020c00 	.word	0x46020c00

080005e0 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1 (*)
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ee:	4909      	ldr	r1, [pc, #36]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <LL_APB1_GRP2_EnableClock+0x34>)
 80005fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000604:	68fb      	ldr	r3, [r7, #12]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	46020c00 	.word	0x46020c00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f005 fb30 	bl	8005c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f918 	bl	8000858 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000628:	f000 f975 	bl	8000916 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 fd24 	bl	8001078 <MX_GPIO_Init>
  MX_ADF1_Init();
 8000630:	f000 f9e4 	bl	80009fc <MX_ADF1_Init>
  MX_I2C1_Init();
 8000634:	f000 fa2e 	bl	8000a94 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000638:	f000 fa6c 	bl	8000b14 <MX_I2C2_Init>
  MX_ICACHE_Init();
 800063c:	f000 faaa 	bl	8000b94 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 8000640:	f000 fabc 	bl	8000bbc <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000644:	f000 fb34 	bl	8000cb0 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8000648:	f000 fbae 	bl	8000da8 <MX_SPI2_Init>
  MX_UART4_Init();
 800064c:	f000 fc1a 	bl	8000e84 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000650:	f000 fc64 	bl	8000f1c <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8000654:	f000 fcae 	bl	8000fb4 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000658:	f000 fce2 	bl	8001020 <MX_USB_OTG_FS_PCD_Init>
  Ranging_sensor_Init();
 800065c:	f000 f96a 	bl	8000934 <Ranging_sensor_Init>
  /* USER CODE BEGIN 2 */
  RANGING_SENSOR_Result_t   DISTANCE;
  int32_t RESULT;
  HAL_GPIO_WritePin(LED_PORT [LED7], (uint16_t)LED_PIN [LED7], GPIO_PIN_SET);
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <main+0xe4>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	2280      	movs	r2, #128	; 0x80
 8000666:	b291      	uxth	r1, r2
 8000668:	2201      	movs	r2, #1
 800066a:	4618      	mov	r0, r3
 800066c:	f005 ffe0 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_PORT [LED6], (uint16_t)LED_PIN [LED6], GPIO_PIN_SET);
 8000670:	4b22      	ldr	r3, [pc, #136]	; (80006fc <main+0xe4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2240      	movs	r2, #64	; 0x40
 8000676:	b291      	uxth	r1, r2
 8000678:	2201      	movs	r2, #1
 800067a:	4618      	mov	r0, r3
 800067c:	f005 ffd8 	bl	8006630 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RESULT = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c


	  HAL_Delay(1000);
 8000686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068a:	f005 fb7f 	bl	8005d8c <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_PORT[LED7], (uint16_t)LED_PIN[LED7]);
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <main+0xe4>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	b292      	uxth	r2, r2
 8000696:	4611      	mov	r1, r2
 8000698:	4618      	mov	r0, r3
 800069a:	f005 ffe1 	bl	8006660 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a2:	f005 fb73 	bl	8005d8c <HAL_Delay>
	  char *message = "START!\r\n";
 80006a6:	4b16      	ldr	r3, [pc, #88]	; (8000700 <main+0xe8>)
 80006a8:	f8c7 3508 	str.w	r3, [r7, #1288]	; 0x508
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80006ac:	f8d7 0508 	ldr.w	r0, [r7, #1288]	; 0x508
 80006b0:	f7ff fde2 	bl	8000278 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f04f 33ff 	mov.w	r3, #4294967295
 80006bc:	f8d7 1508 	ldr.w	r1, [r7, #1288]	; 0x508
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <main+0xec>)
 80006c2:	f00c fb4f 	bl	800cd64 <HAL_UART_Transmit>
	  //HAL_Delay(1000);
	  //RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER);
	  RESULT = raning_sensor_get_distance(&DISTANCE);
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f981 	bl	80009d0 <raning_sensor_get_distance>
 80006ce:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  if(RESULT != 0) HAL_GPIO_TogglePin(LED_PORT[LED6], (uint16_t)LED_PIN[LED6]);
 80006d2:	f8d7 350c 	ldr.w	r3, [r7, #1292]	; 0x50c
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d007      	beq.n	80006ea <main+0xd2>
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <main+0xe4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2240      	movs	r2, #64	; 0x40
 80006e0:	b292      	uxth	r2, r2
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f005 ffbb 	bl	8006660 <HAL_GPIO_TogglePin>
	  HAL_Delay(POLLING_PERIOD);
 80006ea:	20fa      	movs	r0, #250	; 0xfa
 80006ec:	f005 fb4e 	bl	8005d8c <HAL_Delay>
	  ranging_uart(&DISTANCE);
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	4618      	mov	r0, r3
 80006f4:	f000 f808 	bl	8000708 <ranging_uart>
  {
 80006f8:	e7c2      	b.n	8000680 <main+0x68>
 80006fa:	bf00      	nop
 80006fc:	20000000 	.word	0x20000000
 8000700:	0800eac0 	.word	0x0800eac0
 8000704:	20000410 	.word	0x20000410

08000708 <ranging_uart>:
  }

}

static void ranging_uart(RANGING_SENSOR_Result_t *Result)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b090      	sub	sp, #64	; 0x40
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  char *error_message = "None\r\n";
 8000710:	4b4e      	ldr	r3, [pc, #312]	; (800084c <ranging_uart+0x144>)
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t distance;
  uint32_t status;
  char distance_str[20];
  char status_str[20];

  for (int8_t j = 0; j < Result->NumberOfZones; j += 8)
 8000714:	2300      	movs	r3, #0
 8000716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800071a:	e08a      	b.n	8000832 <ranging_uart+0x12a>
  {

	for (int8_t l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800071c:	2300      	movs	r3, #0
 800071e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8000722:	e07b      	b.n	800081c <ranging_uart+0x114>
	{
	  /* Print distance and status */
	  for (int8_t k = (8 - 1); k >= 0; k--)
 8000724:	2307      	movs	r3, #7
 8000726:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800072a:	e06c      	b.n	8000806 <ranging_uart+0xfe>
	  {
		if (Result->ZoneResult[j+k].NumberOfTargets > 0)
 800072c:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8000730:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000734:	441a      	add	r2, r3
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	4613      	mov	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	4413      	add	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	440b      	add	r3, r1
 8000742:	3304      	adds	r3, #4
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d04b      	beq.n	80007e2 <ranging_uart+0xda>
		{
			distance = Result->ZoneResult[j+k].Distance[l];
 800074a:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 800074e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000752:	441a      	add	r2, r3
 8000754:	f997 003e 	ldrsb.w	r0, [r7, #62]	; 0x3e
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	4403      	add	r3, r0
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	440b      	add	r3, r1
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
		    status = Result->ZoneResult[j+k].Status[l];
 800076a:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 800076e:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000772:	441a      	add	r2, r3
 8000774:	f997 003e 	ldrsb.w	r0, [r7, #62]	; 0x3e
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	4403      	add	r3, r0
 8000782:	3302      	adds	r3, #2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	440b      	add	r3, r1
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
	        sprintf(distance_str, "%lu\r\n", distance);
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000792:	492f      	ldr	r1, [pc, #188]	; (8000850 <ranging_uart+0x148>)
 8000794:	4618      	mov	r0, r3
 8000796:	f00d fd17 	bl	800e1c8 <siprintf>
	        sprintf(status_str, "%lu\r\n", status);
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80007a0:	492b      	ldr	r1, [pc, #172]	; (8000850 <ranging_uart+0x148>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00d fd10 	bl	800e1c8 <siprintf>
	        HAL_UART_Transmit(&huart1, (uint8_t*)distance_str, strlen(distance_str), HAL_MAX_DELAY);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd63 	bl	8000278 <strlen>
 80007b2:	4603      	mov	r3, r0
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	f107 011c 	add.w	r1, r7, #28
 80007ba:	f04f 33ff 	mov.w	r3, #4294967295
 80007be:	4825      	ldr	r0, [pc, #148]	; (8000854 <ranging_uart+0x14c>)
 80007c0:	f00c fad0 	bl	800cd64 <HAL_UART_Transmit>
	        HAL_UART_Transmit(&huart1, (uint8_t*)status_str, strlen(status_str), HAL_MAX_DELAY);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fd55 	bl	8000278 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	b29a      	uxth	r2, r3
 80007d2:	f107 0108 	add.w	r1, r7, #8
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	481e      	ldr	r0, [pc, #120]	; (8000854 <ranging_uart+0x14c>)
 80007dc:	f00c fac2 	bl	800cd64 <HAL_UART_Transmit>
 80007e0:	e00a      	b.n	80007f8 <ranging_uart+0xf0>
		    //HAL_UART_Transmit(&huart1, (uint8_t*)message, 20, HAL_MAX_DELAY);
	    }
		else
			HAL_UART_Transmit(&huart1, (uint8_t*)error_message, strlen(error_message), HAL_MAX_DELAY);
 80007e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80007e4:	f7ff fd48 	bl	8000278 <strlen>
 80007e8:	4603      	mov	r3, r0
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	f04f 33ff 	mov.w	r3, #4294967295
 80007f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <ranging_uart+0x14c>)
 80007f4:	f00c fab6 	bl	800cd64 <HAL_UART_Transmit>
	  for (int8_t k = (8 - 1); k >= 0; k--)
 80007f8:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	3b01      	subs	r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8000806:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 800080a:	2b00      	cmp	r3, #0
 800080c:	da8e      	bge.n	800072c <ranging_uart+0x24>
	for (int8_t l = 0; l < RANGING_SENSOR_NB_TARGET_PER_ZONE; l++)
 800080e:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800081c:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 8000820:	2b00      	cmp	r3, #0
 8000822:	f43f af7f 	beq.w	8000724 <ranging_uart+0x1c>
  for (int8_t j = 0; j < Result->NumberOfZones; j += 8)
 8000826:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800082a:	3308      	adds	r3, #8
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000832:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	429a      	cmp	r2, r3
 800083c:	f4ff af6e 	bcc.w	800071c <ranging_uart+0x14>
	  }
	}
  }
}
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	3740      	adds	r7, #64	; 0x40
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	0800eacc 	.word	0x0800eacc
 8000850:	0800ead4 	.word	0x0800ead4
 8000854:	20000410 	.word	0x20000410

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b09e      	sub	sp, #120	; 0x78
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0318 	add.w	r3, r7, #24
 8000862:	2260      	movs	r2, #96	; 0x60
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f00d fca5 	bl	800e1b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	463b      	mov	r3, r7
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
 800087a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800087c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000880:	f007 fff6 	bl	8008870 <HAL_PWREx_ControlVoltageScaling>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800088a:	f000 fd57 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800088e:	2330      	movs	r3, #48	; 0x30
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000896:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000898:	2301      	movs	r3, #1
 800089a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800089c:	2310      	movs	r3, #16
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80008a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008aa:	2301      	movs	r3, #1
 80008ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80008b6:	2350      	movs	r3, #80	; 0x50
 80008b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	4618      	mov	r0, r3
 80008d4:	f008 f8c8 	bl	8008a68 <HAL_RCC_OscConfig>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008de:	f000 fd2d 	bl	800133c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e2:	231f      	movs	r3, #31
 80008e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e6:	2303      	movs	r3, #3
 80008e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008fa:	463b      	mov	r3, r7
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f008 ff8e 	bl	8009820 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800090a:	f000 fd17 	bl	800133c <Error_Handler>
  }
}
 800090e:	bf00      	nop
 8000910:	3778      	adds	r7, #120	; 0x78
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800091a:	f008 f895 	bl	8008a48 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800091e:	2002      	movs	r0, #2
 8000920:	f008 f832 	bl	8008988 <HAL_PWREx_ConfigSupply>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemPower_Config+0x18>
  {
    Error_Handler();
 800092a:	f000 fd07 	bl	800133c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <Ranging_sensor_Init>:
  * @param None
  * @retval None
  */

static void Ranging_sensor_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  int32_t                   result  = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
  uint32_t                  chipId;

  if (BSP_RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER) != BSP_ERROR_NONE) result--;
 800093e:	2001      	movs	r0, #1
 8000940:	f001 ffce 	bl	80028e0 <BSP_RANGING_SENSOR_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <Ranging_sensor_Init+0x1c>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3b01      	subs	r3, #1
 800094e:	607b      	str	r3, [r7, #4]
  if (BSP_RANGING_SENSOR_ReadID(VL53L5A1_DEV_CENTER, &chipId) != BSP_ERROR_NONE) result--;
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	2001      	movs	r0, #1
 8000956:	f001 ffd9 	bl	800290c <BSP_RANGING_SENSOR_ReadID>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d002      	beq.n	8000966 <Ranging_sensor_Init+0x32>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	607b      	str	r3, [r7, #4]
  if (BSP_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap) != BSP_ERROR_NONE) result--;
 8000966:	4918      	ldr	r1, [pc, #96]	; (80009c8 <Ranging_sensor_Init+0x94>)
 8000968:	2001      	movs	r0, #1
 800096a:	f001 fff7 	bl	800295c <BSP_RANGING_SENSOR_GetCapabilities>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d002      	beq.n	800097a <Ranging_sensor_Init+0x46>
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	607b      	str	r3, [r7, #4]

  Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <Ranging_sensor_Init+0x98>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = 30; /* 5 ms < TimingBudget < 100 ms */
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <Ranging_sensor_Init+0x98>)
 8000982:	221e      	movs	r2, #30
 8000984:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 5; /* Hz */
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <Ranging_sensor_Init+0x98>)
 8000988:	2205      	movs	r2, #5
 800098a:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 0; /* Enable: 1, Disable: 0 */
 800098c:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <Ranging_sensor_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 0; /* Enable: 1, Disable: 0 */
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <Ranging_sensor_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  if (BSP_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile) != BSP_ERROR_NONE) result--;
 8000998:	490c      	ldr	r1, [pc, #48]	; (80009cc <Ranging_sensor_Init+0x98>)
 800099a:	2001      	movs	r0, #1
 800099c:	f002 f806 	bl	80029ac <BSP_RANGING_SENSOR_ConfigProfile>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d002      	beq.n	80009ac <Ranging_sensor_Init+0x78>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3b01      	subs	r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
  if (BSP_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS) != BSP_ERROR_NONE)  result--;
 80009ac:	2101      	movs	r1, #1
 80009ae:	2001      	movs	r0, #1
 80009b0:	f002 f84c 	bl	8002a4c <BSP_RANGING_SENSOR_Start>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d002      	beq.n	80009c0 <Ranging_sensor_Init+0x8c>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	3b01      	subs	r3, #1
 80009be:	607b      	str	r3, [r7, #4]

}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200009b0 	.word	0x200009b0
 80009cc:	200009c0 	.word	0x200009c0

080009d0 <raning_sensor_get_distance>:

static int32_t raning_sensor_get_distance(RANGING_SENSOR_Result_t *distance)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  int32_t result  = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	60fb      	str	r3, [r7, #12]
  if (BSP_RANGING_SENSOR_GetDistance(VL53L5A1_DEV_CENTER, distance) != BSP_ERROR_NONE) result--;
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	2001      	movs	r0, #1
 80009e0:	f002 f80c 	bl	80029fc <BSP_RANGING_SENSOR_GetDistance>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <raning_sensor_get_distance+0x20>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
  return result;
 80009f0:	68fb      	ldr	r3, [r7, #12]
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_ADF1_Init>:

static void MX_ADF1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a02:	4a22      	ldr	r2, [pc, #136]	; (8000a8c <MX_ADF1_Init+0x90>)
 8000a04:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8000a20:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000a2c:	4816      	ldr	r0, [pc, #88]	; (8000a88 <MX_ADF1_Init+0x8c>)
 8000a2e:	f006 fcb7 	bl	80073a0 <HAL_MDF_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 8000a38:	f000 fc80 	bl	800133c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a50:	2202      	movs	r2, #2
 8000a52:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <MX_ADF1_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	46024080 	.word	0x46024080
 8000a90:	20000110 	.word	0x20000110

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad0:	f005 fde0 	bl	8006694 <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fc2f 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae2:	f006 fb95 	bl	8007210 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fc26 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af4:	f006 fbd7 	bl	80072a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fc1d 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000018c 	.word	0x2000018c
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	30909dec 	.word	0x30909dec

08000b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b1a:	4a1c      	ldr	r2, [pc, #112]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 8000b1e:	4b1a      	ldr	r3, [pc, #104]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b20:	4a1b      	ldr	r2, [pc, #108]	; (8000b90 <MX_I2C2_Init+0x7c>)
 8000b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b4e:	480e      	ldr	r0, [pc, #56]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b50:	f005 fda0 	bl	8006694 <HAL_I2C_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b5a:	f000 fbef 	bl	800133c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b62:	f006 fb55 	bl	8007210 <HAL_I2CEx_ConfigAnalogFilter>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b6c:	f000 fbe6 	bl	800133c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b70:	2100      	movs	r1, #0
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_I2C2_Init+0x74>)
 8000b74:	f006 fb97 	bl	80072a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fbdd 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001e0 	.word	0x200001e0
 8000b8c:	40005800 	.word	0x40005800
 8000b90:	30909dec 	.word	0x30909dec

08000b94 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f006 fbd1 	bl	8007340 <HAL_ICACHE_ConfigAssociativityMode>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000ba4:	f000 fbca 	bl	800133c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000ba8:	f006 fbea 	bl	8007380 <HAL_ICACHE_Enable>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000bb2:	f000 fbc3 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000bdc:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000bde:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <MX_OCTOSPI1_Init+0xec>)
 8000be0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000bf4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000bf8:	2217      	movs	r2, #23
 8000bfa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c0e:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000c14:	4b23      	ldr	r3, [pc, #140]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c3c:	2264      	movs	r2, #100	; 0x64
 8000c3e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000c40:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c42:	f006 fd59 	bl	80076f8 <HAL_OSPI_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8000c4c:	f000 fb76 	bl	800133c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000c5c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000c60:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000c62:	4b12      	ldr	r3, [pc, #72]	; (8000cac <MX_OCTOSPI1_Init+0xf0>)
 8000c64:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c72:	f006 fe81 	bl	8007978 <HAL_OSPIM_Config>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000c7c:	f000 fb5e 	bl	800133c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_OCTOSPI1_Init+0xe8>)
 8000c8e:	f007 fc5f 	bl	8008550 <HAL_OSPI_DLYB_SetConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000c98:	f000 fb50 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3720      	adds	r7, #32
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000234 	.word	0x20000234
 8000ca8:	420d1400 	.word	0x420d1400
 8000cac:	01000001 	.word	0x01000001

08000cb0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]
 8000cc6:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000cc8:	463b      	mov	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cd2:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <MX_OCTOSPI2_Init+0xec>)
 8000cd4:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cd8:	2204      	movs	r2, #4
 8000cda:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000ce4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ce8:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cec:	221a      	movs	r2, #26
 8000cee:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000cf6:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000d14:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000d28:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000d2e:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000d34:	4818      	ldr	r0, [pc, #96]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d36:	f006 fcdf 	bl	80076f8 <HAL_OSPI_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000d40:	f000 fafc 	bl	800133c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000d44:	2302      	movs	r3, #2
 8000d46:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <MX_OCTOSPI2_Init+0xf0>)
 8000d52:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_OCTOSPI2_Init+0xf4>)
 8000d56:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d58:	f107 0308 	add.w	r3, r7, #8
 8000d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d60:	4619      	mov	r1, r3
 8000d62:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d64:	f006 fe08 	bl	8007978 <HAL_OSPIM_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000d6e:	f000 fae5 	bl	800133c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000d7a:	463b      	mov	r3, r7
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4806      	ldr	r0, [pc, #24]	; (8000d98 <MX_OCTOSPI2_Init+0xe8>)
 8000d80:	f007 fbe6 	bl	8008550 <HAL_OSPI_DLYB_SetConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000d8a:	f000 fad7 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	3720      	adds	r7, #32
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000290 	.word	0x20000290
 8000d9c:	420d2400 	.word	0x420d2400
 8000da0:	00010002 	.word	0x00010002
 8000da4:	01000002 	.word	0x01000002

08000da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000db8:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dba:	4a31      	ldr	r2, [pc, #196]	; (8000e80 <MX_SPI2_Init+0xd8>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000dbe:	4b2f      	ldr	r3, [pc, #188]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000dc6:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dcc:	4b2b      	ldr	r3, [pc, #172]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dce:	2203      	movs	r2, #3
 8000dd0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dd2:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dde:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000de0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000de4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dec:	4b23      	ldr	r3, [pc, #140]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000df8:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e00:	2207      	movs	r2, #7
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e44:	f00b fdcc 	bl	800c9e0 <HAL_SPI_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000e4e:	f000 fa75 	bl	800133c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000e56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e5a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	4619      	mov	r1, r3
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_SPI2_Init+0xd4>)
 8000e66:	f00b feec 	bl	800cc42 <HAL_SPIEx_SetConfigAutonomousMode>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000e70:	f000 fa64 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	200002ec 	.word	0x200002ec
 8000e80:	40003800 	.word	0x40003800

08000e84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_UART4_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MX_UART4_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_UART4_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_UART4_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_UART4_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_UART4_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_UART4_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_UART4_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ece:	f00b fef9 	bl	800ccc4 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 fa30 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ee0:	f00c fbd2 	bl	800d688 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 fa27 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_UART4_Init+0x90>)
 8000ef2:	f00c fc07 	bl	800d704 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 fa1e 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_UART4_Init+0x90>)
 8000f02:	f00c fb88 	bl	800d616 <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 fa16 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000037c 	.word	0x2000037c
 8000f18:	40004c00 	.word	0x40004c00

08000f1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	; (8000fb0 <MX_USART1_UART_Init+0x94>)
 8000f24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f42:	220c      	movs	r2, #12
 8000f44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f64:	4811      	ldr	r0, [pc, #68]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f66:	f00b fead 	bl	800ccc4 <HAL_UART_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 f9e4 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f78:	f00c fb86 	bl	800d688 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f82:	f000 f9db 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f8a:	f00c fbbb 	bl	800d704 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f94:	f000 f9d2 	bl	800133c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <MX_USART1_UART_Init+0x90>)
 8000f9a:	f00c fb3c 	bl	800d616 <HAL_UARTEx_DisableFifoMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000fa4:	f000 f9ca 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000410 	.word	0x20000410
 8000fb0:	40013800 	.word	0x40013800

08000fb4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	463b      	mov	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000fca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000fce:	f7ff fb07 	bl	80005e0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fae8 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f7ff fae5 	bl	80005a8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fe2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4809      	ldr	r0, [pc, #36]	; (8001018 <MX_UCPD1_Init+0x64>)
 8000ff2:	f00c fd7d 	bl	800daf0 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ffa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001000:	2300      	movs	r3, #0
 8001002:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	463b      	mov	r3, r7
 8001006:	4619      	mov	r1, r3
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_UCPD1_Init+0x68>)
 800100a:	f00c fd71 	bl	800daf0 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	42020000 	.word	0x42020000
 800101c:	42020400 	.word	0x42020400

08001020 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001026:	4a13      	ldr	r2, [pc, #76]	; (8001074 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001028:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800102c:	2206      	movs	r2, #6
 800102e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001032:	2202      	movs	r2, #2
 8001034:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001038:	2200      	movs	r2, #0
 800103a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800104a:	2200      	movs	r2, #0
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001056:	2200      	movs	r2, #0
 8001058:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800105c:	f007 fac0 	bl	80085e0 <HAL_PCD_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 f969 	bl	800133c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200004a4 	.word	0x200004a4
 8001074:	42040000 	.word	0x42040000

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08e      	sub	sp, #56	; 0x38
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800108e:	4ba3      	ldr	r3, [pc, #652]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001094:	4aa1      	ldr	r2, [pc, #644]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800109e:	4b9f      	ldr	r3, [pc, #636]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a8:	623b      	str	r3, [r7, #32]
 80010aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ac:	4b9b      	ldr	r3, [pc, #620]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b2:	4a9a      	ldr	r2, [pc, #616]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010bc:	4b97      	ldr	r3, [pc, #604]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b94      	ldr	r3, [pc, #592]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010d0:	4a92      	ldr	r2, [pc, #584]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010da:	4b90      	ldr	r3, [pc, #576]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010e0:	f003 0301 	and.w	r3, r3, #1
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80010e8:	4b8c      	ldr	r3, [pc, #560]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ee:	4a8b      	ldr	r2, [pc, #556]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010f8:	4b88      	ldr	r3, [pc, #544]	; (800131c <MX_GPIO_Init+0x2a4>)
 80010fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001106:	4b85      	ldr	r3, [pc, #532]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800110c:	4a83      	ldr	r2, [pc, #524]	; (800131c <MX_GPIO_Init+0x2a4>)
 800110e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001112:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001116:	4b81      	ldr	r3, [pc, #516]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001118:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800111c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001124:	4b7d      	ldr	r3, [pc, #500]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800112a:	4a7c      	ldr	r2, [pc, #496]	; (800131c <MX_GPIO_Init+0x2a4>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001134:	4b79      	ldr	r3, [pc, #484]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001136:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001142:	4b76      	ldr	r3, [pc, #472]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001148:	4a74      	ldr	r2, [pc, #464]	; (800131c <MX_GPIO_Init+0x2a4>)
 800114a:	f043 0308 	orr.w	r3, r3, #8
 800114e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001152:	4b72      	ldr	r3, [pc, #456]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001158:	f003 0308 	and.w	r3, r3, #8
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001160:	4b6e      	ldr	r3, [pc, #440]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001166:	4a6d      	ldr	r2, [pc, #436]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001170:	4b6a      	ldr	r3, [pc, #424]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117e:	4b67      	ldr	r3, [pc, #412]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001184:	4a65      	ldr	r2, [pc, #404]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001186:	f043 0320 	orr.w	r3, r3, #32
 800118a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800118e:	4b63      	ldr	r3, [pc, #396]	; (800131c <MX_GPIO_Init+0x2a4>)
 8001190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2120      	movs	r1, #32
 80011a0:	485f      	ldr	r0, [pc, #380]	; (8001320 <MX_GPIO_Init+0x2a8>)
 80011a2:	f005 fa45 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	21c2      	movs	r1, #194	; 0xc2
 80011aa:	485e      	ldr	r0, [pc, #376]	; (8001324 <MX_GPIO_Init+0x2ac>)
 80011ac:	f005 fa40 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2140      	movs	r1, #64	; 0x40
 80011b4:	485c      	ldr	r0, [pc, #368]	; (8001328 <MX_GPIO_Init+0x2b0>)
 80011b6:	f005 fa3b 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 80011c0:	485a      	ldr	r0, [pc, #360]	; (800132c <MX_GPIO_Init+0x2b4>)
 80011c2:	f005 fa35 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 80011c6:	f248 0324 	movw	r3, #32804	; 0x8024
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d8:	4619      	mov	r1, r3
 80011da:	4853      	ldr	r0, [pc, #332]	; (8001328 <MX_GPIO_Init+0x2b0>)
 80011dc:	f004 ff5a 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 80011e0:	2308      	movs	r3, #8
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	484c      	ldr	r0, [pc, #304]	; (8001324 <MX_GPIO_Init+0x2ac>)
 80011f4:	f004 ff4e 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 80011f8:	2320      	movs	r3, #32
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4844      	ldr	r0, [pc, #272]	; (8001320 <MX_GPIO_Init+0x2a8>)
 8001210:	f004 ff40 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4841      	ldr	r0, [pc, #260]	; (8001330 <MX_GPIO_Init+0x2b8>)
 800122a:	f004 ff33 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 800122e:	23c2      	movs	r3, #194	; 0xc2
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4837      	ldr	r0, [pc, #220]	; (8001324 <MX_GPIO_Init+0x2ac>)
 8001246:	f004 ff25 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 800124a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 800125c:	2306      	movs	r3, #6
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	4831      	ldr	r0, [pc, #196]	; (800132c <MX_GPIO_Init+0x2b4>)
 8001268:	f004 ff14 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 800126c:	2340      	movs	r3, #64	; 0x40
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001280:	4619      	mov	r1, r3
 8001282:	4829      	ldr	r0, [pc, #164]	; (8001328 <MX_GPIO_Init+0x2b0>)
 8001284:	f004 ff06 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin;
 8001288:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	4825      	ldr	r0, [pc, #148]	; (8001334 <MX_GPIO_Init+0x2bc>)
 800129e:	f004 fef9 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 80012a2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	4820      	ldr	r0, [pc, #128]	; (8001338 <MX_GPIO_Init+0x2c0>)
 80012b8:	f004 feec 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 80012bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	4619      	mov	r1, r3
 80012d0:	4816      	ldr	r0, [pc, #88]	; (800132c <MX_GPIO_Init+0x2b4>)
 80012d2:	f004 fedf 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80012d6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ec:	4619      	mov	r1, r3
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <MX_GPIO_Init+0x2b4>)
 80012f0:	f004 fed0 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80012f4:	2302      	movs	r3, #2
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001304:	2306      	movs	r3, #6
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4804      	ldr	r0, [pc, #16]	; (8001320 <MX_GPIO_Init+0x2a8>)
 8001310:	f004 fec0 	bl	8006094 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001314:	bf00      	nop
 8001316:	3738      	adds	r7, #56	; 0x38
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	46020c00 	.word	0x46020c00
 8001320:	42020400 	.word	0x42020400
 8001324:	42021c00 	.word	0x42021c00
 8001328:	42021800 	.word	0x42021800
 800132c:	42021400 	.word	0x42021400
 8001330:	42020800 	.word	0x42020800
 8001334:	42020c00 	.word	0x42020c00
 8001338:	42021000 	.word	0x42021000

0800133c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001340:	b672      	cpsid	i
}
 8001342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001344:	e7fe      	b.n	8001344 <Error_Handler+0x8>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <HAL_MspInit+0x30>)
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <HAL_MspInit+0x30>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_MspInit+0x30>)
 8001360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	46020c00 	.word	0x46020c00

0800137c <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b0bc      	sub	sp, #240	; 0xf0
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	22c8      	movs	r2, #200	; 0xc8
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00c ff0a 	bl	800e1b6 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a27      	ldr	r2, [pc, #156]	; (8001444 <HAL_MDF_MspInit+0xc8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d146      	bne.n	800143a <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 80013ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f008 fe02 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 80013ce:	f7ff ffb5 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 80013da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 80013e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f6:	4a14      	ldr	r2, [pc, #80]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_MDF_MspInit+0xcc>)
 8001402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 800140e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001412:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001428:	2303      	movs	r3, #3
 800142a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <HAL_MDF_MspInit+0xd0>)
 8001436:	f004 fe2d 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 800143a:	bf00      	nop
 800143c:	37f0      	adds	r7, #240	; 0xf0
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	46024080 	.word	0x46024080
 8001448:	46020c00 	.word	0x46020c00
 800144c:	42021000 	.word	0x42021000

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b0be      	sub	sp, #248	; 0xf8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	22c8      	movs	r2, #200	; 0xc8
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f00c fea0 	bl	800e1b6 <memset>
  if(hi2c->Instance==I2C1)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_I2C_MspInit+0x160>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d147      	bne.n	8001510 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001480:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	4618      	mov	r0, r3
 8001498:	f008 fd98 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80014a2:	f7ff ff4b 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ac:	4a41      	ldr	r2, [pc, #260]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014b6:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 80014b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80014c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014de:	2304      	movs	r3, #4
 80014e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4833      	ldr	r0, [pc, #204]	; (80015b8 <HAL_I2C_MspInit+0x168>)
 80014ec:	f004 fdd2 	bl	8006094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014f0:	4b30      	ldr	r3, [pc, #192]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 80014f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014f6:	4a2f      	ldr	r2, [pc, #188]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 80014f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 8001502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800150e:	e04a      	b.n	80015a6 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a29      	ldr	r2, [pc, #164]	; (80015bc <HAL_I2C_MspInit+0x16c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d145      	bne.n	80015a6 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800151a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	4618      	mov	r0, r3
 8001532:	f008 fd4b 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800153c:	f7ff fefe 	bl	800133c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 8001542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001546:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 8001548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 8001552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800155e:	2330      	movs	r3, #48	; 0x30
 8001560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001564:	2312      	movs	r3, #18
 8001566:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001576:	2304      	movs	r3, #4
 8001578:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800157c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001580:	4619      	mov	r1, r3
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <HAL_I2C_MspInit+0x170>)
 8001584:	f004 fd86 	bl	8006094 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 800158a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800158e:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 8001590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001594:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <HAL_I2C_MspInit+0x164>)
 800159a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800159e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
}
 80015a6:	bf00      	nop
 80015a8:	37f8      	adds	r7, #248	; 0xf8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40005400 	.word	0x40005400
 80015b4:	46020c00 	.word	0x46020c00
 80015b8:	42020400 	.word	0x42020400
 80015bc:	40005800 	.word	0x40005800
 80015c0:	42021c00 	.word	0x42021c00

080015c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspDeInit+0x6c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d112      	bne.n	80015fc <HAL_I2C_MspDeInit+0x38>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_I2C_MspDeInit+0x70>)
 80015d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015dc:	4a15      	ldr	r2, [pc, #84]	; (8001634 <HAL_I2C_MspDeInit+0x70>)
 80015de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80015e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ea:	4813      	ldr	r0, [pc, #76]	; (8001638 <HAL_I2C_MspDeInit+0x74>)
 80015ec:	f004 ff2a 	bl	8006444 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80015f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f4:	4810      	ldr	r0, [pc, #64]	; (8001638 <HAL_I2C_MspDeInit+0x74>)
 80015f6:	f004 ff25 	bl	8006444 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015fa:	e014      	b.n	8001626 <HAL_I2C_MspDeInit+0x62>
  else if(hi2c->Instance==I2C2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_I2C_MspDeInit+0x78>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10f      	bne.n	8001626 <HAL_I2C_MspDeInit+0x62>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_I2C_MspDeInit+0x70>)
 8001608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800160c:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_I2C_MspDeInit+0x70>)
 800160e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001612:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_4);
 8001616:	2110      	movs	r1, #16
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <HAL_I2C_MspDeInit+0x7c>)
 800161a:	f004 ff13 	bl	8006444 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5);
 800161e:	2120      	movs	r1, #32
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <HAL_I2C_MspDeInit+0x7c>)
 8001622:	f004 ff0f 	bl	8006444 <HAL_GPIO_DeInit>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	46020c00 	.word	0x46020c00
 8001638:	42020400 	.word	0x42020400
 800163c:	40005800 	.word	0x40005800
 8001640:	42021c00 	.word	0x42021c00

08001644 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0c8      	sub	sp, #288	; 0x120
 8001648:	af00      	add	r7, sp, #0
 800164a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001652:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001668:	22c8      	movs	r2, #200	; 0xc8
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00c fda2 	bl	800e1b6 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001672:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001676:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4aa6      	ldr	r2, [pc, #664]	; (8001918 <HAL_OSPI_MspInit+0x2d4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f040 815d 	bne.w	8001940 <HAL_OSPI_MspInit+0x2fc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001686:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800168a:	f04f 0300 	mov.w	r3, #0
 800168e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800169c:	4618      	mov	r0, r3
 800169e:	f008 fc95 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80016a8:	f7ff fe48 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_OSPIM_CLK_ENABLED++;
 80016ac:	4b9b      	ldr	r3, [pc, #620]	; (800191c <HAL_OSPI_MspInit+0x2d8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a9a      	ldr	r2, [pc, #616]	; (800191c <HAL_OSPI_MspInit+0x2d8>)
 80016b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 80016b6:	4b99      	ldr	r3, [pc, #612]	; (800191c <HAL_OSPI_MspInit+0x2d8>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d10e      	bne.n	80016dc <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 80016be:	4b98      	ldr	r3, [pc, #608]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c4:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80016dc:	4b90      	ldr	r3, [pc, #576]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e2:	4a8f      	ldr	r2, [pc, #572]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ec:	4b8c      	ldr	r3, [pc, #560]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80016f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80016fa:	4b89      	ldr	r3, [pc, #548]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80016fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001700:	4a87      	ldr	r2, [pc, #540]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001706:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800170a:	4b85      	ldr	r3, [pc, #532]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800170c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001718:	4b81      	ldr	r3, [pc, #516]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800171a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800171e:	4a80      	ldr	r2, [pc, #512]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001720:	f043 0310 	orr.w	r3, r3, #16
 8001724:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001728:	4b7d      	ldr	r3, [pc, #500]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800172a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
 8001734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	4b7a      	ldr	r3, [pc, #488]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800173c:	4a78      	ldr	r2, [pc, #480]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001746:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001754:	4b72      	ldr	r3, [pc, #456]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800175a:	4a71      	ldr	r2, [pc, #452]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800175c:	f043 0320 	orr.w	r3, r3, #32
 8001760:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001764:	4b6e      	ldr	r3, [pc, #440]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001770:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001772:	4b6b      	ldr	r3, [pc, #428]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001778:	4a69      	ldr	r2, [pc, #420]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 800177a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001790:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001796:	4a62      	ldr	r2, [pc, #392]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017a0:	4b5f      	ldr	r3, [pc, #380]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80017a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017a6:	f003 0204 	and.w	r2, r3, #4
 80017aa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80017bc:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017be:	4b58      	ldr	r3, [pc, #352]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80017c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017c4:	4a56      	ldr	r2, [pc, #344]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80017c6:	f043 0302 	orr.w	r3, r3, #2
 80017ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017ce:	4b54      	ldr	r3, [pc, #336]	; (8001920 <HAL_OSPI_MspInit+0x2dc>)
 80017d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d4:	f003 0202 	and.w	r2, r3, #2
 80017d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80017e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017ea:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fe:	2303      	movs	r3, #3
 8001800:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001804:	2303      	movs	r3, #3
 8001806:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 800180a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800180e:	4619      	mov	r1, r3
 8001810:	4844      	ldr	r0, [pc, #272]	; (8001924 <HAL_OSPI_MspInit+0x2e0>)
 8001812:	f004 fc3f 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8001816:	2308      	movs	r3, #8
 8001818:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181c:	2302      	movs	r3, #2
 800181e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800182e:	2303      	movs	r3, #3
 8001830:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001834:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001838:	4619      	mov	r1, r3
 800183a:	483b      	ldr	r0, [pc, #236]	; (8001928 <HAL_OSPI_MspInit+0x2e4>)
 800183c:	f004 fc2a 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001858:	230a      	movs	r3, #10
 800185a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800185e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001862:	4619      	mov	r1, r3
 8001864:	4831      	ldr	r0, [pc, #196]	; (800192c <HAL_OSPI_MspInit+0x2e8>)
 8001866:	f004 fc15 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800186a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800186e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001884:	230a      	movs	r3, #10
 8001886:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800188a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800188e:	4619      	mov	r1, r3
 8001890:	4827      	ldr	r0, [pc, #156]	; (8001930 <HAL_OSPI_MspInit+0x2ec>)
 8001892:	f004 fbff 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8001896:	2304      	movs	r3, #4
 8001898:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80018b8:	4619      	mov	r1, r3
 80018ba:	481e      	ldr	r0, [pc, #120]	; (8001934 <HAL_OSPI_MspInit+0x2f0>)
 80018bc:	f004 fbea 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80018c0:	2308      	movs	r3, #8
 80018c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80018d8:	230a      	movs	r3, #10
 80018da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80018de:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80018e2:	4619      	mov	r1, r3
 80018e4:	4814      	ldr	r0, [pc, #80]	; (8001938 <HAL_OSPI_MspInit+0x2f4>)
 80018e6:	f004 fbd5 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80018ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f2:	2302      	movs	r3, #2
 80018f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001904:	230a      	movs	r3, #10
 8001906:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800190e:	4619      	mov	r1, r3
 8001910:	480a      	ldr	r0, [pc, #40]	; (800193c <HAL_OSPI_MspInit+0x2f8>)
 8001912:	f004 fbbf 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001916:	e0ed      	b.n	8001af4 <HAL_OSPI_MspInit+0x4b0>
 8001918:	420d1400 	.word	0x420d1400
 800191c:	200009d4 	.word	0x200009d4
 8001920:	46020c00 	.word	0x46020c00
 8001924:	42022000 	.word	0x42022000
 8001928:	42021000 	.word	0x42021000
 800192c:	42020c00 	.word	0x42020c00
 8001930:	42021400 	.word	0x42021400
 8001934:	42021c00 	.word	0x42021c00
 8001938:	42020800 	.word	0x42020800
 800193c:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 8001940:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001944:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_OSPI_MspInit+0x4bc>)
 800194e:	4293      	cmp	r3, r2
 8001950:	f040 80d0 	bne.w	8001af4 <HAL_OSPI_MspInit+0x4b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001954:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001966:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800196a:	4618      	mov	r0, r3
 800196c:	f008 fb2e 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_OSPI_MspInit+0x336>
      Error_Handler();
 8001976:	f7ff fce1 	bl	800133c <Error_Handler>
    HAL_RCC_OSPIM_CLK_ENABLED++;
 800197a:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <HAL_OSPI_MspInit+0x4c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	3301      	adds	r3, #1
 8001980:	4a60      	ldr	r2, [pc, #384]	; (8001b04 <HAL_OSPI_MspInit+0x4c0>)
 8001982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OSPIM_CLK_ENABLED==1){
 8001984:	4b5f      	ldr	r3, [pc, #380]	; (8001b04 <HAL_OSPI_MspInit+0x4c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d116      	bne.n	80019ba <HAL_OSPI_MspInit+0x376>
      __HAL_RCC_OSPIM_CLK_ENABLE();
 800198c:	4b5e      	ldr	r3, [pc, #376]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 800198e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001992:	4a5d      	ldr	r2, [pc, #372]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001998:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800199c:	4b5a      	ldr	r3, [pc, #360]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 800199e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019a2:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80019a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80019b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80019ba:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c0:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ca:	4b4f      	ldr	r3, [pc, #316]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80019d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80019e6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 80019fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001a02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a06:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a10:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001a14:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a16:	4b3c      	ldr	r3, [pc, #240]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a1c:	4a3a      	ldr	r2, [pc, #232]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a2c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001a30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a34:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a42:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a44:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a4c:	f043 0320 	orr.w	r3, r3, #32
 8001a50:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_OSPI_MspInit+0x4c4>)
 8001a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a5a:	f003 0220 	and.w	r2, r3, #32
 8001a5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001a6c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001a70:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8001a72:	2320      	movs	r3, #32
 8001a74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001a8a:	2305      	movs	r3, #5
 8001a8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a90:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a94:	4619      	mov	r1, r3
 8001a96:	481d      	ldr	r0, [pc, #116]	; (8001b0c <HAL_OSPI_MspInit+0x4c8>)
 8001a98:	f004 fafc 	bl	8006094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001a9c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001aa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001abc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <HAL_OSPI_MspInit+0x4cc>)
 8001ac4:	f004 fae6 	bl	8006094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8001ac8:	f241 031f 	movw	r3, #4127	; 0x101f
 8001acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <HAL_OSPI_MspInit+0x4d0>)
 8001af0:	f004 fad0 	bl	8006094 <HAL_GPIO_Init>
}
 8001af4:	bf00      	nop
 8001af6:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	420d2400 	.word	0x420d2400
 8001b04:	200009d4 	.word	0x200009d4
 8001b08:	46020c00 	.word	0x46020c00
 8001b0c:	42022000 	.word	0x42022000
 8001b10:	42021c00 	.word	0x42021c00
 8001b14:	42021400 	.word	0x42021400

08001b18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b0be      	sub	sp, #248	; 0xf8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	22c8      	movs	r2, #200	; 0xc8
 8001b36:	2100      	movs	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00c fb3c 	bl	800e1b6 <memset>
  if(hspi->Instance==SPI2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <HAL_SPI_MspInit+0x110>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d16b      	bne.n	8001c20 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001b54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f008 fa33 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001b6c:	f7ff fbe6 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b76:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001b80:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b94:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001b96:	f043 0308 	orr.w	r3, r3, #8
 8001b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <HAL_SPI_MspInit+0x114>)
 8001bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001bca:	231a      	movs	r3, #26
 8001bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001be2:	2305      	movs	r3, #5
 8001be4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <HAL_SPI_MspInit+0x118>)
 8001bf0:	f004 fa50 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4806      	ldr	r0, [pc, #24]	; (8001c34 <HAL_SPI_MspInit+0x11c>)
 8001c1c:	f004 fa3a 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	37f8      	adds	r7, #248	; 0xf8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40003800 	.word	0x40003800
 8001c2c:	46020c00 	.word	0x46020c00
 8001c30:	42020c00 	.word	0x42020c00
 8001c34:	42020400 	.word	0x42020400

08001c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b0be      	sub	sp, #248	; 0xf8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	22c8      	movs	r2, #200	; 0xc8
 8001c56:	2100      	movs	r1, #0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00c faac 	bl	800e1b6 <memset>
  if(huart->Instance==UART4)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_UART_MspInit+0x15c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d146      	bne.n	8001cf6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c68:	f04f 0208 	mov.w	r2, #8
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c74:	2300      	movs	r3, #0
 8001c76:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c78:	f107 0318 	add.w	r3, r7, #24
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f008 f9a5 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c88:	f7ff fb58 	bl	800133c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c8c:	4b42      	ldr	r3, [pc, #264]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001c8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c92:	4a41      	ldr	r2, [pc, #260]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001c94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c9c:	4b3e      	ldr	r3, [pc, #248]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ca2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001caa:	4b3b      	ldr	r3, [pc, #236]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb0:	4a39      	ldr	r2, [pc, #228]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001cb2:	f043 0304 	orr.w	r3, r3, #4
 8001cb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cba:	4b37      	ldr	r3, [pc, #220]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001cc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cec:	4619      	mov	r1, r3
 8001cee:	482b      	ldr	r0, [pc, #172]	; (8001d9c <HAL_UART_MspInit+0x164>)
 8001cf0:	f004 f9d0 	bl	8006094 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cf4:	e04a      	b.n	8001d8c <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_UART_MspInit+0x168>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d145      	bne.n	8001d8c <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d00:	f04f 0201 	mov.w	r2, #1
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d10:	f107 0318 	add.w	r3, r7, #24
 8001d14:	4618      	mov	r0, r3
 8001d16:	f008 f959 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001d20:	f7ff fb0c 	bl	800133c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d24:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d30:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d48:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_UART_MspInit+0x160>)
 8001d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001d60:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d7a:	2307      	movs	r3, #7
 8001d7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <HAL_UART_MspInit+0x16c>)
 8001d88:	f004 f984 	bl	8006094 <HAL_GPIO_Init>
}
 8001d8c:	bf00      	nop
 8001d8e:	37f8      	adds	r7, #248	; 0xf8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40004c00 	.word	0x40004c00
 8001d98:	46020c00 	.word	0x46020c00
 8001d9c:	42020800 	.word	0x42020800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	42020000 	.word	0x42020000

08001da8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0be      	sub	sp, #248	; 0xf8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	22c8      	movs	r2, #200	; 0xc8
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00c f9f4 	bl	800e1b6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <HAL_PCD_MspInit+0x10c>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d169      	bne.n	8001eac <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001dd8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	4618      	mov	r0, r3
 8001df0:	f008 f8ec 	bl	8009fcc <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001dfa:	f7ff fa9f 	bl	800133c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e04:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e0e:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001e1c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001e36:	230a      	movs	r3, #10
 8001e38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e40:	4619      	mov	r1, r3
 8001e42:	481e      	ldr	r0, [pc, #120]	; (8001ebc <HAL_PCD_MspInit+0x114>)
 8001e44:	f004 f926 	bl	8006094 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001e48:	4b1b      	ldr	r3, [pc, #108]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e4e:	4a1a      	ldr	r2, [pc, #104]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e58:	4b17      	ldr	r3, [pc, #92]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b14      	ldr	r3, [pc, #80]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d119      	bne.n	8001ea8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e84:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e92:	f006 fdc9 	bl	8008a28 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b08      	ldr	r3, [pc, #32]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <HAL_PCD_MspInit+0x110>)
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ea6:	e001      	b.n	8001eac <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001ea8:	f006 fdbe 	bl	8008a28 <HAL_PWREx_EnableVddUSB>
}
 8001eac:	bf00      	nop
 8001eae:	37f8      	adds	r7, #248	; 0xf8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	42040000 	.word	0x42040000
 8001eb8:	46020c00 	.word	0x46020c00
 8001ebc:	42020000 	.word	0x42020000

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eca:	e7fe      	b.n	8001eca <HardFault_Handler+0x4>

08001ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler+0x4>

08001ed2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed6:	e7fe      	b.n	8001ed6 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <UsageFault_Handler+0x4>

08001ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0c:	f003 ff1e 	bl	8005d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	; (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f00c f900 	bl	800e148 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	200c0000 	.word	0x200c0000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	200009d8 	.word	0x200009d8
 8001f7c:	20003770 	.word	0x20003770

08001f80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f84:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <SystemInit+0x68>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <SystemInit+0x68>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <SystemInit+0x6c>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f9a:	4b14      	ldr	r3, [pc, #80]	; (8001fec <SystemInit+0x6c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <SystemInit+0x6c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <SystemInit+0x6c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <SystemInit+0x6c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <SystemInit+0x6c>)
 8001fb2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001fb6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001fba:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <SystemInit+0x6c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <SystemInit+0x6c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a09      	ldr	r2, [pc, #36]	; (8001fec <SystemInit+0x6c>)
 8001fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fcc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001fce:	4b07      	ldr	r3, [pc, #28]	; (8001fec <SystemInit+0x6c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <SystemInit+0x68>)
 8001fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fda:	609a      	str	r2, [r3, #8]
  #endif
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00
 8001fec:	46020c00 	.word	0x46020c00

08001ff0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ff0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002028 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ff4:	f7ff ffc4 	bl	8001f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ff8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ffa:	e003      	b.n	8002004 <LoopCopyDataInit>

08001ffc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ffe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002000:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002002:	3104      	adds	r1, #4

08002004 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002004:	480a      	ldr	r0, [pc, #40]	; (8002030 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002008:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800200a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800200c:	d3f6      	bcc.n	8001ffc <CopyDataInit>
	ldr	r2, =_sbss
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002010:	e002      	b.n	8002018 <LoopFillZerobss>

08002012 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002012:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002014:	f842 3b04 	str.w	r3, [r2], #4

08002018 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <LoopForever+0x16>)
	cmp	r2, r3
 800201a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800201c:	d3f9      	bcc.n	8002012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201e:	f00c f899 	bl	800e154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002022:	f7fe faf9 	bl	8000618 <main>

08002026 <LoopForever>:

LoopForever:
    b LoopForever
 8002026:	e7fe      	b.n	8002026 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002028:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800202c:	08024414 	.word	0x08024414
	ldr	r0, =_sdata
 8002030:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002034:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 8002038:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 800203c:	20003769 	.word	0x20003769

08002040 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002040:	e7fe      	b.n	8002040 <ADC1_IRQHandler>
	...

08002044 <BSP_I2C2_Init>:
/**
  * @brief  Initializes I2C2 HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]

  hbus_i2c2.Instance = BUS_I2C2;
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <BSP_I2C2_Init+0x64>)
 8002050:	4a16      	ldr	r2, [pc, #88]	; (80020ac <BSP_I2C2_Init+0x68>)
 8002052:	601a      	str	r2, [r3, #0]

  if (I2c2InitCounter == 0U)
 8002054:	4b16      	ldr	r3, [pc, #88]	; (80020b0 <BSP_I2C2_Init+0x6c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d11f      	bne.n	800209c <BSP_I2C2_Init+0x58>
  {
    I2c2InitCounter++;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <BSP_I2C2_Init+0x6c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <BSP_I2C2_Init+0x6c>)
 8002064:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c2) == HAL_I2C_STATE_RESET)
 8002066:	4810      	ldr	r0, [pc, #64]	; (80020a8 <BSP_I2C2_Init+0x64>)
 8002068:	f004 fe00 	bl	8006c6c <HAL_I2C_GetState>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d114      	bne.n	800209c <BSP_I2C2_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif /* BSP_USE_CMSIS_OS */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C2 Msp */
      I2C2_MspInit(&hbus_i2c2);
 8002072:	480d      	ldr	r0, [pc, #52]	; (80020a8 <BSP_I2C2_Init+0x64>)
 8002074:	f000 fb60 	bl	8002738 <I2C2_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      if (MX_I2C2_Init(&hbus_i2c2, I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C2_FREQUENCY)) != HAL_OK)
 8002078:	f007 fee6 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800207c:	4603      	mov	r3, r0
 800207e:	490d      	ldr	r1, [pc, #52]	; (80020b4 <BSP_I2C2_Init+0x70>)
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f8e3 	bl	800224c <I2C_GetTiming>
 8002086:	4603      	mov	r3, r0
 8002088:	4619      	mov	r1, r3
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <BSP_I2C2_Init+0x64>)
 800208c:	f000 f838 	bl	8002100 <MX_I2C2_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <BSP_I2C2_Init+0x58>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002096:	f06f 0307 	mvn.w	r3, #7
 800209a:	607b      	str	r3, [r7, #4]
#if (USE_HAL_I2C_REGISTER_CALLBACKS > 0)
    }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
return ret;
 800209c:	687b      	ldr	r3, [r7, #4]
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200013e4 	.word	0x200013e4
 80020ac:	40005800 	.word	0x40005800
 80020b0:	200009dc 	.word	0x200009dc
 80020b4:	000186a0 	.word	0x000186a0

080020b8 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]

  I2c2InitCounter--;
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <BSP_I2C2_DeInit+0x40>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	4a0b      	ldr	r2, [pc, #44]	; (80020f8 <BSP_I2C2_DeInit+0x40>)
 80020ca:	6013      	str	r3, [r2, #0]

  if (I2c2InitCounter == 0U)
 80020cc:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <BSP_I2C2_DeInit+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10b      	bne.n	80020ec <BSP_I2C2_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C2_MspDeInit(&hbus_i2c2);
 80020d4:	4809      	ldr	r0, [pc, #36]	; (80020fc <BSP_I2C2_DeInit+0x44>)
 80020d6:	f000 fb95 	bl	8002804 <I2C2_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c2) != HAL_OK)
 80020da:	4808      	ldr	r0, [pc, #32]	; (80020fc <BSP_I2C2_DeInit+0x44>)
 80020dc:	f004 fb69 	bl	80067b2 <HAL_I2C_DeInit>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <BSP_I2C2_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80020e6:	f06f 0307 	mvn.w	r3, #7
 80020ea:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80020ec:	687b      	ldr	r3, [r7, #4]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	200009dc 	.word	0x200009dc
 80020fc:	200013e4 	.word	0x200013e4

08002100 <MX_I2C2_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f004 faa8 	bl	8006694 <HAL_I2C_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <MX_I2C2_Init+0x50>
  {
    status = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
 800214e:	e014      	b.n	800217a <MX_I2C2_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f005 f85a 	bl	8007210 <HAL_I2CEx_ConfigAnalogFilter>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <MX_I2C2_Init+0x68>
    {
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e008      	b.n	800217a <MX_I2C2_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8002168:	2100      	movs	r1, #0
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f005 f89b 	bl	80072a6 <HAL_I2CEx_ConfigDigitalFilter>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_I2C2_Init+0x7a>
      {
        status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af02      	add	r7, sp, #8
 800218a:	60ba      	str	r2, [r7, #8]
 800218c:	461a      	mov	r2, r3
 800218e:	4603      	mov	r3, r0
 8002190:	81fb      	strh	r3, [r7, #14]
 8002192:	460b      	mov	r3, r1
 8002194:	81bb      	strh	r3, [r7, #12]
 8002196:	4613      	mov	r3, r2
 8002198:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	89f8      	ldrh	r0, [r7, #14]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f000 fb4f 	bl	8002848 <I2C2_WriteReg>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <BSP_I2C2_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e00c      	b.n	80021d0 <BSP_I2C2_WriteReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 80021b6:	4809      	ldr	r0, [pc, #36]	; (80021dc <BSP_I2C2_WriteReg16+0x58>)
 80021b8:	f004 fd66 	bl	8006c88 <HAL_I2C_GetError>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d103      	bne.n	80021ca <BSP_I2C2_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80021c2:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	e002      	b.n	80021d0 <BSP_I2C2_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80021ca:	f06f 0303 	mvn.w	r3, #3
 80021ce:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 80021d0:	697b      	ldr	r3, [r7, #20]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200013e4 	.word	0x200013e4

080021e0 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60ba      	str	r2, [r7, #8]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4603      	mov	r3, r0
 80021ec:	81fb      	strh	r3, [r7, #14]
 80021ee:	460b      	mov	r3, r1
 80021f0:	81bb      	strh	r3, [r7, #12]
 80021f2:	4613      	mov	r3, r2
 80021f4:	80fb      	strh	r3, [r7, #6]

#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif /* BSP_USE_CMSIS_OS */
  if (I2C2_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80021f6:	89b9      	ldrh	r1, [r7, #12]
 80021f8:	89f8      	ldrh	r0, [r7, #14]
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	2202      	movs	r2, #2
 8002202:	f000 fb47 	bl	8002894 <I2C2_ReadReg>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d102      	bne.n	8002212 <BSP_I2C2_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	e00c      	b.n	800222c <BSP_I2C2_ReadReg16+0x4c>
  }
  else
  {
    if (HAL_I2C_GetError(&hbus_i2c2) == HAL_I2C_ERROR_AF)
 8002212:	4809      	ldr	r0, [pc, #36]	; (8002238 <BSP_I2C2_ReadReg16+0x58>)
 8002214:	f004 fd38 	bl	8006c88 <HAL_I2C_GetError>
 8002218:	4603      	mov	r3, r0
 800221a:	2b04      	cmp	r3, #4
 800221c:	d103      	bne.n	8002226 <BSP_I2C2_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800221e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e002      	b.n	800222c <BSP_I2C2_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002226:	f06f 0303 	mvn.w	r3, #3
 800222a:	617b      	str	r3, [r7, #20]
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif /* BSP_USE_CMSIS_OS */

  return ret;
 800222c:	697b      	ldr	r3, [r7, #20]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	200013e4 	.word	0x200013e4

0800223c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8002240:	f003 fd98 	bl	8005d74 <HAL_GetTick>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d06b      	beq.n	8002338 <I2C_GetTiming+0xec>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d068      	beq.n	8002338 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e060      	b.n	800232e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800226c:	4a35      	ldr	r2, [pc, #212]	; (8002344 <I2C_GetTiming+0xf8>)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	212c      	movs	r1, #44	; 0x2c
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	4413      	add	r3, r2
 8002278:	3304      	adds	r3, #4
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d352      	bcc.n	8002328 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8002282:	4a30      	ldr	r2, [pc, #192]	; (8002344 <I2C_GetTiming+0xf8>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	212c      	movs	r1, #44	; 0x2c
 8002288:	fb01 f303 	mul.w	r3, r1, r3
 800228c:	4413      	add	r3, r2
 800228e:	3308      	adds	r3, #8
 8002290:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d847      	bhi.n	8002328 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8002298:	6939      	ldr	r1, [r7, #16]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f856 	bl	800234c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f940 	bl	8002528 <I2C_Compute_SCLL_SCLH>
 80022a8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b7f      	cmp	r3, #127	; 0x7f
 80022ae:	d842      	bhi.n	8002336 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80022b0:	4925      	ldr	r1, [pc, #148]	; (8002348 <I2C_GetTiming+0xfc>)
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80022c2:	4821      	ldr	r0, [pc, #132]	; (8002348 <I2C_GetTiming+0xfc>)
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	3304      	adds	r3, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 80022da:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 80022dc:	481a      	ldr	r0, [pc, #104]	; (8002348 <I2C_GetTiming+0xfc>)
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4403      	add	r3, r0
 80022ea:	3308      	adds	r3, #8
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) | \
 80022f4:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) | \
 80022f6:	4814      	ldr	r0, [pc, #80]	; (8002348 <I2C_GetTiming+0xfc>)
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4403      	add	r3, r0
 8002304:	330c      	adds	r3, #12
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) | \
 800230c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800230e:	480e      	ldr	r0, [pc, #56]	; (8002348 <I2C_GetTiming+0xfc>)
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4403      	add	r3, r0
 800231c:	3310      	adds	r3, #16
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) | \
 8002322:	430b      	orrs	r3, r1
 8002324:	617b      	str	r3, [r7, #20]
        }
        break;
 8002326:	e006      	b.n	8002336 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	3301      	adds	r3, #1
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d99b      	bls.n	800226c <I2C_GetTiming+0x20>
 8002334:	e000      	b.n	8002338 <I2C_GetTiming+0xec>
        break;
 8002336:	bf00      	nop
      }
    }
  }

  return ret;
 8002338:	697b      	ldr	r3, [r7, #20]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	0800eba8 	.word	0x0800eba8
 8002348:	200009e0 	.word	0x200009e0

0800234c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800234c:	b480      	push	{r7}
 800234e:	b08f      	sub	sp, #60	; 0x3c
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8002356:	2310      	movs	r3, #16
 8002358:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t scldel;
  uint32_t sdadel;
  uint32_t tafdel_min;
  uint32_t tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	085a      	lsrs	r2, r3, #1
 800235e:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8002360:	4413      	add	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	fbb3 f3f2 	udiv	r3, r3, r2
 8002368:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800236a:	2332      	movs	r3, #50	; 0x32
 800236c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800236e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002372:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / tPRESC
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / tPRESC */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8002374:	4a69      	ldr	r2, [pc, #420]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	212c      	movs	r1, #44	; 0x2c
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	4413      	add	r3, r2
 8002380:	3324      	adds	r3, #36	; 0x24
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	4a65      	ldr	r2, [pc, #404]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	212c      	movs	r1, #44	; 0x2c
 800238c:	fb01 f303 	mul.w	r3, r1, r3
 8002390:	4413      	add	r3, r2
 8002392:	330c      	adds	r3, #12
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	18c2      	adds	r2, r0, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8002398:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800239a:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800239c:	495f      	ldr	r1, [pc, #380]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	202c      	movs	r0, #44	; 0x2c
 80023a2:	fb00 f303 	mul.w	r3, r0, r3
 80023a6:	440b      	add	r3, r1
 80023a8:	3328      	adds	r3, #40	; 0x28
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3303      	adds	r3, #3
 80023ae:	69f9      	ldr	r1, [r7, #28]
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3310      	adds	r3, #16
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	4a54      	ldr	r2, [pc, #336]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	212c      	movs	r1, #44	; 0x2c
 80023d0:	fb01 f303 	mul.w	r3, r1, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3320      	adds	r3, #32
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	1ac2      	subs	r2, r0, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80023dc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023de:	1ad2      	subs	r2, r2, r3
                (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80023e0:	494e      	ldr	r1, [pc, #312]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	202c      	movs	r0, #44	; 0x2c
 80023e6:	fb00 f303 	mul.w	r3, r0, r3
 80023ea:	440b      	add	r3, r1
 80023ec:	3328      	adds	r3, #40	; 0x28
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	3304      	adds	r3, #4
 80023f2:	69f9      	ldr	r1, [r7, #28]
 80023f4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80023fc:	4a47      	ldr	r2, [pc, #284]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3320      	adds	r3, #32
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	4a43      	ldr	r2, [pc, #268]	; (800251c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	3314      	adds	r3, #20
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4403      	add	r3, r0
 8002420:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8002422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002424:	2b00      	cmp	r3, #0
 8002426:	dc01      	bgt.n	800242c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	dc01      	bgt.n	8002436 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
 800243a:	e062      	b.n	8002502 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
 8002440:	e059      	b.n	80024f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	3301      	adds	r3, #1
 8002446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002448:	3201      	adds	r2, #1
 800244a:	fb03 f202 	mul.w	r2, r3, r2
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fb02 f303 	mul.w	r3, r2, r3
 8002454:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	429a      	cmp	r2, r3
 800245c:	d348      	bcc.n	80024f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800245e:	2300      	movs	r3, #0
 8002460:	623b      	str	r3, [r7, #32]
 8002462:	e042      	b.n	80024ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	3301      	adds	r3, #1
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	fb03 f202 	mul.w	r2, r3, r2
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fb02 f303 	mul.w	r3, r2, r3
 8002474:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8002476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	d332      	bcc.n	80024e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800247e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d82e      	bhi.n	80024e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if (presc != prev_presc)
 8002486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	429a      	cmp	r2, r3
 800248c:	d02a      	beq.n	80024e4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4924      	ldr	r1, [pc, #144]	; (8002524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024a0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80024a2:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	491f      	ldr	r1, [pc, #124]	; (8002524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3304      	adds	r3, #4
 80024b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4919      	ldr	r1, [pc, #100]	; (8002524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	3308      	adds	r3, #8
 80024ca:	6a3a      	ldr	r2, [r7, #32]
 80024cc:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80024ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d0:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80024d2:	4b13      	ldr	r3, [pc, #76]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	4a11      	ldr	r2, [pc, #68]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024da:	6013      	str	r3, [r2, #0]

              if (I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b7f      	cmp	r3, #127	; 0x7f
 80024e2:	d812      	bhi.n	800250a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	3301      	adds	r3, #1
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d9b9      	bls.n	8002464 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	3301      	adds	r3, #1
 80024f4:	627b      	str	r3, [r7, #36]	; 0x24
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d9a2      	bls.n	8002442 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	3301      	adds	r3, #1
 8002500:	62bb      	str	r3, [r7, #40]	; 0x28
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b0f      	cmp	r3, #15
 8002506:	d999      	bls.n	800243c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8002508:	e000      	b.n	800250c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800250a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800250c:	373c      	adds	r7, #60	; 0x3c
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	3b9aca00 	.word	0x3b9aca00
 800251c:	0800eba8 	.word	0x0800eba8
 8002520:	200013e0 	.word	0x200013e0
 8002524:	200009e0 	.word	0x200009e0

08002528 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8002528:	b480      	push	{r7}
 800252a:	b093      	sub	sp, #76	; 0x4c
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t clk_max;
  uint32_t scll;
  uint32_t sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	085a      	lsrs	r2, r3, #1
 800253c:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <I2C_Compute_SCLL_SCLH+0x200>)
 800253e:	4413      	add	r3, r2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	fbb3 f3f2 	udiv	r3, r3, r2
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U)) / I2C_Charac[I2C_speed].freq;
 8002548:	4a78      	ldr	r2, [pc, #480]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	212c      	movs	r1, #44	; 0x2c
 800254e:	fb01 f303 	mul.w	r3, r1, r3
 8002552:	4413      	add	r3, r2
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	085a      	lsrs	r2, r3, #1
 8002558:	4b73      	ldr	r3, [pc, #460]	; (8002728 <I2C_Compute_SCLL_SCLH+0x200>)
 800255a:	4413      	add	r3, r2
 800255c:	4973      	ldr	r1, [pc, #460]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	202c      	movs	r0, #44	; 0x2c
 8002562:	fb00 f202 	mul.w	r2, r0, r2
 8002566:	440a      	add	r2, r1
 8002568:	6812      	ldr	r2, [r2, #0]
 800256a:	fbb3 f3f2 	udiv	r3, r3, r2
 800256e:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8002570:	2332      	movs	r3, #50	; 0x32
 8002572:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8002574:	4a6d      	ldr	r2, [pc, #436]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	212c      	movs	r1, #44	; 0x2c
 800257a:	fb01 f303 	mul.w	r3, r1, r3
 800257e:	4413      	add	r3, r2
 8002580:	3328      	adds	r3, #40	; 0x28
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800258c:	4a67      	ldr	r2, [pc, #412]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3304      	adds	r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a62      	ldr	r2, [pc, #392]	; (8002728 <I2C_Compute_SCLL_SCLH+0x200>)
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80025a4:	4a61      	ldr	r2, [pc, #388]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	212c      	movs	r1, #44	; 0x2c
 80025aa:	fb01 f303 	mul.w	r3, r1, r3
 80025ae:	4413      	add	r3, r2
 80025b0:	3308      	adds	r3, #8
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a5c      	ldr	r2, [pc, #368]	; (8002728 <I2C_Compute_SCLL_SCLH+0x200>)
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80025c0:	2300      	movs	r3, #0
 80025c2:	637b      	str	r3, [r7, #52]	; 0x34
 80025c4:	e0a3      	b.n	800270e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80025c6:	495a      	ldr	r1, [pc, #360]	; (8002730 <I2C_Compute_SCLL_SCLH+0x208>)
 80025c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	440b      	add	r3, r1
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e4:	e08c      	b.n	8002700 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	441a      	add	r2, r3
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	3301      	adds	r3, #1
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	fb03 f101 	mul.w	r1, r3, r1
 80025f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	440b      	add	r3, r1
 80025fc:	4413      	add	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	212c      	movs	r1, #44	; 0x2c
 8002606:	fb01 f303 	mul.w	r3, r1, r3
 800260a:	4413      	add	r3, r2
 800260c:	3318      	adds	r3, #24
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	429a      	cmp	r2, r3
 8002614:	d971      	bls.n	80026fa <I2C_Compute_SCLL_SCLH+0x1d2>
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	1ad2      	subs	r2, r2, r3
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002624:	429a      	cmp	r2, r3
 8002626:	d268      	bcs.n	80026fa <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8002628:	2300      	movs	r3, #0
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
 800262c:	e062      	b.n	80026f4 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800262e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	441a      	add	r2, r3
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	3301      	adds	r3, #1
 8002638:	6979      	ldr	r1, [r7, #20]
 800263a:	fb03 f101 	mul.w	r1, r3, r1
 800263e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	440b      	add	r3, r1
 8002644:	4413      	add	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	441a      	add	r2, r3
 800264e:	4937      	ldr	r1, [pc, #220]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	202c      	movs	r0, #44	; 0x2c
 8002654:	fb00 f303 	mul.w	r3, r0, r3
 8002658:	440b      	add	r3, r1
 800265a:	3320      	adds	r3, #32
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	441a      	add	r2, r3
 8002660:	4932      	ldr	r1, [pc, #200]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	202c      	movs	r0, #44	; 0x2c
 8002666:	fb00 f303 	mul.w	r3, r0, r3
 800266a:	440b      	add	r3, r1
 800266c:	3324      	adds	r3, #36	; 0x24
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4413      	add	r3, r2
 8002672:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min)
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	429a      	cmp	r2, r3
 800267a:	d338      	bcc.n	80026ee <I2C_Compute_SCLL_SCLH+0x1c6>
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	429a      	cmp	r2, r3
 8002682:	d834      	bhi.n	80026ee <I2C_Compute_SCLL_SCLH+0x1c6>
 8002684:	4a29      	ldr	r2, [pc, #164]	; (800272c <I2C_Compute_SCLL_SCLH+0x204>)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	212c      	movs	r1, #44	; 0x2c
 800268a:	fb01 f303 	mul.w	r3, r1, r3
 800268e:	4413      	add	r3, r2
 8002690:	331c      	adds	r3, #28
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	429a      	cmp	r2, r3
 8002698:	d329      	bcc.n	80026ee <I2C_Compute_SCLL_SCLH+0x1c6>
              && (ti2cclk < tscl_h))
 800269a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d225      	bcs.n	80026ee <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	da02      	bge.n	80026b6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	425b      	negs	r3, r3
 80026b4:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d917      	bls.n	80026ee <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80026c2:	491b      	ldr	r1, [pc, #108]	; (8002730 <I2C_Compute_SCLL_SCLH+0x208>)
 80026c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3310      	adds	r3, #16
 80026d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80026d6:	4916      	ldr	r1, [pc, #88]	; (8002730 <I2C_Compute_SCLL_SCLH+0x208>)
 80026d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	330c      	adds	r3, #12
 80026e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026e8:	601a      	str	r2, [r3, #0]
              ret = count;
 80026ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ec:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f0:	3301      	adds	r3, #1
 80026f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	2bff      	cmp	r3, #255	; 0xff
 80026f8:	d999      	bls.n	800262e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80026fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026fc:	3301      	adds	r3, #1
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	f67f af6f 	bls.w	80025e6 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8002708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270a:	3301      	adds	r3, #1
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <I2C_Compute_SCLL_SCLH+0x20c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002714:	429a      	cmp	r2, r3
 8002716:	f4ff af56 	bcc.w	80025c6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800271a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800271c:	4618      	mov	r0, r3
 800271e:	374c      	adds	r7, #76	; 0x4c
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	3b9aca00 	.word	0x3b9aca00
 800272c:	0800eba8 	.word	0x0800eba8
 8002730:	200009e0 	.word	0x200009e0
 8002734:	200013e0 	.word	0x200013e0

08002738 <I2C2_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspInit(const I2C_HandleTypeDef *hI2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C2_SCL_GPIO_CLK_ENABLE();
 8002740:	4b2e      	ldr	r3, [pc, #184]	; (80027fc <I2C2_MspInit+0xc4>)
 8002742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002746:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <I2C2_MspInit+0xc4>)
 8002748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002750:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <I2C2_MspInit+0xc4>)
 8002752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C2_SDA_GPIO_CLK_ENABLE();
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <I2C2_MspInit+0xc4>)
 8002760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002764:	4a25      	ldr	r2, [pc, #148]	; (80027fc <I2C2_MspInit+0xc4>)
 8002766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <I2C2_MspInit+0xc4>)
 8002770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002774:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SCL_PIN;
 800277c:	2310      	movs	r3, #16
 800277e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 8002780:	2312      	movs	r3, #18
 8002782:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 8002784:	2301      	movs	r3, #1
 8002786:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 8002788:	2302      	movs	r3, #2
 800278a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SCL_AF;
 800278c:	2304      	movs	r3, #4
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &gpio_init_structure);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	481a      	ldr	r0, [pc, #104]	; (8002800 <I2C2_MspInit+0xc8>)
 8002798:	f003 fc7c 	bl	8006094 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin     = BUS_I2C2_SDA_PIN;
 800279c:	2320      	movs	r3, #32
 800279e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode    = GPIO_MODE_AF_OD;
 80027a0:	2312      	movs	r3, #18
 80027a2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull    = GPIO_PULLUP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed             = GPIO_SPEED_FREQ_HIGH;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate         = BUS_I2C2_SDA_AF;
 80027ac:	2304      	movs	r3, #4
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &gpio_init_structure);
 80027b0:	f107 0314 	add.w	r3, r7, #20
 80027b4:	4619      	mov	r1, r3
 80027b6:	4812      	ldr	r0, [pc, #72]	; (8002800 <I2C2_MspInit+0xc8>)
 80027b8:	f003 fc6c 	bl	8006094 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C2_CLK_ENABLE();
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <I2C2_MspInit+0xc4>)
 80027be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027c2:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <I2C2_MspInit+0xc4>)
 80027c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027c8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027cc:	4b0b      	ldr	r3, [pc, #44]	; (80027fc <I2C2_MspInit+0xc4>)
 80027ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C2_FORCE_RESET();
 80027da:	4b08      	ldr	r3, [pc, #32]	; (80027fc <I2C2_MspInit+0xc4>)
 80027dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027de:	4a07      	ldr	r2, [pc, #28]	; (80027fc <I2C2_MspInit+0xc4>)
 80027e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027e4:	6753      	str	r3, [r2, #116]	; 0x74

  /* Release the I2C peripheral clock reset */
  BUS_I2C2_RELEASE_RESET();
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <I2C2_MspInit+0xc4>)
 80027e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <I2C2_MspInit+0xc4>)
 80027ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027f0:	6753      	str	r3, [r2, #116]	; 0x74
}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	; 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	46020c00 	.word	0x46020c00
 8002800:	42021c00 	.word	0x42021c00

08002804 <I2C2_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c  I2C handler
  * @retval None
  */
static void I2C2_MspDeInit(const I2C_HandleTypeDef *hI2c)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C2_SCL_PIN;
 800280c:	2310      	movs	r3, #16
 800280e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, gpio_init_structure.Pin);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4619      	mov	r1, r3
 8002814:	480a      	ldr	r0, [pc, #40]	; (8002840 <I2C2_MspDeInit+0x3c>)
 8002816:	f003 fe15 	bl	8006444 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C2_SDA_PIN;
 800281a:	2320      	movs	r3, #32
 800281c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4619      	mov	r1, r3
 8002822:	4807      	ldr	r0, [pc, #28]	; (8002840 <I2C2_MspDeInit+0x3c>)
 8002824:	f003 fe0e 	bl	8006444 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C2_CLK_DISABLE();
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <I2C2_MspDeInit+0x40>)
 800282a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <I2C2_MspDeInit+0x40>)
 8002830:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002834:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8002838:	bf00      	nop
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	42021c00 	.word	0x42021c00
 8002844:	46020c00 	.word	0x46020c00

08002848 <I2C2_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af04      	add	r7, sp, #16
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	4603      	mov	r3, r0
 8002852:	81fb      	strh	r3, [r7, #14]
 8002854:	460b      	mov	r3, r1
 8002856:	81bb      	strh	r3, [r7, #12]
 8002858:	4613      	mov	r3, r2
 800285a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Write(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 800285c:	8978      	ldrh	r0, [r7, #10]
 800285e:	89ba      	ldrh	r2, [r7, #12]
 8002860:	89f9      	ldrh	r1, [r7, #14]
 8002862:	f242 7310 	movw	r3, #10000	; 0x2710
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	8b3b      	ldrh	r3, [r7, #24]
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	4807      	ldr	r0, [pc, #28]	; (8002890 <I2C2_WriteReg+0x48>)
 8002874:	f003 ffcc 	bl	8006810 <HAL_I2C_Mem_Write>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <I2C2_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800287e:	2300      	movs	r3, #0
 8002880:	e001      	b.n	8002886 <I2C2_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8002882:	f06f 0307 	mvn.w	r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200013e4 	.word	0x200013e4

08002894 <I2C2_ReadReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af04      	add	r7, sp, #16
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	4603      	mov	r3, r0
 800289e:	81fb      	strh	r3, [r7, #14]
 80028a0:	460b      	mov	r3, r1
 80028a2:	81bb      	strh	r3, [r7, #12]
 80028a4:	4613      	mov	r3, r2
 80028a6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c2, DevAddr, Reg, MemAddSize, pData, Length, 10000) == HAL_OK)
 80028a8:	8978      	ldrh	r0, [r7, #10]
 80028aa:	89ba      	ldrh	r2, [r7, #12]
 80028ac:	89f9      	ldrh	r1, [r7, #14]
 80028ae:	f242 7310 	movw	r3, #10000	; 0x2710
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	8b3b      	ldrh	r3, [r7, #24]
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4603      	mov	r3, r0
 80028be:	4807      	ldr	r0, [pc, #28]	; (80028dc <I2C2_ReadReg+0x48>)
 80028c0:	f004 f8ba 	bl	8006a38 <HAL_I2C_Mem_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <I2C2_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e001      	b.n	80028d2 <I2C2_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80028ce:	f06f 0307 	mvn.w	r3, #7
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	200013e4 	.word	0x200013e4

080028e0 <BSP_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_Init(uint32_t Instance)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d903      	bls.n	80028f6 <BSP_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028ee:	f06f 0301 	mvn.w	r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e005      	b.n	8002902 <BSP_RANGING_SENSOR_Init+0x22>
  }
  else
  {
    /* run i2c recovery before probing the device */
    (void)vl53l5cx_i2c_recover();
 80028f6:	f000 f955 	bl	8002ba4 <vl53l5cx_i2c_recover>
    ret = VL53L5CX_Probe(Instance);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8ce 	bl	8002a9c <VL53L5CX_Probe>
 8002900:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002902:	68fb      	ldr	r3, [r7, #12]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <BSP_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_ReadID(const uint32_t Instance, uint32_t *pId)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d903      	bls.n	8002924 <BSP_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800291c:	f06f 0301 	mvn.w	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e012      	b.n	800294a <BSP_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ReadID(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <BSP_RANGING_SENSOR_ReadID+0x48>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	490b      	ldr	r1, [pc, #44]	; (8002958 <BSP_RANGING_SENSOR_ReadID+0x4c>)
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002932:	6839      	ldr	r1, [r7, #0]
 8002934:	4610      	mov	r0, r2
 8002936:	4798      	blx	r3
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	da03      	bge.n	8002946 <BSP_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800293e:	f06f 0304 	mvn.w	r3, #4
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	e001      	b.n	800294a <BSP_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800294a:	68fb      	ldr	r3, [r7, #12]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20001444 	.word	0x20001444
 8002958:	20001438 	.word	0x20001438

0800295c <BSP_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_GetCapabilities(const uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d903      	bls.n	8002974 <BSP_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800296c:	f06f 0301 	mvn.w	r3, #1
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	e012      	b.n	800299a <BSP_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <BSP_RANGING_SENSOR_GetCapabilities+0x48>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	490b      	ldr	r1, [pc, #44]	; (80029a8 <BSP_RANGING_SENSOR_GetCapabilities+0x4c>)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	da03      	bge.n	8002996 <BSP_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800298e:	f06f 0304 	mvn.w	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <BSP_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20001444 	.word	0x20001444
 80029a8:	20001438 	.word	0x20001438

080029ac <BSP_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_ConfigProfile(const uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d903      	bls.n	80029c4 <BSP_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80029bc:	f06f 0301 	mvn.w	r3, #1
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	e012      	b.n	80029ea <BSP_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <BSP_RANGING_SENSOR_ConfigProfile+0x48>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	490b      	ldr	r1, [pc, #44]	; (80029f8 <BSP_RANGING_SENSOR_ConfigProfile+0x4c>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80029d2:	6839      	ldr	r1, [r7, #0]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	da03      	bge.n	80029e6 <BSP_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80029de:	f06f 0304 	mvn.w	r3, #4
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e001      	b.n	80029ea <BSP_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80029ea:	68fb      	ldr	r3, [r7, #12]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	20001444 	.word	0x20001444
 80029f8:	20001438 	.word	0x20001438

080029fc <BSP_RANGING_SENSOR_GetDistance>:
  * @param Instance    Ranging sensor instance.
  * @param pResult    Pointer to the result struct.
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_GetDistance(const uint32_t Instance, RANGING_SENSOR_Result_t *pResult)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d903      	bls.n	8002a14 <BSP_RANGING_SENSOR_GetDistance+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a0c:	f06f 0301 	mvn.w	r3, #1
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	e012      	b.n	8002a3a <BSP_RANGING_SENSOR_GetDistance+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetDistance(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pResult) < 0)
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <BSP_RANGING_SENSOR_GetDistance+0x48>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	490b      	ldr	r1, [pc, #44]	; (8002a48 <BSP_RANGING_SENSOR_GetDistance+0x4c>)
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	4610      	mov	r0, r2
 8002a26:	4798      	blx	r3
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da03      	bge.n	8002a36 <BSP_RANGING_SENSOR_GetDistance+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a2e:	f06f 0304 	mvn.w	r3, #4
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	e001      	b.n	8002a3a <BSP_RANGING_SENSOR_GetDistance+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20001444 	.word	0x20001444
 8002a48:	20001438 	.word	0x20001438

08002a4c <BSP_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t BSP_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d903      	bls.n	8002a64 <BSP_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a5c:	f06f 0301 	mvn.w	r3, #1
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	e012      	b.n	8002a8a <BSP_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Start(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <BSP_RANGING_SENSOR_Start+0x48>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	490b      	ldr	r1, [pc, #44]	; (8002a98 <BSP_RANGING_SENSOR_Start+0x4c>)
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	4610      	mov	r0, r2
 8002a76:	4798      	blx	r3
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da03      	bge.n	8002a86 <BSP_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002a7e:	f06f 0304 	mvn.w	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	e001      	b.n	8002a8a <BSP_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20001444 	.word	0x20001444
 8002a98:	20001438 	.word	0x20001438

08002a9c <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8002aa4:	2352      	movs	r3, #82	; 0x52
 8002aa6:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C2_Init;
 8002aa8:	4b34      	ldr	r3, [pc, #208]	; (8002b7c <VL53L5CX_Probe+0xe0>)
 8002aaa:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C2_DeInit;
 8002aac:	4b34      	ldr	r3, [pc, #208]	; (8002b80 <VL53L5CX_Probe+0xe4>)
 8002aae:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = BSP_I2C2_WriteReg16;
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <VL53L5CX_Probe+0xe8>)
 8002ab2:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = BSP_I2C2_ReadReg16;
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <VL53L5CX_Probe+0xec>)
 8002ab6:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = BSP_GetTick;
 8002ab8:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <VL53L5CX_Probe+0xf0>)
 8002aba:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&(VL53L5CXObj[Instance]), &IOCtx) != VL53L5CX_OK)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f640 1258 	movw	r2, #2392	; 0x958
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	4a32      	ldr	r2, [pc, #200]	; (8002b90 <VL53L5CX_Probe+0xf4>)
 8002ac8:	4413      	add	r3, r2
 8002aca:	f107 020c 	add.w	r2, r7, #12
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 f99c 	bl	8002e0e <VL53L5CX_RegisterBusIO>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <VL53L5CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8002adc:	f06f 0304 	mvn.w	r3, #4
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae2:	e045      	b.n	8002b70 <VL53L5CX_Probe+0xd4>
  }
  else
  {
    VL53L5A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <VL53L5CX_Probe+0xf8>)
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	; (8002b98 <VL53L5CX_Probe+0xfc>)
 8002ae8:	601a      	str	r2, [r3, #0]
    VL53L5A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L5CXObj[Instance]);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f640 1258 	movw	r2, #2392	; 0x958
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <VL53L5CX_Probe+0xf4>)
 8002af6:	441a      	add	r2, r3
 8002af8:	4928      	ldr	r1, [pc, #160]	; (8002b9c <VL53L5CX_Probe+0x100>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* Check if the Component ID is correct, Initialize the sensor and Check the Sensor capabilities */
    if ((VL53L5CX_ReadID(&(VL53L5CXObj[Instance]), &id) != VL53L5CX_OK)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f640 1258 	movw	r2, #2392	; 0x958
 8002b06:	fb02 f303 	mul.w	r3, r2, r3
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <VL53L5CX_Probe+0xf4>)
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f107 0208 	add.w	r2, r7, #8
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fa2a 	bl	8002f6e <VL53L5CX_ReadID>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d118      	bne.n	8002b52 <VL53L5CX_Probe+0xb6>
        || (VL53L5A1_RANGING_SENSOR_Drv->Init(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) != VL53L5CX_OK)
 8002b20:	4b1c      	ldr	r3, [pc, #112]	; (8002b94 <VL53L5CX_Probe+0xf8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	491d      	ldr	r1, [pc, #116]	; (8002b9c <VL53L5CX_Probe+0x100>)
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10c      	bne.n	8002b52 <VL53L5CX_Probe+0xb6>
        || (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance],
 8002b38:	4b16      	ldr	r3, [pc, #88]	; (8002b94 <VL53L5CX_Probe+0xf8>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	4917      	ldr	r1, [pc, #92]	; (8002b9c <VL53L5CX_Probe+0x100>)
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b46:	4916      	ldr	r1, [pc, #88]	; (8002ba0 <VL53L5CX_Probe+0x104>)
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4798      	blx	r3
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <VL53L5CX_Probe+0xbe>
                                                         &VL53L5A1_RANGING_SENSOR_Cap) != VL53L5CX_OK))
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8002b52:	f06f 0304 	mvn.w	r3, #4
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
 8002b58:	e00a      	b.n	8002b70 <VL53L5CX_Probe+0xd4>
    }
    else if (id != VL53L5CX_ID)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f24f 0202 	movw	r2, #61442	; 0xf002
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d003      	beq.n	8002b6c <VL53L5CX_Probe+0xd0>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002b64:	f06f 0306 	mvn.w	r3, #6
 8002b68:	627b      	str	r3, [r7, #36]	; 0x24
 8002b6a:	e001      	b.n	8002b70 <VL53L5CX_Probe+0xd4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	08002045 	.word	0x08002045
 8002b80:	080020b9 	.word	0x080020b9
 8002b84:	08002185 	.word	0x08002185
 8002b88:	080021e1 	.word	0x080021e1
 8002b8c:	0800223d 	.word	0x0800223d
 8002b90:	20001458 	.word	0x20001458
 8002b94:	20001444 	.word	0x20001444
 8002b98:	2000000c 	.word	0x2000000c
 8002b9c:	20001438 	.word	0x20001438
 8002ba0:	20001448 	.word	0x20001448

08002ba4 <vl53l5cx_i2c_recover>:

/**
  * @brief This functions permits to avoid HW reset due to an I2C bug on the device.
  */
static int32_t vl53l5cx_i2c_recover(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8002bae:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <vl53l5cx_i2c_recover+0x10c>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d101      	bne.n	8002bba <vl53l5cx_i2c_recover+0x16>
  {
    return BSP_ERROR_NONE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e075      	b.n	8002ca6 <vl53l5cx_i2c_recover+0x102>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bba:	4b3e      	ldr	r3, [pc, #248]	; (8002cb4 <vl53l5cx_i2c_recover+0x110>)
 8002bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc0:	4a3c      	ldr	r2, [pc, #240]	; (8002cb4 <vl53l5cx_i2c_recover+0x110>)
 8002bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <vl53l5cx_i2c_recover+0x110>)
 8002bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	607b      	str	r3, [r7, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L5A1_LP_PIN;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L5A1_LP_PORT, &GPIO_InitStruct);
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	4619      	mov	r1, r3
 8002bea:	4833      	ldr	r0, [pc, #204]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002bec:	f003 fa52 	bl	8006094 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(VL53L5A1_LP_PORT, VL53L5A1_LP_PIN, GPIO_PIN_SET);
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4830      	ldr	r0, [pc, #192]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002bf6:	f003 fd1b 	bl	8006630 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = BUS_I2C2_SCL_PIN;
 8002bfa:	2310      	movs	r3, #16
 8002bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002bfe:	2311      	movs	r3, #17
 8002c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c02:	2301      	movs	r3, #1
 8002c04:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002c06:	f107 0308 	add.w	r3, r7, #8
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	482a      	ldr	r0, [pc, #168]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c0e:	f003 fa41 	bl	8006094 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BUS_I2C2_SDA_PIN;
 8002c12:	2320      	movs	r3, #32
 8002c14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002c16:	2311      	movs	r3, #17
 8002c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002c1e:	f107 0308 	add.w	r3, r7, #8
 8002c22:	4619      	mov	r1, r3
 8002c24:	4824      	ldr	r0, [pc, #144]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c26:	f003 fa35 	bl	8006094 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2110      	movs	r1, #16
 8002c2e:	4822      	ldr	r0, [pc, #136]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c30:	f003 fcfe 	bl	8006630 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_PIN, GPIO_PIN_SET);
 8002c34:	2201      	movs	r2, #1
 8002c36:	2120      	movs	r1, #32
 8002c38:	481f      	ldr	r0, [pc, #124]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c3a:	f003 fcf9 	bl	8006630 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	77fb      	strb	r3, [r7, #31]
 8002c42:	e012      	b.n	8002c6a <vl53l5cx_i2c_recover+0xc6>
    {
      HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_RESET);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2110      	movs	r1, #16
 8002c48:	481b      	ldr	r0, [pc, #108]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c4a:	f003 fcf1 	bl	8006630 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f003 f89c 	bl	8005d8c <HAL_Delay>
      HAL_GPIO_WritePin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_PIN, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	2110      	movs	r1, #16
 8002c58:	4817      	ldr	r0, [pc, #92]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c5a:	f003 fce9 	bl	8006630 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8002c5e:	2001      	movs	r0, #1
 8002c60:	f003 f894 	bl	8005d8c <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8002c64:	7ffb      	ldrb	r3, [r7, #31]
 8002c66:	3301      	adds	r3, #1
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	7ffb      	ldrb	r3, [r7, #31]
 8002c6c:	2b09      	cmp	r3, #9
 8002c6e:	d9e9      	bls.n	8002c44 <vl53l5cx_i2c_recover+0xa0>
    }
    retry_cnt++;
 8002c70:	7fbb      	ldrb	r3, [r7, #30]
 8002c72:	3301      	adds	r3, #1
 8002c74:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8002c76:	2120      	movs	r1, #32
 8002c78:	480f      	ldr	r0, [pc, #60]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c7a:	f003 fcc1 	bl	8006600 <HAL_GPIO_ReadPin>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <vl53l5cx_i2c_recover+0xe6>
 8002c84:	7fbb      	ldrb	r3, [r7, #30]
 8002c86:	2b06      	cmp	r3, #6
 8002c88:	d9d9      	bls.n	8002c3e <vl53l5cx_i2c_recover+0x9a>

  if (HAL_GPIO_ReadPin(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SDA_PIN) == GPIO_PIN_RESET)
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	480a      	ldr	r0, [pc, #40]	; (8002cb8 <vl53l5cx_i2c_recover+0x114>)
 8002c8e:	f003 fcb7 	bl	8006600 <HAL_GPIO_ReadPin>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <vl53l5cx_i2c_recover+0xfa>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8002c98:	f06f 0304 	mvn.w	r3, #4
 8002c9c:	e003      	b.n	8002ca6 <vl53l5cx_i2c_recover+0x102>
  }

  is_already_init = 1U;
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <vl53l5cx_i2c_recover+0x10c>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20003060 	.word	0x20003060
 8002cb4:	46020c00 	.word	0x46020c00
 8002cb8:	42021c00 	.word	0x42021c00

08002cbc <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689c      	ldr	r4, [r3, #8]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8818      	ldrh	r0, [r3, #0]
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	47a0      	blx	r4
 8002cda:	4603      	mov	r3, r0
 8002cdc:	b2db      	uxtb	r3, r3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3714      	adds	r7, #20
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	807b      	strh	r3, [r7, #2]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685c      	ldr	r4, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	8818      	ldrh	r0, [r3, #0]
 8002cfe:	1c7a      	adds	r2, r7, #1
 8002d00:	8879      	ldrh	r1, [r7, #2]
 8002d02:	2301      	movs	r3, #1
 8002d04:	47a0      	blx	r4
 8002d06:	4603      	mov	r3, r0
 8002d08:	b2db      	uxtb	r3, r3
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd90      	pop	{r4, r7, pc}

08002d12 <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002d12:	b590      	push	{r4, r7, lr}
 8002d14:	b085      	sub	sp, #20
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	607a      	str	r2, [r7, #4]
 8002d1c:	603b      	str	r3, [r7, #0]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	685c      	ldr	r4, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8818      	ldrh	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	8979      	ldrh	r1, [r7, #10]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	47a0      	blx	r4
 8002d34:	4603      	mov	r3, r0
 8002d36:	b2db      	uxtb	r3, r3
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd90      	pop	{r4, r7, pc}

08002d40 <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 8002d40:	b590      	push	{r4, r7, lr}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	607a      	str	r2, [r7, #4]
 8002d4a:	603b      	str	r3, [r7, #0]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	689c      	ldr	r4, [r3, #8]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8818      	ldrh	r0, [r3, #0]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	8979      	ldrh	r1, [r7, #10]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	47a0      	blx	r4
 8002d62:	4603      	mov	r3, r0
 8002d64:	b2db      	uxtb	r3, r3
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd90      	pop	{r4, r7, pc}

08002d6e <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b085      	sub	sp, #20
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	460b      	mov	r3, r1
 8002d78:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	e021      	b.n	8002dc4 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	440b      	add	r3, r1
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	440b      	add	r3, r1
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	021b      	lsls	r3, r3, #8
 8002da4:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	3203      	adds	r2, #3
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	440a      	add	r2, r1
 8002dae:	7812      	ldrb	r2, [r2, #0]
 8002db0:	4313      	orrs	r3, r2
    tmp = (
 8002db2:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4413      	add	r3, r2
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3d9      	bcc.n	8002d80 <SwapBuffer+0x12>
  }
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b084      	sub	sp, #16
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	4798      	blx	r3
 8002dea:	4603      	mov	r3, r0
 8002dec:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 8002dee:	bf00      	nop
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4798      	blx	r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d8f5      	bhi.n	8002df0 <WaitMs+0x16>

  return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <VL53L5CX_RegisterBusIO+0x16>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d103      	bne.n	8002e2c <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8002e24:	f06f 0301 	mvn.w	r3, #1
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e033      	b.n	8002e94 <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	891a      	ldrh	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	891a      	ldrh	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	691a      	ldr	r2, [r3, #16]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	68da      	ldr	r2, [r3, #12]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	695a      	ldr	r2, [r3, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4798      	blx	r3
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	e002      	b.n	8002e94 <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002e94:	68fb      	ldr	r3, [r7, #12]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b084      	sub	sp, #16
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d103      	bne.n	8002eb4 <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8002eac:	f06f 0301 	mvn.w	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e02e      	b.n	8002f12 <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e025      	b.n	8002f12 <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3318      	adds	r3, #24
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f86c 	bl	8003fa8 <vl53l5cx_init>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 8002ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	e019      	b.n	8002f12 <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    pObj->IsBlocking = 0U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
    pObj->IsContinuous = 0U;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
    pObj->IsAmbientEnabled = 0U;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = 0U;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955
    pObj->IsInitialized = 1U;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
    ret = VL53L5CX_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8002f2a:	f06f 0301 	mvn.w	r3, #1
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	e018      	b.n	8002f64 <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 3950 	ldrb.w	r3, [r3, #2384]	; 0x950
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d110      	bne.n	8002f5e <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4798      	blx	r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 8002f48:	f04f 33ff 	mov.w	r3, #4294967295
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	e009      	b.n	8002f64 <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2950 	strb.w	r2, [r3, #2384]	; 0x950
 8002f5c:	e002      	b.n	8002f64 <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 8002f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002f64:	68fb      	ldr	r3, [r7, #12]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <VL53L5CX_ReadID+0x22>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d103      	bne.n	8002f98 <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8002f90:	f06f 0301 	mvn.w	r3, #1
 8002f94:	60fb      	str	r3, [r7, #12]
 8002f96:	e045      	b.n	8003024 <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3318      	adds	r3, #24
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fe9f 	bl	8002ce6 <WrByte>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	461a      	mov	r2, r3
 8002fac:	7afb      	ldrb	r3, [r7, #11]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	f107 020a 	add.w	r2, r7, #10
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe7d 	bl	8002cbc <RdByte>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	7afb      	ldrb	r3, [r7, #11]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3318      	adds	r3, #24
 8002fd0:	f107 0209 	add.w	r2, r7, #9
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff fe70 	bl	8002cbc <RdByte>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	461a      	mov	r2, r3
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3318      	adds	r3, #24
 8002fea:	2202      	movs	r2, #2
 8002fec:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff fe78 	bl	8002ce6 <WrByte>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 8003000:	7afb      	ldrb	r3, [r7, #11]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d108      	bne.n	8003018 <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 8003006:	7abb      	ldrb	r3, [r7, #10]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	7a7a      	ldrb	r2, [r7, #9]
 800300c:	441a      	add	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	e005      	b.n	8003024 <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003024:	68fb      	ldr	r3, [r7, #12]
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 800302e:	b480      	push	{r7}
 8003030:	b085      	sub	sp, #20
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <VL53L5CX_GetCapabilities+0x16>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003044:	f06f 0301 	mvn.w	r3, #1
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e00d      	b.n	8003068 <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2240      	movs	r2, #64	; 0x40
 8003050:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2201      	movs	r2, #1
 8003056:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2200      	movs	r2, #0
 800305c:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003068:	68fb      	ldr	r3, [r7, #12]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
	...

08003078 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01b      	beq.n	80030c4 <VL53L5CX_ConfigProfile+0x4c>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d018      	beq.n	80030c4 <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 80030a4:	7c7b      	ldrb	r3, [r7, #17]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	d822      	bhi.n	80030f2 <VL53L5CX_ConfigProfile+0x7a>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <VL53L5CX_ConfigProfile+0x3c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030cb 	.word	0x080030cb
 80030b8:	080030d5 	.word	0x080030d5
 80030bc:	080030df 	.word	0x080030df
 80030c0:	080030e9 	.word	0x080030e9
    return VL53L5CX_INVALID_PARAM;
 80030c4:	f06f 0301 	mvn.w	r3, #1
 80030c8:	e070      	b.n	80031ac <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 80030ca:	2310      	movs	r3, #16
 80030cc:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 80030ce:	2301      	movs	r3, #1
 80030d0:	74bb      	strb	r3, [r7, #18]
    break;
 80030d2:	e016      	b.n	8003102 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 80030d4:	2310      	movs	r3, #16
 80030d6:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 80030d8:	2303      	movs	r3, #3
 80030da:	74bb      	strb	r3, [r7, #18]
    break;
 80030dc:	e011      	b.n	8003102 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 80030de:	2340      	movs	r3, #64	; 0x40
 80030e0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 80030e2:	2301      	movs	r3, #1
 80030e4:	74bb      	strb	r3, [r7, #18]
    break;
 80030e6:	e00c      	b.n	8003102 <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 80030e8:	2340      	movs	r3, #64	; 0x40
 80030ea:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 80030ec:	2303      	movs	r3, #3
 80030ee:	74bb      	strb	r3, [r7, #18]
    break;
 80030f0:	e007      	b.n	8003102 <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 80030f2:	2300      	movs	r3, #0
 80030f4:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80030f6:	2300      	movs	r3, #0
 80030f8:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 80030fa:	f06f 0301 	mvn.w	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
    break;
 8003100:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	e04f      	b.n	80031ac <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	3318      	adds	r3, #24
 8003110:	7cfa      	ldrb	r2, [r7, #19]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f002 f93a 	bl	800538e <vl53l5cx_set_resolution>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 8003120:	f04f 33ff 	mov.w	r3, #4294967295
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e040      	b.n	80031aa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3318      	adds	r3, #24
 800312c:	7cba      	ldrb	r2, [r7, #18]
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f002 fa56 	bl	80055e2 <vl53l5cx_set_ranging_mode>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 800313c:	f04f 33ff 	mov.w	r3, #4294967295
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e032      	b.n	80031aa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3318      	adds	r3, #24
 8003148:	68f9      	ldr	r1, [r7, #12]
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fa14 	bl	8005578 <vl53l5cx_set_integration_time_ms>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 8003156:	f04f 33ff 	mov.w	r3, #4294967295
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e025      	b.n	80031aa <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3318      	adds	r3, #24
 8003162:	7afa      	ldrb	r2, [r7, #11]
 8003164:	4611      	mov	r1, r2
 8003166:	4618      	mov	r0, r3
 8003168:	f002 f9e5 	bl	8005536 <vl53l5cx_set_ranging_frequency_hz>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
 8003176:	617b      	str	r3, [r7, #20]
 8003178:	e017      	b.n	80031aa <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f883 2954 	strb.w	r2, [r3, #2388]	; 0x954
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f883 2955 	strb.w	r2, [r3, #2389]	; 0x955

    ret = VL53L5CX_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80031aa:	697b      	ldr	r3, [r7, #20]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 80031be:	f06f 0303 	mvn.w	r3, #3
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <VL53L5CX_ConfigIT+0x1a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d103      	bne.n	80031f2 <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80031ea:	f06f 0301 	mvn.w	r3, #1
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	e09f      	b.n	8003332 <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2bff      	cmp	r3, #255	; 0xff
 80031f8:	d113      	bne.n	8003222 <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3318      	adds	r3, #24
 80031fe:	2100      	movs	r1, #0
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fb99 	bl	8005938 <vl53l5cx_set_detection_thresholds_enable>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	7abb      	ldrb	r3, [r7, #10]
 800320c:	4313      	orrs	r3, r2
 800320e:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 8003210:	7abb      	ldrb	r3, [r7, #10]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <VL53L5CX_ConfigIT+0x4c>
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e000      	b.n	800321e <VL53L5CX_ConfigIT+0x4e>
 800321c:	2300      	movs	r3, #0
 800321e:	60fb      	str	r3, [r7, #12]
 8003220:	e087      	b.n	8003332 <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3318      	adds	r3, #24
 8003226:	f107 0209 	add.w	r2, r7, #9
 800322a:	4611      	mov	r1, r2
 800322c:	4618      	mov	r0, r3
 800322e:	f002 f889 	bl	8005344 <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	72fb      	strb	r3, [r7, #11]
 8003236:	e044      	b.n	80032c2 <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 8003238:	7afa      	ldrb	r2, [r7, #11]
 800323a:	4940      	ldr	r1, [pc, #256]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	330a      	adds	r3, #10
 8003248:	7afa      	ldrb	r2, [r7, #11]
 800324a:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 800324c:	7afa      	ldrb	r2, [r7, #11]
 800324e:	493b      	ldr	r1, [pc, #236]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 8003250:	4613      	mov	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4413      	add	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3308      	adds	r3, #8
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	7afa      	ldrb	r2, [r7, #11]
 8003266:	b2d8      	uxtb	r0, r3
 8003268:	4934      	ldr	r1, [pc, #208]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 800326a:	4613      	mov	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4413      	add	r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3309      	adds	r3, #9
 8003276:	4602      	mov	r2, r0
 8003278:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 800327a:	7afa      	ldrb	r2, [r7, #11]
 800327c:	492f      	ldr	r1, [pc, #188]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 800327e:	4613      	mov	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	330b      	adds	r3, #11
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	7afa      	ldrb	r2, [r7, #11]
 8003294:	4618      	mov	r0, r3
 8003296:	4929      	ldr	r1, [pc, #164]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	7afa      	ldrb	r2, [r7, #11]
 80032aa:	4618      	mov	r0, r3
 80032ac:	4923      	ldr	r1, [pc, #140]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3304      	adds	r3, #4
 80032ba:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 80032bc:	7afb      	ldrb	r3, [r7, #11]
 80032be:	3301      	adds	r3, #1
 80032c0:	72fb      	strb	r3, [r7, #11]
 80032c2:	7a7b      	ldrb	r3, [r7, #9]
 80032c4:	7afa      	ldrb	r2, [r7, #11]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d3b6      	bcc.n	8003238 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 80032ca:	7afa      	ldrb	r2, [r7, #11]
 80032cc:	491b      	ldr	r1, [pc, #108]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	330a      	adds	r3, #10
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	7afa      	ldrb	r2, [r7, #11]
 80032de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032e2:	b2d8      	uxtb	r0, r3
 80032e4:	4915      	ldr	r1, [pc, #84]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	330a      	adds	r3, #10
 80032f2:	4602      	mov	r2, r0
 80032f4:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	3318      	adds	r3, #24
 80032fa:	4910      	ldr	r1, [pc, #64]	; (800333c <VL53L5CX_ConfigIT+0x16c>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 fb61 	bl	80059c4 <vl53l5cx_set_detection_thresholds>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	7abb      	ldrb	r3, [r7, #10]
 8003308:	4313      	orrs	r3, r2
 800330a:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3318      	adds	r3, #24
 8003310:	2101      	movs	r1, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f002 fb10 	bl	8005938 <vl53l5cx_set_detection_thresholds_enable>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	7abb      	ldrb	r3, [r7, #10]
 800331e:	4313      	orrs	r3, r2
 8003320:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 8003322:	7abb      	ldrb	r3, [r7, #10]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <VL53L5CX_ConfigIT+0x15e>
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	e000      	b.n	8003330 <VL53L5CX_ConfigIT+0x160>
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003332:	68fb      	ldr	r3, [r7, #12]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20003064 	.word	0x20003064

08003340 <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <VL53L5CX_GetDistance+0x16>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d103      	bne.n	800335e <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003356:	f06f 0301 	mvn.w	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	e019      	b.n	8003392 <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 8003368:	f04f 33ff 	mov.w	r3, #4294967295
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	e010      	b.n	8003392 <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3952 	ldrb.w	r3, [r3, #2386]	; 0x952
 8003376:	2b01      	cmp	r3, #1
 8003378:	d106      	bne.n	8003388 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 800337a:	f241 3188 	movw	r1, #5000	; 0x1388
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f93a 	bl	80035f8 <vl53l5cx_poll_for_measurement>
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	e004      	b.n	8003392 <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 8003388:	2100      	movs	r1, #0
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f934 	bl	80035f8 <vl53l5cx_poll_for_measurement>
 8003390:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d104      	bne.n	80033a2 <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f958 	bl	8003650 <vl53l5cx_get_result>
 80033a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80033a2:	68fb      	ldr	r3, [r7, #12]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d103      	bne.n	80033c4 <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80033bc:	f06f 0301 	mvn.w	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e04c      	b.n	800345e <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3318      	adds	r3, #24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fb51 	bl	8004a70 <vl53l5cx_start_ranging>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d141      	bne.n	8003458 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L5CX_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	60fb      	str	r3, [r7, #12]

    switch (Mode)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d82f      	bhi.n	8003448 <VL53L5CX_Start+0x9c>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <VL53L5CX_Start+0x44>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003401 	.word	0x08003401
 80033f4:	08003413 	.word	0x08003413
 80033f8:	08003425 	.word	0x08003425
 80033fc:	08003437 	.word	0x08003437
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003410:	e025      	b.n	800345e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 1U;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003422:	e01c      	b.n	800345e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003434:	e013      	b.n	800345e <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2953 	strb.w	r2, [r3, #2387]	; 0x953
        pObj->IsBlocking = 0U;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2952 	strb.w	r2, [r3, #2386]	; 0x952
        break;
 8003446:	e00a      	b.n	800345e <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
        ret = VL53L5CX_INVALID_PARAM;
 8003450:	f06f 0301 	mvn.w	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
        break;
 8003456:	e002      	b.n	800345e <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 8003458:	f04f 33ff 	mov.w	r3, #4294967295
 800345c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800345e:	68fb      	ldr	r3, [r7, #12]
}
 8003460:	4618      	mov	r0, r3
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d103      	bne.n	800347e <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003476:	f06f 0301 	mvn.w	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
 800347c:	e01a      	b.n	80034b4 <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 3951 	ldrb.w	r3, [r3, #2385]	; 0x951
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 8003488:	f04f 33ff 	mov.w	r3, #4294967295
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e011      	b.n	80034b4 <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3318      	adds	r3, #24
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fc5f 	bl	8004d58 <vl53l5cx_stop_ranging>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d106      	bne.n	80034ae <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2951 	strb.w	r2, [r3, #2385]	; 0x951
    ret = VL53L5CX_OK;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	e002      	b.n	80034b4 <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 80034ae:	f04f 33ff 	mov.w	r3, #4294967295
 80034b2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d103      	bne.n	80034d6 <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80034ce:	f06f 0301 	mvn.w	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	e016      	b.n	8003504 <VL53L5CX_SetAddress+0x46>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3318      	adds	r3, #24
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	b292      	uxth	r2, r2
 80034e0:	4611      	mov	r1, r2
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 f9cc 	bl	8004880 <vl53l5cx_set_i2c_address>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <VL53L5CX_SetAddress+0x38>
  {
    ret = VL53L5CX_ERROR;
 80034ee:	f04f 33ff 	mov.w	r3, #4294967295
 80034f2:	60fb      	str	r3, [r7, #12]
 80034f4:	e006      	b.n	8003504 <VL53L5CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003504:	68fb      	ldr	r3, [r7, #12]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 800350e:	b480      	push	{r7}
 8003510:	b085      	sub	sp, #20
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
 8003516:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d002      	beq.n	8003524 <VL53L5CX_GetAddress+0x16>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d103      	bne.n	800352c <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003524:	f06f 0301 	mvn.w	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
 800352a:	e006      	b.n	800353a <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	891b      	ldrh	r3, [r3, #8]
 8003530:	461a      	mov	r2, r3
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800353a:	68fb      	ldr	r3, [r7, #12]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003558:	f06f 0301 	mvn.w	r3, #1
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e01a      	b.n	8003596 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d006      	beq.n	8003574 <VL53L5CX_SetPowerMode+0x2c>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d003      	beq.n	8003574 <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 800356c:	f06f 0301 	mvn.w	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	e010      	b.n	8003596 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3318      	adds	r3, #24
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f001 f9f7 	bl	8004972 <vl53l5cx_set_power_mode>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e001      	b.n	8003596 <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d002      	beq.n	80035b6 <VL53L5CX_GetPowerMode+0x16>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80035b6:	f06f 0301 	mvn.w	r3, #1
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	e017      	b.n	80035ee <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3318      	adds	r3, #24
 80035c2:	f107 020b 	add.w	r2, r7, #11
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f001 f98f 	bl	80048ec <vl53l5cx_get_power_mode>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d006      	beq.n	80035e2 <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 80035da:	f04f 33ff 	mov.w	r3, #4294967295
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	e005      	b.n	80035ee <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	461a      	mov	r2, r3
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 8003602:	2300      	movs	r3, #0
 8003604:	73fb      	strb	r3, [r7, #15]

  ret =  VL53L5CX_TIMEOUT;
 8003606:	f06f 0302 	mvn.w	r3, #2
 800360a:	617b      	str	r3, [r7, #20]
  TickStart = pObj->IO.GetTick();
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	4798      	blx	r3
 8003612:	4603      	mov	r3, r0
 8003614:	613b      	str	r3, [r7, #16]

  do
  {
    (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3318      	adds	r3, #24
 800361a:	f107 020f 	add.w	r2, r7, #15
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fc69 	bl	8004ef8 <vl53l5cx_check_data_ready>

    if (NewDataReady == 1U)
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d102      	bne.n	8003632 <vl53l5cx_poll_for_measurement+0x3a>
    {
      ret = VL53L5CX_OK;
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]
      break;
 8003630:	e009      	b.n	8003646 <vl53l5cx_poll_for_measurement+0x4e>
    }
  } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4798      	blx	r3
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	683a      	ldr	r2, [r7, #0]
 8003642:	429a      	cmp	r2, r3
 8003644:	d8e7      	bhi.n	8003616 <vl53l5cx_poll_for_measurement+0x1e>

  return ret;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  static VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <vl53l5cx_get_result+0x16>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d103      	bne.n	800366e <vl53l5cx_get_result+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8003666:	f06f 0301 	mvn.w	r3, #1
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	e0cf      	b.n	800380e <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3318      	adds	r3, #24
 8003672:	f107 0208 	add.w	r2, r7, #8
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f001 fe63 	bl	8005344 <vl53l5cx_get_resolution>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <vl53l5cx_get_result+0x3c>
  {
    ret = VL53L5CX_ERROR;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	e0c0      	b.n	800380e <vl53l5cx_get_result+0x1be>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3318      	adds	r3, #24
 8003690:	4961      	ldr	r1, [pc, #388]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fc80 	bl	8004f98 <vl53l5cx_get_ranging_data>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <vl53l5cx_get_result+0x56>
  {
    ret = VL53L5CX_ERROR;
 800369e:	f04f 33ff 	mov.w	r3, #4294967295
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	e0b3      	b.n	800380e <vl53l5cx_get_result+0x1be>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 80036a6:	7a3b      	ldrb	r3, [r7, #8]
 80036a8:	461a      	mov	r2, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 80036ae:	2300      	movs	r3, #0
 80036b0:	72fb      	strb	r3, [r7, #11]
 80036b2:	e0a5      	b.n	8003800 <vl53l5cx_get_result+0x1b0>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 80036b4:	7afb      	ldrb	r3, [r7, #11]
 80036b6:	7afa      	ldrb	r2, [r7, #11]
 80036b8:	4957      	ldr	r1, [pc, #348]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 80036ba:	440b      	add	r3, r1
 80036bc:	f893 0104 	ldrb.w	r0, [r3, #260]	; 0x104
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	3304      	adds	r3, #4
 80036ce:	4602      	mov	r2, r0
 80036d0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	72bb      	strb	r3, [r7, #10]
 80036d6:	e087      	b.n	80037e8 <vl53l5cx_get_result+0x198>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 80036d8:	7afa      	ldrb	r2, [r7, #11]
 80036da:	7abb      	ldrb	r3, [r7, #10]
 80036dc:	4413      	add	r3, r2
 80036de:	4a4e      	ldr	r2, [pc, #312]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 80036e0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036ec:	7afa      	ldrb	r2, [r7, #11]
 80036ee:	7ab8      	ldrb	r0, [r7, #10]
 80036f0:	461c      	mov	r4, r3
 80036f2:	6839      	ldr	r1, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	4403      	add	r3, r0
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3954 	ldrb.w	r3, [r3, #2388]	; 0x954
 8003708:	2b01      	cmp	r3, #1
 800370a:	d116      	bne.n	800373a <vl53l5cx_get_result+0xea>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 800370c:	7afb      	ldrb	r3, [r7, #11]
 800370e:	4a42      	ldr	r2, [pc, #264]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	7afa      	ldrb	r2, [r7, #11]
 8003718:	7ab8      	ldrb	r0, [r7, #10]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	6839      	ldr	r1, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	4403      	add	r3, r0
 800372c:	3302      	adds	r3, #2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3308      	adds	r3, #8
 8003734:	edc3 7a00 	vstr	s15, [r3]
 8003738:	e00d      	b.n	8003756 <vl53l5cx_get_result+0x106>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 800373a:	7afa      	ldrb	r2, [r7, #11]
 800373c:	7ab8      	ldrb	r0, [r7, #10]
 800373e:	6839      	ldr	r1, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	4403      	add	r3, r0
 8003748:	3302      	adds	r3, #2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3308      	adds	r3, #8
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 3955 	ldrb.w	r3, [r3, #2389]	; 0x955
 800375c:	2b01      	cmp	r3, #1
 800375e:	d119      	bne.n	8003794 <vl53l5cx_get_result+0x144>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003760:	7afa      	ldrb	r2, [r7, #11]
 8003762:	7abb      	ldrb	r3, [r7, #10]
 8003764:	4413      	add	r3, r2
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 8003768:	3350      	adds	r3, #80	; 0x50
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	685b      	ldr	r3, [r3, #4]
          pResult->ZoneResult[i].Signal[j] =
 8003770:	7afa      	ldrb	r2, [r7, #11]
 8003772:	7ab8      	ldrb	r0, [r7, #10]
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 800377c:	6839      	ldr	r1, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	4403      	add	r3, r0
 8003786:	3304      	adds	r3, #4
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	3304      	adds	r3, #4
 800378e:	edc3 7a00 	vstr	s15, [r3]
 8003792:	e00d      	b.n	80037b0 <vl53l5cx_get_result+0x160>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8003794:	7afa      	ldrb	r2, [r7, #11]
 8003796:	7ab8      	ldrb	r0, [r7, #10]
 8003798:	6839      	ldr	r1, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	4403      	add	r3, r0
 80037a2:	3304      	adds	r3, #4
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	3304      	adds	r3, #4
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 80037b0:	7afa      	ldrb	r2, [r7, #11]
 80037b2:	7abb      	ldrb	r3, [r7, #10]
 80037b4:	4413      	add	r3, r2
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 80037b8:	4413      	add	r3, r2
 80037ba:	f893 3304 	ldrb.w	r3, [r3, #772]	; 0x304
 80037be:	727b      	strb	r3, [r7, #9]
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 80037c0:	7a7b      	ldrb	r3, [r7, #9]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 f82a 	bl	800381c <vl53l5cx_map_target_status>
 80037c8:	4603      	mov	r3, r0
 80037ca:	7afa      	ldrb	r2, [r7, #11]
 80037cc:	7ab8      	ldrb	r0, [r7, #10]
 80037ce:	461c      	mov	r4, r3
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	4403      	add	r3, r0
 80037da:	3302      	adds	r3, #2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	605c      	str	r4, [r3, #4]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 80037e2:	7abb      	ldrb	r3, [r7, #10]
 80037e4:	3301      	adds	r3, #1
 80037e6:	72bb      	strb	r3, [r7, #10]
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <vl53l5cx_get_result+0x1c8>)
 80037ec:	4413      	add	r3, r2
 80037ee:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80037f2:	7aba      	ldrb	r2, [r7, #10]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	f4ff af6f 	bcc.w	80036d8 <vl53l5cx_get_result+0x88>
    for (i = 0; i < resolution; i++)
 80037fa:	7afb      	ldrb	r3, [r7, #11]
 80037fc:	3301      	adds	r3, #1
 80037fe:	72fb      	strb	r3, [r7, #11]
 8003800:	7a3b      	ldrb	r3, [r7, #8]
 8003802:	7afa      	ldrb	r2, [r7, #11]
 8003804:	429a      	cmp	r2, r3
 8003806:	f4ff af55 	bcc.w	80036b4 <vl53l5cx_get_result+0x64>
      }
    }

    ret = VL53L5CX_OK;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800380e:	68fb      	ldr	r3, [r7, #12]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bd90      	pop	{r4, r7, pc}
 8003818:	20003364 	.word	0x20003364

0800381c <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	2b05      	cmp	r3, #5
 800382a:	d002      	beq.n	8003832 <vl53l5cx_map_target_status+0x16>
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b09      	cmp	r3, #9
 8003830:	d102      	bne.n	8003838 <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	e007      	b.n	8003848 <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 800383e:	23ff      	movs	r3, #255	; 0xff
 8003840:	73fb      	strb	r3, [r7, #15]
 8003842:	e001      	b.n	8003848 <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8003844:	79fb      	ldrb	r3, [r7, #7]
 8003846:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b084      	sub	sp, #16
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	4608      	mov	r0, r1
 8003860:	4611      	mov	r1, r2
 8003862:	461a      	mov	r2, r3
 8003864:	4603      	mov	r3, r0
 8003866:	70fb      	strb	r3, [r7, #3]
 8003868:	460b      	mov	r3, r1
 800386a:	70bb      	strb	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8003878:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8003880:	78fb      	ldrb	r3, [r7, #3]
 8003882:	8839      	ldrh	r1, [r7, #0]
 8003884:	f7ff fa5c 	bl	8002d40 <RdMulti>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	4313      	orrs	r3, r2
 8003890:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	210a      	movs	r1, #10
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff fa9f 	bl	8002dda <WaitMs>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 80038a6:	7bbb      	ldrb	r3, [r7, #14]
 80038a8:	2bc7      	cmp	r3, #199	; 0xc7
 80038aa:	d904      	bls.n	80038b6 <_vl53l5cx_poll_for_answer+0x60>
		{
			status |= (uint8_t)VL53L5CX_STATUS_TIMEOUT_ERROR;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
			break;
 80038b4:	e01a      	b.n	80038ec <_vl53l5cx_poll_for_answer+0x96>
		}else if((size >= (uint8_t)4) 
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d909      	bls.n	80038d0 <_vl53l5cx_poll_for_answer+0x7a>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 80038c2:	2b7e      	cmp	r3, #126	; 0x7e
 80038c4:	d904      	bls.n	80038d0 <_vl53l5cx_poll_for_answer+0x7a>
		{
			status |= VL53L5CX_MCU_ERROR;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80038cc:	73fb      	strb	r3, [r7, #15]
			break;
 80038ce:	e00d      	b.n	80038ec <_vl53l5cx_poll_for_answer+0x96>
		}
		else
		{
			timeout++;
 80038d0:	7bbb      	ldrb	r3, [r7, #14]
 80038d2:	3301      	adds	r3, #1
 80038d4:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 80038d6:	78bb      	ldrb	r3, [r7, #2]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4413      	add	r3, r2
 80038dc:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80038e0:	7e3b      	ldrb	r3, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	7f3a      	ldrb	r2, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1c5      	bne.n	8003878 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_vl53l5cx_poll_for_mcu_boot>:
 * Inner function, not available outside this file. This function is used to
 * wait for the MCU to boot.
 */
static uint8_t _vl53l5cx_poll_for_mcu_boot(
              VL53L5CX_Configuration      *p_dev)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
   uint8_t go2_status0, go2_status1, status = VL53L5CX_STATUS_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
   uint16_t timeout = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	81bb      	strh	r3, [r7, #12]

   do {
		status |= RdByte(&(p_dev->platform), 0x06, &go2_status0);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f107 020b 	add.w	r2, r7, #11
 800390c:	2106      	movs	r1, #6
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff f9d4 	bl	8002cbc <RdByte>
 8003914:	4603      	mov	r3, r0
 8003916:	461a      	mov	r2, r3
 8003918:	7bfb      	ldrb	r3, [r7, #15]
 800391a:	4313      	orrs	r3, r2
 800391c:	73fb      	strb	r3, [r7, #15]
		if((go2_status0 & (uint8_t)0x80) != (uint8_t)0){
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	b25b      	sxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	da10      	bge.n	8003948 <_vl53l5cx_poll_for_mcu_boot+0x52>
			status |= RdByte(&(p_dev->platform), 0x07, &go2_status1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f107 020a 	add.w	r2, r7, #10
 800392c:	2107      	movs	r1, #7
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff f9c4 	bl	8002cbc <RdByte>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	4313      	orrs	r3, r2
 800393c:	73fb      	strb	r3, [r7, #15]
			status |= go2_status1;
 800393e:	7aba      	ldrb	r2, [r7, #10]
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	4313      	orrs	r3, r2
 8003944:	73fb      	strb	r3, [r7, #15]
			break;
 8003946:	e012      	b.n	800396e <_vl53l5cx_poll_for_mcu_boot+0x78>
		}
		(void)WaitMs(&(p_dev->platform), 1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2101      	movs	r1, #1
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fa44 	bl	8002dda <WaitMs>
		timeout++;
 8003952:	89bb      	ldrh	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	81bb      	strh	r3, [r7, #12]

		if((go2_status0 & (uint8_t)0x1) != (uint8_t)0){
 8003958:	7afb      	ldrb	r3, [r7, #11]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <_vl53l5cx_poll_for_mcu_boot+0x76>
			break;
		}

	}while (timeout < (uint16_t)500);
 8003962:	89bb      	ldrh	r3, [r7, #12]
 8003964:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003968:	d3cd      	bcc.n	8003906 <_vl53l5cx_poll_for_mcu_boot+0x10>
 800396a:	e000      	b.n	800396e <_vl53l5cx_poll_for_mcu_boot+0x78>
			break;
 800396c:	bf00      	nop

   return status;
 800396e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0ea      	sub	sp, #424	; 0x1a8
 800397c:	af02      	add	r7, sp, #8
 800397e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003982:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003986:	6018      	str	r0, [r3, #0]
 8003988:	460a      	mov	r2, r1
 800398a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800398e:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8003992:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 800399a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800399e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80039a2:	4ad9      	ldr	r2, [pc, #868]	; (8003d08 <_vl53l5cx_send_offset_data+0x390>)
 80039a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039a8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 80039ac:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80039b0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80039b4:	4ad5      	ldr	r2, [pc, #852]	; (8003d0c <_vl53l5cx_send_offset_data+0x394>)
 80039b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039ba:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;
	uint16_t k;

	(void)memcpy(p_dev->temp_buffer,
 80039be:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80039c2:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 80039cc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80039d0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 80039d8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80039dc:	4619      	mov	r1, r3
 80039de:	f00a fbdd 	bl	800e19c <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 80039e2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80039e6:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b10      	cmp	r3, #16
 80039ee:	f040 8122 	bne.w	8003c36 <_vl53l5cx_send_offset_data+0x2be>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 80039f2:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 80039f6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8003a00:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a08:	cb03      	ldmia	r3!, {r0, r1}
 8003a0a:	6010      	str	r0, [r2, #0]
 8003a0c:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003a0e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a12:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003a1c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff f9a4 	bl	8002d6e <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8003a26:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a2a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8003a34:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003a38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00a fbad 	bl	800e19c <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8003a42:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a46:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8003a50:	f107 0318 	add.w	r3, r7, #24
 8003a54:	2280      	movs	r2, #128	; 0x80
 8003a56:	4618      	mov	r0, r3
 8003a58:	f00a fba0 	bl	800e19c <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8003a62:	e0ac      	b.n	8003bbe <_vl53l5cx_send_offset_data+0x246>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003a64:	2300      	movs	r3, #0
 8003a66:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8003a6a:	e09c      	b.n	8003ba6 <_vl53l5cx_send_offset_data+0x22e>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8003a6c:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8003a70:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8003a86:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003a8a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	440b      	add	r3, r1
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	1c59      	adds	r1, r3, #1
 8003a96:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003aa2:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8003aa4:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003aa8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	440b      	add	r3, r1
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	0059      	lsls	r1, r3, #1
 8003ab4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003abc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ac0:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8003ac2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003ac6:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	f103 0109 	add.w	r1, r3, #9
 8003ad4:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003adc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ae0:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003ae2:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003ae6:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8003aee:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003af0:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003af4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8003afc:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8003b00:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	005a      	lsls	r2, r3, #1
 8003b0a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b0e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b12:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b16:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 8003b18:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8003b1c:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b30:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003b34:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8003b36:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003b3a:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8003b3e:	00d2      	lsls	r2, r2, #3
 8003b40:	440a      	add	r2, r1
 8003b42:	3204      	adds	r2, #4
 8003b44:	0051      	lsls	r1, r2, #1
 8003b46:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b4a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8003b4e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003b52:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 8003b54:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8003b58:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8003b5c:	00d2      	lsls	r2, r2, #3
 8003b5e:	440a      	add	r2, r1
 8003b60:	0052      	lsls	r2, r2, #1
 8003b62:	f102 0109 	add.w	r1, r2, #9
 8003b66:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003b6a:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8003b6e:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8003b72:	4413      	add	r3, r2
                                  /(int16_t)4;
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da00      	bge.n	8003b7a <_vl53l5cx_send_offset_data+0x202>
 8003b78:	3303      	adds	r3, #3
 8003b7a:	109b      	asrs	r3, r3, #2
 8003b7c:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 8003b7e:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8003b82:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	b209      	sxth	r1, r1
 8003b8c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003b90:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b94:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 8003b98:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8003ba6:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	f77f af5e 	ble.w	8003a6c <_vl53l5cx_send_offset_data+0xf4>
		for (j = 0; j < (int8_t)4; j++)
 8003bb0:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8003bbe:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	f77f af4e 	ble.w	8003a64 <_vl53l5cx_send_offset_data+0xec>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 8003bc8:	f107 0318 	add.w	r3, r7, #24
 8003bcc:	3320      	adds	r3, #32
 8003bce:	2260      	movs	r2, #96	; 0x60
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00a faef 	bl	800e1b6 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 8003bd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003bdc:	3340      	adds	r3, #64	; 0x40
 8003bde:	22c0      	movs	r2, #192	; 0xc0
 8003be0:	2100      	movs	r1, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	f00a fae7 	bl	800e1b6 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 8003be8:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003bec:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8003bf6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f00a facc 	bl	800e19c <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8003c04:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c08:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8003c12:	f107 0118 	add.w	r1, r7, #24
 8003c16:	2280      	movs	r2, #128	; 0x80
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f00a fabf 	bl	800e19c <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8003c1e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c22:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003c2c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff f89c 	bl	8002d6e <SwapBuffer>
	}

	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8003c3c:	e01b      	b.n	8003c76 <_vl53l5cx_send_offset_data+0x2fe>
	{
		p_dev->temp_buffer[k] = p_dev->temp_buffer[k + (uint16_t)8];
 8003c3e:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8003c42:	f103 0208 	add.w	r2, r3, #8
 8003c46:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8003c4a:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8003c4e:	f5a1 71ce 	sub.w	r1, r1, #412	; 0x19c
 8003c52:	6809      	ldr	r1, [r1, #0]
 8003c54:	440a      	add	r2, r1
 8003c56:	f892 1510 	ldrb.w	r1, [r2, #1296]	; 0x510
 8003c5a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8003c5e:	f5a2 72ce 	sub.w	r2, r2, #412	; 0x19c
 8003c62:	6812      	ldr	r2, [r2, #0]
 8003c64:	4413      	add	r3, r2
 8003c66:	460a      	mov	r2, r1
 8003c68:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
	for(k = 0; k < (VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4); k++)
 8003c6c:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8003c70:	3301      	adds	r3, #1
 8003c72:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
 8003c76:	f8b7 319c 	ldrh.w	r3, [r7, #412]	; 0x19c
 8003c7a:	f5b3 7ff2 	cmp.w	r3, #484	; 0x1e4
 8003c7e:	d3de      	bcc.n	8003c3e <_vl53l5cx_send_offset_data+0x2c6>
	}

	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8003c80:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c84:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8003c8e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003c92:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003c96:	cb03      	ldmia	r3!, {r0, r1}
 8003c98:	6010      	str	r0, [r2, #0]
 8003c9a:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 8003c9c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003ca0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003caa:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8003cb4:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 8003cb8:	f642 6118 	movw	r1, #11800	; 0x2e18
 8003cbc:	f7ff f829 	bl	8002d12 <WrMulti>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003cce:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8003cd2:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	23ff      	movs	r3, #255	; 0xff
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2104      	movs	r1, #4
 8003ce6:	6800      	ldr	r0, [r0, #0]
 8003ce8:	f7ff fdb5 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003cfa:	f897 319b 	ldrb.w	r3, [r7, #411]	; 0x19b
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	0800eadc 	.word	0x0800eadc
 8003d0c:	0800eae4 	.word	0x0800eae4

08003d10 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b0ca      	sub	sp, #296	; 0x128
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d1e:	6018      	str	r0, [r3, #0]
 8003d20:	460a      	mov	r2, r1
 8003d22:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d26:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003d2a:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 8003d32:	4a9a      	ldr	r2, [pc, #616]	; (8003f9c <_vl53l5cx_send_xtalk_data+0x28c>)
 8003d34:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003d38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d3c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8003d40:	4a97      	ldr	r2, [pc, #604]	; (8003fa0 <_vl53l5cx_send_xtalk_data+0x290>)
 8003d42:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003d46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d4a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8003d4e:	4b95      	ldr	r3, [pc, #596]	; (8003fa4 <_vl53l5cx_send_xtalk_data+0x294>)
 8003d50:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 8003d54:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d58:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8003d62:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d66:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003d70:	f44f 7242 	mov.w	r2, #776	; 0x308
 8003d74:	4619      	mov	r1, r3
 8003d76:	f00a fa11 	bl	800e19c <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8003d7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d7e:	f2a3 131d 	subw	r3, r3, #285	; 0x11d
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b10      	cmp	r3, #16
 8003d86:	f040 80d2 	bne.w	8003f2e <_vl53l5cx_send_xtalk_data+0x21e>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8003d8a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003d8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8003d9e:	cb03      	ldmia	r3!, {r0, r1}
 8003da0:	6010      	str	r0, [r2, #0]
 8003da2:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8003da4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003da8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 8003db2:	461a      	mov	r2, r3
 8003db4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003db8:	cb03      	ldmia	r3!, {r0, r1}
 8003dba:	6010      	str	r0, [r2, #0]
 8003dbc:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003dbe:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003dc2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003dcc:	f44f 7142 	mov.w	r1, #776	; 0x308
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fe ffcc 	bl	8002d6e <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 8003dd6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003dda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f203 5144 	addw	r1, r3, #1348	; 0x544
 8003de4:	f107 0308 	add.w	r3, r7, #8
 8003de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dec:	4618      	mov	r0, r3
 8003dee:	f00a f9d5 	bl	800e19c <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003df8:	e05d      	b.n	8003eb6 <_vl53l5cx_send_xtalk_data+0x1a6>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8003e00:	e04e      	b.n	8003ea0 <_vl53l5cx_send_xtalk_data+0x190>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 8003e02:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 8003e06:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	005a      	lsls	r2, r3, #1
 8003e10:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 8003e1c:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8003e20:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	1c59      	adds	r1, r3, #1
 8003e2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e30:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e38:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 8003e3a:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8003e3e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	440b      	add	r3, r1
 8003e46:	3304      	adds	r3, #4
 8003e48:	0059      	lsls	r1, r3, #1
 8003e4a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e56:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003e58:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8003e5c:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	f103 0109 	add.w	r1, r3, #9
 8003e6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e6e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e76:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8003e78:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 8003e7c:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 8003e80:	0092      	lsls	r2, r2, #2
 8003e82:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8003e84:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8003e86:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003e8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 8003e92:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 8003ea0:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	ddac      	ble.n	8003e02 <_vl53l5cx_send_xtalk_data+0xf2>
		for (j = 0; j < (int8_t)4; j++)
 8003ea8:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3301      	adds	r3, #1
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003eb6:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	dd9d      	ble.n	8003dfa <_vl53l5cx_send_xtalk_data+0xea>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8003ebe:	f107 0308 	add.w	r3, r7, #8
 8003ec2:	3340      	adds	r3, #64	; 0x40
 8003ec4:	22c0      	movs	r2, #192	; 0xc0
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f00a f974 	bl	800e1b6 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8003ece:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003ed2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8003edc:	f107 0108 	add.w	r1, r7, #8
 8003ee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f00a f959 	bl	800e19c <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003eea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003eee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8003ef8:	f44f 7142 	mov.w	r1, #776	; 0x308
 8003efc:	4618      	mov	r0, r3
 8003efe:	f7fe ff36 	bl	8002d6e <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 8003f02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f203 6344 	addw	r3, r3, #1604	; 0x644
 8003f10:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003f14:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 ,
 8003f16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f1a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003f24:	2204      	movs	r2, #4
 8003f26:	2100      	movs	r1, #0
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f00a f944 	bl	800e1b6 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8003f2e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f32:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f36:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8003f38:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f3c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 8003f46:	f44f 7342 	mov.w	r3, #776	; 0x308
 8003f4a:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 8003f4e:	f7fe fee0 	bl	8002d12 <WrMulti>
 8003f52:	4603      	mov	r3, r0
 8003f54:	461a      	mov	r2, r3
 8003f56:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8003f60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003f64:	f5a3 708e 	sub.w	r0, r3, #284	; 0x11c
 8003f68:	2303      	movs	r3, #3
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	23ff      	movs	r3, #255	; 0xff
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8003f74:	2201      	movs	r2, #1
 8003f76:	2104      	movs	r1, #4
 8003f78:	6800      	ldr	r0, [r0, #0]
 8003f7a:	f7ff fc6c 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	461a      	mov	r2, r3
 8003f82:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 8003f8c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	0800eaec 	.word	0x0800eaec
 8003fa0:	0800eaf4 	.word	0x0800eaf4
 8003fa4:	0001fca0 	.word	0x0001fca0

08003fa8 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08a      	sub	sp, #40	; 0x28
 8003fac:	af04      	add	r7, sp, #16
 8003fae:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8003fb4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003fb8:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a80      	ldr	r2, [pc, #512]	; (80041c4 <vl53l5cx_init+0x21c>)
 8003fc2:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a80      	ldr	r2, [pc, #512]	; (80041c8 <vl53l5cx_init+0x220>)
 8003fc8:	619a      	str	r2, [r3, #24]
	p_dev->is_auto_stop_enabled = (uint8_t)0x0;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2934 	strb.w	r2, [r3, #2356]	; 0x934

	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fe83 	bl	8002ce6 <WrByte>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	2109      	movs	r1, #9
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fe78 	bl	8002ce6 <WrByte>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2240      	movs	r2, #64	; 0x40
 8004004:	210f      	movs	r1, #15
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fe6d 	bl	8002ce6 <WrByte>
 800400c:	4603      	mov	r3, r0
 800400e:	461a      	mov	r2, r3
 8004010:	7dfb      	ldrb	r3, [r7, #23]
 8004012:	4313      	orrs	r3, r2
 8004014:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2203      	movs	r2, #3
 800401a:	210a      	movs	r1, #10
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe fe62 	bl	8002ce6 <WrByte>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	4313      	orrs	r3, r2
 800402a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f107 0216 	add.w	r2, r7, #22
 8004032:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fe40 	bl	8002cbc <RdByte>
 800403c:	4603      	mov	r3, r0
 800403e:	461a      	mov	r2, r3
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	4313      	orrs	r3, r2
 8004044:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	210c      	movs	r1, #12
 800404c:	4618      	mov	r0, r3
 800404e:	f7fe fe4a 	bl	8002ce6 <WrByte>
 8004052:	4603      	mov	r3, r0
 8004054:	461a      	mov	r2, r3
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	4313      	orrs	r3, r2
 800405a:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f240 1101 	movw	r1, #257	; 0x101
 8004064:	4618      	mov	r0, r3
 8004066:	f7fe fe3e 	bl	8002ce6 <WrByte>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	7dfb      	ldrb	r3, [r7, #23]
 8004070:	4313      	orrs	r3, r2
 8004072:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f44f 7181 	mov.w	r1, #258	; 0x102
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fe32 	bl	8002ce6 <WrByte>
 8004082:	4603      	mov	r3, r0
 8004084:	461a      	mov	r2, r3
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	4313      	orrs	r3, r2
 800408a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004094:	4618      	mov	r0, r3
 8004096:	f7fe fe26 	bl	8002ce6 <WrByte>
 800409a:	4603      	mov	r3, r0
 800409c:	461a      	mov	r2, r3
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f244 0102 	movw	r1, #16386	; 0x4002
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fe1a 	bl	8002ce6 <WrByte>
 80040b2:	4603      	mov	r3, r0
 80040b4:	461a      	mov	r2, r3
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f244 0102 	movw	r1, #16386	; 0x4002
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fe0e 	bl	8002ce6 <WrByte>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	7dfb      	ldrb	r3, [r7, #23]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2203      	movs	r2, #3
 80040d8:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fe02 	bl	8002ce6 <WrByte>
 80040e2:	4603      	mov	r3, r0
 80040e4:	461a      	mov	r2, r3
 80040e6:	7dfb      	ldrb	r3, [r7, #23]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f240 1103 	movw	r1, #259	; 0x103
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe fdf6 	bl	8002ce6 <WrByte>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	4313      	orrs	r3, r2
 8004102:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	210c      	movs	r1, #12
 800410a:	4618      	mov	r0, r3
 800410c:	f7fe fdeb 	bl	8002ce6 <WrByte>
 8004110:	4603      	mov	r3, r0
 8004112:	461a      	mov	r2, r3
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	4313      	orrs	r3, r2
 8004118:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2243      	movs	r2, #67	; 0x43
 800411e:	210f      	movs	r1, #15
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe fde0 	bl	8002ce6 <WrByte>
 8004126:	4603      	mov	r3, r0
 8004128:	461a      	mov	r2, r3
 800412a:	7dfb      	ldrb	r3, [r7, #23]
 800412c:	4313      	orrs	r3, r2
 800412e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fe50 	bl	8002dda <WaitMs>
 800413a:	4603      	mov	r3, r0
 800413c:	461a      	mov	r2, r3
 800413e:	7dfb      	ldrb	r3, [r7, #23]
 8004140:	4313      	orrs	r3, r2
 8004142:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2240      	movs	r2, #64	; 0x40
 8004148:	210f      	movs	r1, #15
 800414a:	4618      	mov	r0, r3
 800414c:	f7fe fdcb 	bl	8002ce6 <WrByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	7dfb      	ldrb	r3, [r7, #23]
 8004156:	4313      	orrs	r3, r2
 8004158:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	210a      	movs	r1, #10
 8004160:	4618      	mov	r0, r3
 8004162:	f7fe fdc0 	bl	8002ce6 <WrByte>
 8004166:	4603      	mov	r3, r0
 8004168:	461a      	mov	r2, r3
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	4313      	orrs	r3, r2
 800416e:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2164      	movs	r1, #100	; 0x64
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe fe30 	bl	8002dda <WaitMs>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	7dfb      	ldrb	r3, [r7, #23]
 8004180:	4313      	orrs	r3, r2
 8004182:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fdaa 	bl	8002ce6 <WrByte>
 8004192:	4603      	mov	r3, r0
 8004194:	461a      	mov	r2, r3
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	4313      	orrs	r3, r2
 800419a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 800419c:	2301      	movs	r3, #1
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	23ff      	movs	r3, #255	; 0xff
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	2306      	movs	r3, #6
 80041a6:	2200      	movs	r2, #0
 80041a8:	2101      	movs	r1, #1
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fb53 	bl	8003856 <_vl53l5cx_poll_for_answer>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f040 8354 	bne.w	800486a <vl53l5cx_init+0x8c2>
 80041c2:	e003      	b.n	80041cc <vl53l5cx_init+0x224>
 80041c4:	08023ff8 	.word	0x08023ff8
 80041c8:	08023c2c 	.word	0x08023c2c
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	210e      	movs	r1, #14
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe fd87 	bl	8002ce6 <WrByte>
 80041d8:	4603      	mov	r3, r0
 80041da:	461a      	mov	r2, r3
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
 80041de:	4313      	orrs	r3, r2
 80041e0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fe fd7b 	bl	8002ce6 <WrByte>
 80041f0:	4603      	mov	r3, r0
 80041f2:	461a      	mov	r2, r3
 80041f4:	7dfb      	ldrb	r3, [r7, #23]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	220d      	movs	r2, #13
 80041fe:	2103      	movs	r1, #3
 8004200:	4618      	mov	r0, r3
 8004202:	f7fe fd70 	bl	8002ce6 <WrByte>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	7dfb      	ldrb	r3, [r7, #23]
 800420c:	4313      	orrs	r3, r2
 800420e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004218:	4618      	mov	r0, r3
 800421a:	f7fe fd64 	bl	8002ce6 <WrByte>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	7dfb      	ldrb	r3, [r7, #23]
 8004224:	4313      	orrs	r3, r2
 8004226:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004228:	2310      	movs	r3, #16
 800422a:	9301      	str	r3, [sp, #4]
 800422c:	2310      	movs	r3, #16
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	2321      	movs	r3, #33	; 0x21
 8004232:	2200      	movs	r2, #0
 8004234:	2101      	movs	r1, #1
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff fb0d 	bl	8003856 <_vl53l5cx_poll_for_answer>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	4313      	orrs	r3, r2
 8004244:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fd49 	bl	8002ce6 <WrByte>
 8004254:	4603      	mov	r3, r0
 8004256:	461a      	mov	r2, r3
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	4313      	orrs	r3, r2
 800425c:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f107 0216 	add.w	r2, r7, #22
 8004264:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004268:	4618      	mov	r0, r3
 800426a:	f7fe fd27 	bl	8002cbc <RdByte>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	4313      	orrs	r3, r2
 8004276:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	210c      	movs	r1, #12
 800427e:	4618      	mov	r0, r3
 8004280:	f7fe fd31 	bl	8002ce6 <WrByte>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	7dfb      	ldrb	r3, [r7, #23]
 800428a:	4313      	orrs	r3, r2
 800428c:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004296:	4618      	mov	r0, r3
 8004298:	f7fe fd25 	bl	8002ce6 <WrByte>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	7dfb      	ldrb	r3, [r7, #23]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f240 1101 	movw	r1, #257	; 0x101
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fe fd19 	bl	8002ce6 <WrByte>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fd0d 	bl	8002ce6 <WrByte>
 80042cc:	4603      	mov	r3, r0
 80042ce:	461a      	mov	r2, r3
 80042d0:	7dfb      	ldrb	r3, [r7, #23]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe fd01 	bl	8002ce6 <WrByte>
 80042e4:	4603      	mov	r3, r0
 80042e6:	461a      	mov	r2, r3
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f244 0102 	movw	r1, #16386	; 0x4002
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fcf5 	bl	8002ce6 <WrByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	4313      	orrs	r3, r2
 8004304:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f244 0102 	movw	r1, #16386	; 0x4002
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fce9 	bl	8002ce6 <WrByte>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	4313      	orrs	r3, r2
 800431c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2203      	movs	r2, #3
 8004322:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fcdd 	bl	8002ce6 <WrByte>
 800432c:	4603      	mov	r3, r0
 800432e:	461a      	mov	r2, r3
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	4313      	orrs	r3, r2
 8004334:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2201      	movs	r2, #1
 800433a:	f240 1103 	movw	r1, #259	; 0x103
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fcd1 	bl	8002ce6 <WrByte>
 8004344:	4603      	mov	r3, r0
 8004346:	461a      	mov	r2, r3
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	4313      	orrs	r3, r2
 800434c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f244 010f 	movw	r1, #16399	; 0x400f
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fcc5 	bl	8002ce6 <WrByte>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	4313      	orrs	r3, r2
 8004364:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2243      	movs	r2, #67	; 0x43
 800436a:	f240 211a 	movw	r1, #538	; 0x21a
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fcb9 	bl	8002ce6 <WrByte>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	7dfb      	ldrb	r3, [r7, #23]
 800437a:	4313      	orrs	r3, r2
 800437c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2203      	movs	r2, #3
 8004382:	f240 211a 	movw	r1, #538	; 0x21a
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fcad 	bl	8002ce6 <WrByte>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	4313      	orrs	r3, r2
 8004394:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f240 211a 	movw	r1, #538	; 0x21a
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fca1 	bl	8002ce6 <WrByte>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f240 211a 	movw	r1, #538	; 0x21a
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fc95 	bl	8002ce6 <WrByte>
 80043bc:	4603      	mov	r3, r0
 80043be:	461a      	mov	r2, r3
 80043c0:	7dfb      	ldrb	r3, [r7, #23]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f240 2119 	movw	r1, #537	; 0x219
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fe fc89 	bl	8002ce6 <WrByte>
 80043d4:	4603      	mov	r3, r0
 80043d6:	461a      	mov	r2, r3
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
 80043da:	4313      	orrs	r3, r2
 80043dc:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f240 211b 	movw	r1, #539	; 0x21b
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fe fc7d 	bl	8002ce6 <WrByte>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fc71 	bl	8002ce6 <WrByte>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	7dfb      	ldrb	r3, [r7, #23]
 800440a:	4313      	orrs	r3, r2
 800440c:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f107 0216 	add.w	r2, r7, #22
 8004414:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fc4f 	bl	8002cbc <RdByte>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	4313      	orrs	r3, r2
 8004426:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	210c      	movs	r1, #12
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fc59 	bl	8002ce6 <WrByte>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	4313      	orrs	r3, r2
 800443c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fc4d 	bl	8002ce6 <WrByte>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	7dfb      	ldrb	r3, [r7, #23]
 8004452:	4313      	orrs	r3, r2
 8004454:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2207      	movs	r2, #7
 800445a:	2120      	movs	r1, #32
 800445c:	4618      	mov	r0, r3
 800445e:	f7fe fc42 	bl	8002ce6 <WrByte>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	7dfb      	ldrb	r3, [r7, #23]
 8004468:	4313      	orrs	r3, r2
 800446a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2206      	movs	r2, #6
 8004470:	2120      	movs	r1, #32
 8004472:	4618      	mov	r0, r3
 8004474:	f7fe fc37 	bl	8002ce6 <WrByte>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	7dfb      	ldrb	r3, [r7, #23]
 800447e:	4313      	orrs	r3, r2
 8004480:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2209      	movs	r2, #9
 8004486:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fc2b 	bl	8002ce6 <WrByte>
 8004490:	4603      	mov	r3, r0
 8004492:	461a      	mov	r2, r3
 8004494:	7dfb      	ldrb	r3, [r7, #23]
 8004496:	4313      	orrs	r3, r2
 8004498:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044a0:	4ae1      	ldr	r2, [pc, #900]	; (8004828 <vl53l5cx_init+0x880>)
 80044a2:	2100      	movs	r1, #0
 80044a4:	f7fe fc35 	bl	8002d12 <WrMulti>
 80044a8:	4603      	mov	r3, r0
 80044aa:	461a      	mov	r2, r3
 80044ac:	7dfb      	ldrb	r3, [r7, #23]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	220a      	movs	r2, #10
 80044b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fc13 	bl	8002ce6 <WrByte>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d0:	4ad6      	ldr	r2, [pc, #856]	; (800482c <vl53l5cx_init+0x884>)
 80044d2:	2100      	movs	r1, #0
 80044d4:	f7fe fc1d 	bl	8002d12 <WrMulti>
 80044d8:	4603      	mov	r3, r0
 80044da:	461a      	mov	r2, r3
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	4313      	orrs	r3, r2
 80044e0:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	220b      	movs	r2, #11
 80044e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fe fbfb 	bl	8002ce6 <WrByte>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004500:	4acb      	ldr	r2, [pc, #812]	; (8004830 <vl53l5cx_init+0x888>)
 8004502:	2100      	movs	r1, #0
 8004504:	f7fe fc05 	bl	8002d12 <WrMulti>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	4313      	orrs	r3, r2
 8004510:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fbe3 	bl	8002ce6 <WrByte>
 8004520:	4603      	mov	r3, r0
 8004522:	461a      	mov	r2, r3
 8004524:	7dfb      	ldrb	r3, [r7, #23]
 8004526:	4313      	orrs	r3, r2
 8004528:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004532:	4618      	mov	r0, r3
 8004534:	f7fe fbd7 	bl	8002ce6 <WrByte>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	4313      	orrs	r3, r2
 8004540:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	220d      	movs	r2, #13
 8004546:	2103      	movs	r1, #3
 8004548:	4618      	mov	r0, r3
 800454a:	f7fe fbcc 	bl	8002ce6 <WrByte>
 800454e:	4603      	mov	r3, r0
 8004550:	461a      	mov	r2, r3
 8004552:	7dfb      	ldrb	r3, [r7, #23]
 8004554:	4313      	orrs	r3, r2
 8004556:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fbc0 	bl	8002ce6 <WrByte>
 8004566:	4603      	mov	r3, r0
 8004568:	461a      	mov	r2, r3
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	4313      	orrs	r3, r2
 800456e:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 8004570:	2310      	movs	r3, #16
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2310      	movs	r3, #16
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2321      	movs	r3, #33	; 0x21
 800457a:	2200      	movs	r2, #0
 800457c:	2101      	movs	r1, #1
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7ff f969 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8004584:	4603      	mov	r3, r0
 8004586:	461a      	mov	r2, r3
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	4313      	orrs	r3, r2
 800458c:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 800458e:	7dfb      	ldrb	r3, [r7, #23]
 8004590:	2b00      	cmp	r3, #0
 8004592:	f040 816c 	bne.w	800486e <vl53l5cx_init+0x8c6>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fba1 	bl	8002ce6 <WrByte>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f107 0216 	add.w	r2, r7, #22
 80045b4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fb7f 	bl	8002cbc <RdByte>
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	7dfb      	ldrb	r3, [r7, #23]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	210c      	movs	r1, #12
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fe fb89 	bl	8002ce6 <WrByte>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	4313      	orrs	r3, r2
 80045dc:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fb7d 	bl	8002ce6 <WrByte>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 718a 	mov.w	r1, #276	; 0x114
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fb71 	bl	8002ce6 <WrByte>
 8004604:	4603      	mov	r3, r0
 8004606:	461a      	mov	r2, r3
 8004608:	7dfb      	ldrb	r3, [r7, #23]
 800460a:	4313      	orrs	r3, r2
 800460c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f240 1115 	movw	r1, #277	; 0x115
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fb65 	bl	8002ce6 <WrByte>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	4313      	orrs	r3, r2
 8004624:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2242      	movs	r2, #66	; 0x42
 800462a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe fb59 	bl	8002ce6 <WrByte>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	7dfb      	ldrb	r3, [r7, #23]
 800463a:	4313      	orrs	r3, r2
 800463c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f240 1117 	movw	r1, #279	; 0x117
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe fb4d 	bl	8002ce6 <WrByte>
 800464c:	4603      	mov	r3, r0
 800464e:	461a      	mov	r2, r3
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	4313      	orrs	r3, r2
 8004654:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	210b      	movs	r1, #11
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe fb42 	bl	8002ce6 <WrByte>
 8004662:	4603      	mov	r3, r0
 8004664:	461a      	mov	r2, r3
 8004666:	7dfb      	ldrb	r3, [r7, #23]
 8004668:	4313      	orrs	r3, r2
 800466a:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7fff, &tmp);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f107 0216 	add.w	r2, r7, #22
 8004672:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fb20 	bl	8002cbc <RdByte>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	4313      	orrs	r3, r2
 8004684:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	210c      	movs	r1, #12
 800468c:	4618      	mov	r0, r3
 800468e:	f7fe fb2a 	bl	8002ce6 <WrByte>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	7dfb      	ldrb	r3, [r7, #23]
 8004698:	4313      	orrs	r3, r2
 800469a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	210b      	movs	r1, #11
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fe fb1f 	bl	8002ce6 <WrByte>
 80046a8:	4603      	mov	r3, r0
 80046aa:	461a      	mov	r2, r3
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_mcu_boot(p_dev);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff f91f 	bl	80038f6 <_vl53l5cx_poll_for_mcu_boot>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
 80046be:	4313      	orrs	r3, r2
 80046c0:	75fb      	strb	r3, [r7, #23]
	if(status != (uint8_t)0){
 80046c2:	7dfb      	ldrb	r3, [r7, #23]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f040 80d4 	bne.w	8004872 <vl53l5cx_init+0x8ca>
		goto exit;
	}

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2202      	movs	r2, #2
 80046ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb07 	bl	8002ce6 <WrByte>
 80046d8:	4603      	mov	r3, r0
 80046da:	461a      	mov	r2, r3
 80046dc:	7dfb      	ldrb	r3, [r7, #23]
 80046de:	4313      	orrs	r3, r2
 80046e0:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	2328      	movs	r3, #40	; 0x28
 80046e6:	4a53      	ldr	r2, [pc, #332]	; (8004834 <vl53l5cx_init+0x88c>)
 80046e8:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 80046ec:	f7fe fb11 	bl	8002d12 <WrMulti>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	7dfb      	ldrb	r3, [r7, #23]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 80046fa:	2302      	movs	r3, #2
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	23ff      	movs	r3, #255	; 0xff
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004706:	2200      	movs	r2, #0
 8004708:	2104      	movs	r1, #4
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7ff f8a3 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8004710:	4603      	mov	r3, r0
 8004712:	461a      	mov	r2, r3
 8004714:	7dfb      	ldrb	r3, [r7, #23]
 8004716:	4313      	orrs	r3, r2
 8004718:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 800471a:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8004722:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8004726:	f642 4104 	movw	r1, #11268	; 0x2c04
 800472a:	f7fe fb09 	bl	8002d40 <RdMulti>
 800472e:	4603      	mov	r3, r0
 8004730:	461a      	mov	r2, r3
 8004732:	7dfb      	ldrb	r3, [r7, #23]
 8004734:	4313      	orrs	r3, r2
 8004736:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f103 0020 	add.w	r0, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004744:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004748:	4619      	mov	r1, r3
 800474a:	f009 fd27 	bl	800e19c <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 800474e:	2110      	movs	r1, #16
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff f911 	bl	8003978 <_vl53l5cx_send_offset_data>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	7dfb      	ldrb	r3, [r7, #23]
 800475c:	4313      	orrs	r3, r2
 800475e:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004766:	4a34      	ldr	r2, [pc, #208]	; (8004838 <vl53l5cx_init+0x890>)
 8004768:	4618      	mov	r0, r3
 800476a:	4611      	mov	r1, r2
 800476c:	f44f 7342 	mov.w	r3, #776	; 0x308
 8004770:	461a      	mov	r2, r3
 8004772:	f009 fd13 	bl	800e19c <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8004776:	2110      	movs	r1, #16
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fac9 	bl	8003d10 <_vl53l5cx_send_xtalk_data>
 800477e:	4603      	mov	r3, r0
 8004780:	461a      	mov	r2, r3
 8004782:	7dfb      	ldrb	r3, [r7, #23]
 8004784:	4313      	orrs	r3, r2
 8004786:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5CX firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8004792:	f642 4134 	movw	r1, #11316	; 0x2c34
 8004796:	f7fe fabc 	bl	8002d12 <WrMulti>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80047a4:	2303      	movs	r3, #3
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	23ff      	movs	r3, #255	; 0xff
 80047aa:	9300      	str	r3, [sp, #0]
 80047ac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80047b0:	2201      	movs	r2, #1
 80047b2:	2104      	movs	r1, #4
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff f84e 	bl	8003856 <_vl53l5cx_poll_for_answer>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 80047c4:	f107 0110 	add.w	r1, r7, #16
 80047c8:	2304      	movs	r3, #4
 80047ca:	f64d 3280 	movw	r2, #56192	; 0xdb80
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 ffe8 	bl	80057a4 <vl53l5cx_dci_write_data>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
 80047da:	4313      	orrs	r3, r2
 80047dc:	75fb      	strb	r3, [r7, #23]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 80047de:	f107 010c 	add.w	r1, r7, #12
 80047e2:	2304      	movs	r3, #4
 80047e4:	f64d 1264 	movw	r2, #55652	; 0xd964
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 ffdb 	bl	80057a4 <vl53l5cx_dci_write_data>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	7dfb      	ldrb	r3, [r7, #23]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE,
			(uint16_t)sizeof(single_range));

	tmp = (uint8_t)1;
 80047f8:	2301      	movs	r3, #1
 80047fa:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004802:	2326      	movs	r3, #38	; 0x26
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	2301      	movs	r3, #1
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	f107 0316 	add.w	r3, r7, #22
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	2328      	movs	r3, #40	; 0x28
 8004812:	f24e 1208 	movw	r2, #57608	; 0xe108
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f001 f862 	bl	80058e0 <vl53l5cx_dci_replace_data>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	7dfb      	ldrb	r3, [r7, #23]
 8004822:	4313      	orrs	r3, r2
 8004824:	e00a      	b.n	800483c <vl53l5cx_init+0x894>
 8004826:	bf00      	nop
 8004828:	0800ec2c 	.word	0x0800ec2c
 800482c:	08016c2c 	.word	0x08016c2c
 8004830:	0801ec2c 	.word	0x0801ec2c
 8004834:	08024300 	.word	0x08024300
 8004838:	08023ff8 	.word	0x08023ff8
 800483c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x26);
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8004844:	2325      	movs	r3, #37	; 0x25
 8004846:	9302      	str	r3, [sp, #8]
 8004848:	2301      	movs	r3, #1
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	f107 0316 	add.w	r3, r7, #22
 8004850:	9300      	str	r3, [sp, #0]
 8004852:	2328      	movs	r3, #40	; 0x28
 8004854:	f24e 1208 	movw	r2, #57608	; 0xe108
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f001 f841 	bl	80058e0 <vl53l5cx_dci_replace_data>
 800485e:	4603      	mov	r3, r0
 8004860:	461a      	mov	r2, r3
 8004862:	7dfb      	ldrb	r3, [r7, #23]
 8004864:	4313      	orrs	r3, r2
 8004866:	75fb      	strb	r3, [r7, #23]
 8004868:	e004      	b.n	8004874 <vl53l5cx_init+0x8cc>
		goto exit;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <vl53l5cx_init+0x8cc>
		goto exit;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <vl53l5cx_init+0x8cc>
		goto exit;
 8004872:	bf00      	nop
			VL53L5CX_GLARE_FILTER, 40, (uint8_t*)&tmp, 1, 0x25);

exit:
	return status;
 8004874:	7dfb      	ldrb	r3, [r7, #23]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	460b      	mov	r3, r1
 800488a:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004898:	4618      	mov	r0, r3
 800489a:	f7fe fa24 	bl	8002ce6 <WrByte>
 800489e:	4603      	mov	r3, r0
 80048a0:	461a      	mov	r2, r3
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	085b      	lsrs	r3, r3, #1
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	2104      	movs	r1, #4
 80048b6:	f7fe fa16 	bl	8002ce6 <WrByte>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	887a      	ldrh	r2, [r7, #2]
 80048c8:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fa07 	bl	8002ce6 <WrByte>
 80048d8:	4603      	mov	r3, r0
 80048da:	461a      	mov	r2, r3
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
 80048de:	4313      	orrs	r3, r2
 80048e0:	73fb      	strb	r3, [r7, #15]

	return status;
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004902:	4618      	mov	r0, r3
 8004904:	f7fe f9ef 	bl	8002ce6 <WrByte>
 8004908:	4603      	mov	r3, r0
 800490a:	461a      	mov	r2, r3
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	4313      	orrs	r3, r2
 8004910:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f107 020e 	add.w	r2, r7, #14
 8004918:	2109      	movs	r1, #9
 800491a:	4618      	mov	r0, r3
 800491c:	f7fe f9ce 	bl	8002cbc <RdByte>
 8004920:	4603      	mov	r3, r0
 8004922:	461a      	mov	r2, r3
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	4313      	orrs	r3, r2
 8004928:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 800492a:	7bbb      	ldrb	r3, [r7, #14]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d005      	beq.n	800493c <vl53l5cx_get_power_mode+0x50>
 8004930:	2b04      	cmp	r3, #4
 8004932:	d107      	bne.n	8004944 <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
			break;
 800493a:	e009      	b.n	8004950 <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2200      	movs	r2, #0
 8004940:	701a      	strb	r2, [r3, #0]

			break;
 8004942:	e005      	b.n	8004950 <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 800494a:	23ff      	movs	r3, #255	; 0xff
 800494c:	73fb      	strb	r3, [r7, #15]
			break;
 800494e:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe f9c4 	bl	8002ce6 <WrByte>
 800495e:	4603      	mov	r3, r0
 8004960:	461a      	mov	r2, r3
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	4313      	orrs	r3, r2
 8004966:	73fb      	strb	r3, [r7, #15]

	return status;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af02      	add	r7, sp, #8
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	460b      	mov	r3, r1
 800497c:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 8004982:	f107 030e 	add.w	r3, r7, #14
 8004986:	4619      	mov	r1, r3
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff ffaf 	bl	80048ec <vl53l5cx_get_power_mode>
 800498e:	4603      	mov	r3, r0
 8004990:	461a      	mov	r2, r3
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	4313      	orrs	r3, r2
 8004996:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	429a      	cmp	r2, r3
 800499e:	d061      	beq.n	8004a64 <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d028      	beq.n	80049f8 <vl53l5cx_set_power_mode+0x86>
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d14d      	bne.n	8004a46 <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fe f997 	bl	8002ce6 <WrByte>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	4313      	orrs	r3, r2
 80049c0:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2204      	movs	r2, #4
 80049c6:	2109      	movs	r1, #9
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f98c 	bl	8002ce6 <WrByte>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 80049d8:	2301      	movs	r3, #1
 80049da:	9301      	str	r3, [sp, #4]
 80049dc:	2301      	movs	r3, #1
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2306      	movs	r3, #6
 80049e2:	2200      	movs	r2, #0
 80049e4:	2101      	movs	r1, #1
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fe ff35 	bl	8003856 <_vl53l5cx_poll_for_answer>
 80049ec:	4603      	mov	r3, r0
 80049ee:	461a      	mov	r2, r3
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 80049f6:	e029      	b.n	8004a4c <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe f970 	bl	8002ce6 <WrByte>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	2109      	movs	r1, #9
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7fe f965 	bl	8002ce6 <WrByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8004a26:	2300      	movs	r3, #0
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2306      	movs	r3, #6
 8004a30:	2200      	movs	r2, #0
 8004a32:	2101      	movs	r1, #1
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f7fe ff0e 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8004a44:	e002      	b.n	8004a4c <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 8004a46:	23ff      	movs	r3, #255	; 0xff
 8004a48:	73fb      	strb	r3, [r7, #15]
			break;
 8004a4a:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fe f946 	bl	8002ce6 <WrByte>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8004a70:	b5b0      	push	{r4, r5, r7, lr}
 8004a72:	b09c      	sub	sp, #112	; 0x70
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint16_t tmp;
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8004a7e:	2300      	movs	r3, #0
 8004a80:	653b      	str	r3, [r7, #80]	; 0x50
 8004a82:	2300      	movs	r3, #0
 8004a84:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8004a86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8004a8c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8004a90:	4619      	mov	r1, r3
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fc56 	bl	8005344 <vl53l5cx_get_resolution>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	p_dev->data_read_size = 0;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	22ff      	movs	r2, #255	; 0xff
 8004ab0:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8004ab2:	4ba7      	ldr	r3, [pc, #668]	; (8004d50 <vl53l5cx_start_ranging+0x2e0>)
 8004ab4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8004ab8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8004abe:	4ba5      	ldr	r3, [pc, #660]	; (8004d54 <vl53l5cx_start_ranging+0x2e4>)
 8004ac0:	f107 040c 	add.w	r4, r7, #12
 8004ac4:	461d      	mov	r5, r3
 8004ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004aca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ace:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ad2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8004ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad8:	3308      	adds	r3, #8
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8004adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ade:	3320      	adds	r3, #32
 8004ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8004ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae4:	3340      	adds	r3, #64	; 0x40
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aea:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8004af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004af2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004af6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8004af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8004b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0c:	e073      	b.n	8004bf6 <vl53l5cx_start_ranging+0x186>
	{
		if ((output[i] == (uint8_t)0) 
 8004b0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	3368      	adds	r3, #104	; 0x68
 8004b14:	443b      	add	r3, r7
 8004b16:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d067      	beq.n	8004bee <vl53l5cx_start_ranging+0x17e>
                    || ((output_bh_enable[i/(uint32_t)32]
 8004b1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	3368      	adds	r3, #104	; 0x68
 8004b26:	443b      	add	r3, r7
 8004b28:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8004b2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	fa22 f303 	lsr.w	r3, r2, r3
 8004b36:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d057      	beq.n	8004bee <vl53l5cx_start_ranging+0x17e>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8004b3e:	f107 020c 	add.w	r2, r7, #12
 8004b42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8004b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	f003 030f 	and.w	r3, r3, #15
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d03a      	beq.n	8004bce <vl53l5cx_start_ranging+0x15e>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8004b58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d833      	bhi.n	8004bce <vl53l5cx_start_ranging+0x15e>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8004b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b68:	885b      	ldrh	r3, [r3, #2]
 8004b6a:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d910      	bls.n	8004b94 <vl53l5cx_start_ranging+0x124>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8004b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b74:	885b      	ldrh	r3, [r3, #2]
 8004b76:	f645 028f 	movw	r2, #22671	; 0x588f
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d80a      	bhi.n	8004b94 <vl53l5cx_start_ranging+0x124>
			{
				bh_ptr->size = resolution;
 8004b7e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004b82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b86:	b299      	uxth	r1, r3
 8004b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b8a:	8813      	ldrh	r3, [r2, #0]
 8004b8c:	f361 130f 	bfi	r3, r1, #4, #12
 8004b90:	8013      	strh	r3, [r2, #0]
 8004b92:	e009      	b.n	8004ba8 <vl53l5cx_start_ranging+0x138>
			}
			else
			{
				bh_ptr->size = (uint16_t)((uint16_t)resolution
 8004b94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b9c:	b299      	uxth	r1, r3
 8004b9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ba0:	8813      	ldrh	r3, [r2, #0]
 8004ba2:	f361 130f 	bfi	r3, r1, #4, #12
 8004ba6:	8013      	strh	r3, [r2, #0]
                                  * (uint16_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bae:	7812      	ldrb	r2, [r2, #0]
 8004bb0:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bba:	8812      	ldrh	r2, [r2, #0]
 8004bbc:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004bc0:	b292      	uxth	r2, r2
 8004bc2:	fb01 f202 	mul.w	r2, r1, r2
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	615a      	str	r2, [r3, #20]
 8004bcc:	e009      	b.n	8004be2 <vl53l5cx_start_ranging+0x172>
		}
		else
		{
			p_dev->data_read_size += bh_ptr->size;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bd4:	8812      	ldrh	r2, [r2, #0]
 8004bd6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	615a      	str	r2, [r3, #20]
 8004bec:	e000      	b.n	8004bf0 <vl53l5cx_start_ranging+0x180>
			continue;
 8004bee:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8004bf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bf8:	2b0b      	cmp	r3, #11
 8004bfa:	d988      	bls.n	8004b0e <vl53l5cx_start_ranging+0x9e>
	}
	p_dev->data_read_size += (uint32_t)24;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	f103 0218 	add.w	r2, r3, #24
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 8004c08:	f107 010c 	add.w	r1, r7, #12
 8004c0c:	2330      	movs	r3, #48	; 0x30
 8004c0e:	f64d 1280 	movw	r2, #55680	; 0xd980
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fdc6 	bl	80057a4 <vl53l5cx_dci_write_data>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

	header_config[0] = p_dev->data_read_size;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	653b      	str	r3, [r7, #80]	; 0x50
	header_config[1] = i + (uint32_t)1;
 8004c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c2e:	3301      	adds	r3, #1
 8004c30:	657b      	str	r3, [r7, #84]	; 0x54

	status |= vl53l5cx_dci_write_data(p_dev,
 8004c32:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004c36:	2308      	movs	r3, #8
 8004c38:	f64d 1268 	movw	r2, #55656	; 0xd968
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fdb1 	bl	80057a4 <vl53l5cx_dci_write_data>
 8004c42:	4603      	mov	r3, r0
 8004c44:	461a      	mov	r2, r3
 8004c46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8004c50:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8004c54:	2310      	movs	r3, #16
 8004c56:	f64d 1270 	movw	r2, #55664	; 0xd970
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fda2 	bl	80057a4 <vl53l5cx_dci_write_data>
 8004c60:	4603      	mov	r3, r0
 8004c62:	461a      	mov	r2, r3
 8004c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe f835 	bl	8002ce6 <WrByte>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2205      	movs	r2, #5
 8004c8e:	2109      	movs	r1, #9
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fe f828 	bl	8002ce6 <WrByte>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe f81a 	bl	8002ce6 <WrByte>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END -
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004cc6:	2304      	movs	r3, #4
 8004cc8:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8004ccc:	f7fe f821 	bl	8002d12 <WrMulti>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8004cde:	2303      	movs	r3, #3
 8004ce0:	9301      	str	r3, [sp, #4]
 8004ce2:	23ff      	movs	r3, #255	; 0xff
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8004cea:	2201      	movs	r2, #1
 8004cec:	2104      	movs	r1, #4
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fe fdb1 	bl	8003856 <_vl53l5cx_poll_for_answer>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	/* Read ui range data content and compare if data size is the correct one */
	status |= vl53l5cx_dci_read_data(p_dev,
			(uint8_t*)p_dev->temp_buffer, 0x5440, 12);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
	status |= vl53l5cx_dci_read_data(p_dev,
 8004d08:	230c      	movs	r3, #12
 8004d0a:	f245 4240 	movw	r2, #21568	; 0x5440
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fcbe 	bl	8005690 <vl53l5cx_dci_read_data>
 8004d14:	4603      	mov	r3, r0
 8004d16:	461a      	mov	r2, r3
 8004d18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	(void)memcpy(&tmp, &(p_dev->temp_buffer[0x8]), sizeof(tmp));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	if(tmp != p_dev->data_read_size)
 8004d30:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004d34:	461a      	mov	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d002      	beq.n	8004d44 <vl53l5cx_start_ranging+0x2d4>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8004d3e:	23ff      	movs	r3, #255	; 0xff
 8004d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	}

	return status;
 8004d44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3768      	adds	r7, #104	; 0x68
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d50:	0800eafc 	.word	0x0800eafc
 8004d54:	0800eb0c 	.word	0x0800eb0c

08004d58 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	74fb      	strb	r3, [r7, #19]
 8004d64:	2300      	movs	r3, #0
 8004d66:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f107 020c 	add.w	r2, r7, #12
 8004d76:	2304      	movs	r3, #4
 8004d78:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 8004d7c:	f7fd ffe0 	bl	8002d40 <RdMulti>
 8004d80:	4603      	mov	r3, r0
 8004d82:	461a      	mov	r2, r3
 8004d84:	7dfb      	ldrb	r3, [r7, #23]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if((auto_stop_flag != (uint32_t)0x4FF)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d04d      	beq.n	8004e30 <vl53l5cx_stop_ranging+0xd8>
		&& (p_dev->is_auto_stop_enabled == (uint8_t)1))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3934 	ldrb.w	r3, [r3, #2356]	; 0x934
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d148      	bne.n	8004e30 <vl53l5cx_stop_ranging+0xd8>
	{
		status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd ff9d 	bl	8002ce6 <WrByte>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	7dfb      	ldrb	r3, [r7, #23]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	75fb      	strb	r3, [r7, #23]

		/* Provoke MCU stop */
		status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2216      	movs	r2, #22
 8004dba:	2115      	movs	r1, #21
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fd ff92 	bl	8002ce6 <WrByte>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	7dfb      	ldrb	r3, [r7, #23]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	75fb      	strb	r3, [r7, #23]
		status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	2114      	movs	r1, #20
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fd ff87 	bl	8002ce6 <WrByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	7dfb      	ldrb	r3, [r7, #23]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	75fb      	strb	r3, [r7, #23]

		/* Poll for G02 status 0 MCU stop */
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8004de2:	e021      	b.n	8004e28 <vl53l5cx_stop_ranging+0xd0>
		{
			status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f107 0213 	add.w	r2, r7, #19
 8004dea:	2106      	movs	r1, #6
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fd ff65 	bl	8002cbc <RdByte>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	75fb      	strb	r3, [r7, #23]
			status |= WaitMs(&(p_dev->platform), 10);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	210a      	movs	r1, #10
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fd ffea 	bl	8002dda <WaitMs>
 8004e06:	4603      	mov	r3, r0
 8004e08:	461a      	mov	r2, r3
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	75fb      	strb	r3, [r7, #23]
			timeout++;	/* Timeout reached after 5 seconds */
 8004e10:	8abb      	ldrh	r3, [r7, #20]
 8004e12:	3301      	adds	r3, #1
 8004e14:	82bb      	strh	r3, [r7, #20]

			if(timeout > (uint16_t)500)
 8004e16:	8abb      	ldrh	r3, [r7, #20]
 8004e18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e1c:	d904      	bls.n	8004e28 <vl53l5cx_stop_ranging+0xd0>
			{
				status |= tmp;
 8004e1e:	7cfa      	ldrb	r2, [r7, #19]
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	75fb      	strb	r3, [r7, #23]
				break;
 8004e26:	e003      	b.n	8004e30 <vl53l5cx_stop_ranging+0xd8>
		while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8004e28:	7cfb      	ldrb	r3, [r7, #19]
 8004e2a:	b25b      	sxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dad9      	bge.n	8004de4 <vl53l5cx_stop_ranging+0x8c>
			}
		}
	}

	/* Check GO2 status 1 if status is still OK */
	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f107 0213 	add.w	r2, r7, #19
 8004e36:	2106      	movs	r1, #6
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fd ff3f 	bl	8002cbc <RdByte>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	461a      	mov	r2, r3
 8004e42:	7dfb      	ldrb	r3, [r7, #23]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	75fb      	strb	r3, [r7, #23]
	if((tmp & (uint8_t)0x80) != (uint8_t)0){
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	b25b      	sxtb	r3, r3
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da15      	bge.n	8004e7c <vl53l5cx_stop_ranging+0x124>
		status |= RdByte(&(p_dev->platform), 0x7, &tmp);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f107 0213 	add.w	r2, r7, #19
 8004e56:	2107      	movs	r1, #7
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fd ff2f 	bl	8002cbc <RdByte>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	461a      	mov	r2, r3
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	75fb      	strb	r3, [r7, #23]
		if((tmp != (uint8_t)0x84) && (tmp != (uint8_t)0x85)){
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b84      	cmp	r3, #132	; 0x84
 8004e6c:	d006      	beq.n	8004e7c <vl53l5cx_stop_ranging+0x124>
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b85      	cmp	r3, #133	; 0x85
 8004e72:	d003      	beq.n	8004e7c <vl53l5cx_stop_ranging+0x124>
		   status |= tmp;
 8004e74:	7cfa      	ldrb	r2, [r7, #19]
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fd ff2e 	bl	8002ce6 <WrByte>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	7dfb      	ldrb	r3, [r7, #23]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2114      	movs	r1, #20
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fd ff23 	bl	8002ce6 <WrByte>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	7dfb      	ldrb	r3, [r7, #23]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2115      	movs	r1, #21
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fd ff18 	bl	8002ce6 <WrByte>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2204      	movs	r2, #4
 8004ec4:	2109      	movs	r1, #9
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7fd ff0d 	bl	8002ce6 <WrByte>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fd ff01 	bl	8002ce6 <WrByte>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	7dfb      	ldrb	r3, [r7, #23]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	75fb      	strb	r3, [r7, #23]

	return status;
 8004eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	3718      	adds	r7, #24
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	73fb      	strb	r3, [r7, #15]

	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8004f0e:	2304      	movs	r3, #4
 8004f10:	2100      	movs	r1, #0
 8004f12:	f7fd ff15 	bl	8002d40 <RdMulti>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	7bfb      	ldrb	r3, [r7, #15]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	7c1b      	ldrb	r3, [r3, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d020      	beq.n	8004f70 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8004f34:	2bff      	cmp	r3, #255	; 0xff
 8004f36:	d01b      	beq.n	8004f70 <vl53l5cx_check_data_ready+0x78>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8004f3e:	2b05      	cmp	r3, #5
 8004f40:	d116      	bne.n	8004f70 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8004f48:	f003 0305 	and.w	r3, r3, #5
 8004f4c:	2b05      	cmp	r3, #5
 8004f4e:	d10f      	bne.n	8004f70 <vl53l5cx_check_data_ready+0x78>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <vl53l5cx_check_data_ready+0x78>
			)
	{
		*p_isReady = (uint8_t)1;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	2201      	movs	r2, #1
 8004f62:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	741a      	strb	r2, [r3, #16]
 8004f6e:	e00e      	b.n	8004f8e <vl53l5cx_check_data_ready+0x96>
	}
	else
	{
        if ((p_dev->temp_buffer[3] & (uint8_t)0x80) != (uint8_t)0)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 8004f76:	b25b      	sxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da05      	bge.n	8004f88 <vl53l5cx_check_data_ready+0x90>
        {
        	status |= p_dev->temp_buffer[2];	/* Return GO2 error status */
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	73fb      	strb	r3, [r7, #15]
        }

		*p_isReady = 0;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
	}

	return status;
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	77fb      	strb	r3, [r7, #31]
	union Block_header *bh_ptr;
	uint16_t header_id, footer_id;
	uint32_t i, j, msize;

	status |= RdMulti(&(p_dev->platform), 0x0,
 8004fa6:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	f7fd fec4 	bl	8002d40 <RdMulti>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	7ffb      	ldrb	r3, [r7, #31]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	77fb      	strb	r3, [r7, #31]
	p_dev->streamcount = p_dev->temp_buffer[0];
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	741a      	strb	r2, [r3, #16]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fd fec7 	bl	8002d6e <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 8004fe0:	2310      	movs	r3, #16
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	e0db      	b.n	800519e <vl53l5cx_get_ranging_data+0x206>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	4413      	add	r3, r2
 8004ff0:	60bb      	str	r3, [r7, #8]
		if ((bh_ptr->type > (uint32_t)0x1) 
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d915      	bls.n	800502c <vl53l5cx_get_ranging_data+0x94>
                    && (bh_ptr->type < (uint32_t)0xd))
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b0c      	cmp	r3, #12
 800500c:	d80e      	bhi.n	800502c <vl53l5cx_get_ranging_data+0x94>
		{
			msize = bh_ptr->type * bh_ptr->size;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8005022:	b29b      	uxth	r3, r3
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e005      	b.n	8005038 <vl53l5cx_get_ranging_data+0xa0>
		}
		else
		{
			msize = bh_ptr->size;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	881b      	ldrh	r3, [r3, #0]
 8005030:	f3c3 130b 	ubfx	r3, r3, #4, #12
 8005034:	b29b      	uxth	r3, r3
 8005036:	613b      	str	r3, [r7, #16]
		}

		switch(bh_ptr->idx){
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	885b      	ldrh	r3, [r3, #2]
 800503c:	f24e 0284 	movw	r2, #57476	; 0xe084
 8005040:	4293      	cmp	r3, r2
 8005042:	f000 8088 	beq.w	8005156 <vl53l5cx_get_ranging_data+0x1be>
 8005046:	f24e 0284 	movw	r2, #57476	; 0xe084
 800504a:	4293      	cmp	r3, r2
 800504c:	f300 809f 	bgt.w	800518e <vl53l5cx_get_ranging_data+0x1f6>
 8005050:	f24e 0244 	movw	r2, #57412	; 0xe044
 8005054:	4293      	cmp	r3, r2
 8005056:	d070      	beq.n	800513a <vl53l5cx_get_ranging_data+0x1a2>
 8005058:	f24e 0244 	movw	r2, #57412	; 0xe044
 800505c:	4293      	cmp	r3, r2
 800505e:	f300 8096 	bgt.w	800518e <vl53l5cx_get_ranging_data+0x1f6>
 8005062:	f64d 7244 	movw	r2, #57156	; 0xdf44
 8005066:	4293      	cmp	r3, r2
 8005068:	d059      	beq.n	800511e <vl53l5cx_get_ranging_data+0x186>
 800506a:	f64d 7244 	movw	r2, #57156	; 0xdf44
 800506e:	4293      	cmp	r3, r2
 8005070:	f300 808d 	bgt.w	800518e <vl53l5cx_get_ranging_data+0x1f6>
 8005074:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8005078:	4293      	cmp	r3, r2
 800507a:	d042      	beq.n	8005102 <vl53l5cx_get_ranging_data+0x16a>
 800507c:	f64d 32c4 	movw	r2, #56260	; 0xdbc4
 8005080:	4293      	cmp	r3, r2
 8005082:	f300 8084 	bgt.w	800518e <vl53l5cx_get_ranging_data+0x1f6>
 8005086:	f64d 3284 	movw	r2, #56196	; 0xdb84
 800508a:	4293      	cmp	r3, r2
 800508c:	d02b      	beq.n	80050e6 <vl53l5cx_get_ranging_data+0x14e>
 800508e:	f64d 3284 	movw	r2, #56196	; 0xdb84
 8005092:	4293      	cmp	r3, r2
 8005094:	dc7b      	bgt.n	800518e <vl53l5cx_get_ranging_data+0x1f6>
 8005096:	f64d 0258 	movw	r2, #55384	; 0xd858
 800509a:	4293      	cmp	r3, r2
 800509c:	d069      	beq.n	8005172 <vl53l5cx_get_ranging_data+0x1da>
 800509e:	f64d 0258 	movw	r2, #55384	; 0xd858
 80050a2:	4293      	cmp	r3, r2
 80050a4:	dc73      	bgt.n	800518e <vl53l5cx_get_ranging_data+0x1f6>
 80050a6:	f245 42b4 	movw	r2, #21684	; 0x54b4
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d004      	beq.n	80050b8 <vl53l5cx_get_ranging_data+0x120>
 80050ae:	f245 42d0 	movw	r2, #21712	; 0x54d0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00a      	beq.n	80050cc <vl53l5cx_get_ranging_data+0x134>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 80050b6:	e06a      	b.n	800518e <vl53l5cx_get_ranging_data+0x1f6>
						(int8_t)p_dev->temp_buffer[i + (uint32_t)12];
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	330c      	adds	r3, #12
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4413      	add	r3, r2
 80050c0:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 80050c4:	b25a      	sxtb	r2, r3
				p_results->silicon_temp_degc =
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	701a      	strb	r2, [r3, #0]
				break;
 80050ca:	e061      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->ambient_per_spad,
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	1d18      	adds	r0, r3, #4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	3304      	adds	r3, #4
 80050d4:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4619      	mov	r1, r3
 80050e0:	f009 f85c 	bl	800e19c <memcpy>
				break;
 80050e4:	e054      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->nb_target_detected,
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f503 7082 	add.w	r0, r3, #260	; 0x104
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	3304      	adds	r3, #4
 80050f0:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4619      	mov	r1, r3
 80050fc:	f009 f84e 	bl	800e19c <memcpy>
				break;
 8005100:	e046      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->signal_per_spad,
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	f503 70a2 	add.w	r0, r3, #324	; 0x144
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	3304      	adds	r3, #4
 800510c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4619      	mov	r1, r3
 8005118:	f009 f840 	bl	800e19c <memcpy>
				break;
 800511c:	e038      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->distance_mm,
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f503 7011 	add.w	r0, r3, #580	; 0x244
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	3304      	adds	r3, #4
 8005128:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4619      	mov	r1, r3
 8005134:	f009 f832 	bl	800e19c <memcpy>
				break;
 8005138:	e02a      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->reflectance,
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	f503 7031 	add.w	r0, r3, #708	; 0x2c4
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	3304      	adds	r3, #4
 8005144:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4619      	mov	r1, r3
 8005150:	f009 f824 	bl	800e19c <memcpy>
				break;
 8005154:	e01c      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(p_results->target_status,
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	f503 7041 	add.w	r0, r3, #772	; 0x304
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	3304      	adds	r3, #4
 8005160:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4619      	mov	r1, r3
 800516c:	f009 f816 	bl	800e19c <memcpy>
				break;
 8005170:	e00e      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				(void)memcpy(&p_results->motion_indicator,
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	f503 7051 	add.w	r0, r3, #836	; 0x344
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	3304      	adds	r3, #4
 800517c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4619      	mov	r1, r3
 8005188:	f009 f808 	bl	800e19c <memcpy>
				break;
 800518c:	e000      	b.n	8005190 <vl53l5cx_get_ranging_data+0x1f8>
				break;
 800518e:	bf00      	nop
		}
		i += msize;
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	4413      	add	r3, r2
 8005196:	61bb      	str	r3, [r7, #24]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3304      	adds	r3, #4
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695b      	ldr	r3, [r3, #20]
	for (i = (uint32_t)16; i 
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	f4ff af1e 	bcc.w	8004fe6 <vl53l5cx_get_ranging_data+0x4e>

#ifndef VL53L5CX_USE_RAW_FORMAT

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	e00d      	b.n	80051cc <vl53l5cx_get_ranging_data+0x234>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	0ada      	lsrs	r2, r3, #11
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	440b      	add	r3, r1
 80051c4:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61bb      	str	r3, [r7, #24]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	2b3f      	cmp	r3, #63	; 0x3f
 80051d0:	d9ee      	bls.n	80051b0 <vl53l5cx_get_ranging_data+0x218>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e045      	b.n	8005264 <vl53l5cx_get_ranging_data+0x2cc>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	da00      	bge.n	80051ee <vl53l5cx_get_ranging_data+0x256>
 80051ec:	3303      	adds	r3, #3
 80051ee:	109b      	asrs	r3, r3, #2
 80051f0:	b219      	sxth	r1, r3
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	460a      	mov	r2, r1
 8005200:	809a      	strh	r2, [r3, #4]
		if(p_results->distance_mm[i] < 0)
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	da07      	bge.n	8005226 <vl53l5cx_get_ranging_data+0x28e>
		{
			p_results->distance_mm[i] = 0;
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	2200      	movs	r2, #0
 8005224:	809a      	strh	r2, [r3, #4]
		}
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
		p_results->reflectance[i] /= (uint8_t)2;
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	4413      	add	r3, r2
 800522c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	b2d9      	uxtb	r1, r3
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	4413      	add	r3, r2
 800523c:	f503 7331 	add.w	r3, r3, #708	; 0x2c4
 8005240:	460a      	mov	r2, r1
 8005242:	701a      	strb	r2, [r3, #0]
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	3350      	adds	r3, #80	; 0x50
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	0ada      	lsrs	r2, r3, #11
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	3350      	adds	r3, #80	; 0x50
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	605a      	str	r2, [r3, #4]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	3301      	adds	r3, #1
 8005262:	61bb      	str	r3, [r7, #24]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b3f      	cmp	r3, #63	; 0x3f
 8005268:	d9b6      	bls.n	80051d8 <vl53l5cx_get_ranging_data+0x240>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800526a:	2300      	movs	r3, #0
 800526c:	61bb      	str	r3, [r7, #24]
 800526e:	e01b      	b.n	80052a8 <vl53l5cx_get_ranging_data+0x310>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d110      	bne.n	80052a2 <vl53l5cx_get_ranging_data+0x30a>
			for(j = 0; j < (uint32_t)
 8005280:	2300      	movs	r3, #0
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	e00a      	b.n	800529c <vl53l5cx_get_ranging_data+0x304>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4413      	add	r3, r2
 800528c:	683a      	ldr	r2, [r7, #0]
 800528e:	4413      	add	r3, r2
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	f883 2304 	strb.w	r2, [r3, #772]	; 0x304
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	3301      	adds	r3, #1
 800529a:	617b      	str	r3, [r7, #20]
			for(j = 0; j < (uint32_t)
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0f1      	beq.n	8005286 <vl53l5cx_get_ranging_data+0x2ee>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	3301      	adds	r3, #1
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b3f      	cmp	r3, #63	; 0x3f
 80052ac:	d9e0      	bls.n	8005270 <vl53l5cx_get_ranging_data+0x2d8>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 80052ae:	2300      	movs	r3, #0
 80052b0:	61bb      	str	r3, [r7, #24]
 80052b2:	e012      	b.n	80052da <vl53l5cx_get_ranging_data+0x342>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	33d2      	adds	r3, #210	; 0xd2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <vl53l5cx_get_ranging_data+0x3a8>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	0bda      	lsrs	r2, r3, #15
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	33d2      	adds	r3, #210	; 0xd2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	440b      	add	r3, r1
 80052d2:	609a      	str	r2, [r3, #8]
	for(i = 0; i < (uint32_t)32; i++)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	3301      	adds	r3, #1
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	2b1f      	cmp	r3, #31
 80052de:	d9e9      	bls.n	80052b4 <vl53l5cx_get_ranging_data+0x31c>

#endif

	/* Check if footer id and header id are matching. This allows to detect
	 * corrupted frames */
	header_id = ((uint16_t)(p_dev->temp_buffer[0x8])<<8) & 0xFF00U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	021b      	lsls	r3, r3, #8
 80052ea:	81fb      	strh	r3, [r7, #14]
	header_id |= ((uint16_t)(p_dev->temp_buffer[0x9])) & 0x00FFU;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3519 	ldrb.w	r3, [r3, #1305]	; 0x519
 80052f2:	b29a      	uxth	r2, r3
 80052f4:	89fb      	ldrh	r3, [r7, #14]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	81fb      	strh	r3, [r7, #14]

	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)4]) << 8) & 0xFF00U;
 80052fe:	3b04      	subs	r3, #4
	footer_id = ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 8005308:	b29b      	uxth	r3, r3
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	81bb      	strh	r3, [r7, #12]
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
		- (uint32_t)3])) & 0xFFU;
 8005312:	3b03      	subs	r3, #3
	footer_id |= ((uint16_t)(p_dev->temp_buffer[p_dev->data_read_size
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4413      	add	r3, r2
 8005318:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800531c:	b29a      	uxth	r2, r3
 800531e:	89bb      	ldrh	r3, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	81bb      	strh	r3, [r7, #12]

	if(header_id != footer_id)
 8005324:	89fa      	ldrh	r2, [r7, #14]
 8005326:	89bb      	ldrh	r3, [r7, #12]
 8005328:	429a      	cmp	r2, r3
 800532a:	d003      	beq.n	8005334 <vl53l5cx_get_ranging_data+0x39c>
	{
		status |= VL53L5CX_STATUS_CORRUPTED_FRAME;
 800532c:	7ffb      	ldrb	r3, [r7, #31]
 800532e:	f043 0302 	orr.w	r3, r3, #2
 8005332:	77fb      	strb	r3, [r7, #31]
	}

	return status;
 8005334:	7ffb      	ldrb	r3, [r7, #31]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	80008001 	.word	0x80008001

08005344 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8005358:	2308      	movs	r3, #8
 800535a:	f245 4250 	movw	r2, #21584	; 0x5450
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f996 	bl	8005690 <vl53l5cx_dci_read_data>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	7bfb      	ldrb	r3, [r7, #15]
 800536a:	4313      	orrs	r3, r2
 800536c:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800537a:	fb12 f303 	smulbb	r3, r2, r3
 800537e:	b2da      	uxtb	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	701a      	strb	r2, [r3, #0]

	return status;
 8005384:	7bfb      	ldrb	r3, [r7, #15]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	460b      	mov	r3, r1
 8005398:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d002      	beq.n	80053aa <vl53l5cx_set_resolution+0x1c>
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d055      	beq.n	8005454 <vl53l5cx_set_resolution+0xc6>
 80053a8:	e0a9      	b.n	80054fe <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80053b0:	2310      	movs	r3, #16
 80053b2:	f64a 5238 	movw	r2, #44344	; 0xad38
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f96a 	bl	8005690 <vl53l5cx_dci_read_data>
 80053bc:	4603      	mov	r3, r0
 80053be:	461a      	mov	r2, r3
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2240      	movs	r2, #64	; 0x40
 80053ca:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2240      	movs	r2, #64	; 0x40
 80053d2:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2204      	movs	r2, #4
 80053da:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 80053e4:	2310      	movs	r3, #16
 80053e6:	f64a 5238 	movw	r2, #44344	; 0xad38
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f9da 	bl	80057a4 <vl53l5cx_dci_write_data>
 80053f0:	4603      	mov	r3, r0
 80053f2:	461a      	mov	r2, r3
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8005400:	2308      	movs	r3, #8
 8005402:	f245 4250 	movw	r2, #21584	; 0x5450
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f942 	bl	8005690 <vl53l5cx_dci_read_data>
 800540c:	4603      	mov	r3, r0
 800540e:	461a      	mov	r2, r3
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	4313      	orrs	r3, r2
 8005414:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2204      	movs	r2, #4
 800541a:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2204      	movs	r2, #4
 8005422:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2208      	movs	r2, #8
 800542a:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 800543c:	2308      	movs	r3, #8
 800543e:	f245 4250 	movw	r2, #21584	; 0x5450
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9ae 	bl	80057a4 <vl53l5cx_dci_write_data>
 8005448:	4603      	mov	r3, r0
 800544a:	461a      	mov	r2, r3
 800544c:	7bfb      	ldrb	r3, [r7, #15]
 800544e:	4313      	orrs	r3, r2
 8005450:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8005452:	e057      	b.n	8005504 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 800545a:	2310      	movs	r3, #16
 800545c:	f64a 5238 	movw	r2, #44344	; 0xad38
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f915 	bl	8005690 <vl53l5cx_dci_read_data>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	4313      	orrs	r3, r2
 800546e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2210      	movs	r2, #16
 8005474:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2210      	movs	r2, #16
 800547c:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 800548e:	2310      	movs	r3, #16
 8005490:	f64a 5238 	movw	r2, #44344	; 0xad38
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f985 	bl	80057a4 <vl53l5cx_dci_write_data>
 800549a:	4603      	mov	r3, r0
 800549c:	461a      	mov	r2, r3
 800549e:	7bfb      	ldrb	r3, [r7, #15]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80054aa:	2308      	movs	r3, #8
 80054ac:	f245 4250 	movw	r2, #21584	; 0x5450
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8ed 	bl	8005690 <vl53l5cx_dci_read_data>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461a      	mov	r2, r3
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	4313      	orrs	r3, r2
 80054be:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2208      	movs	r2, #8
 80054c4:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2208      	movs	r2, #8
 80054cc:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2204      	movs	r2, #4
 80054d4:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2204      	movs	r2, #4
 80054dc:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 80054e6:	2308      	movs	r3, #8
 80054e8:	f245 4250 	movw	r2, #21584	; 0x5450
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f959 	bl	80057a4 <vl53l5cx_dci_write_data>
 80054f2:	4603      	mov	r3, r0
 80054f4:	461a      	mov	r2, r3
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 80054fc:	e002      	b.n	8005504 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 80054fe:	237f      	movs	r3, #127	; 0x7f
 8005500:	73fb      	strb	r3, [r7, #15]
			break;
 8005502:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	4619      	mov	r1, r3
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fe fa35 	bl	8003978 <_vl53l5cx_send_offset_data>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	4313      	orrs	r3, r2
 8005516:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	4619      	mov	r1, r3
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fe fbf7 	bl	8003d10 <_vl53l5cx_send_xtalk_data>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	4313      	orrs	r3, r2
 800552a:	73fb      	strb	r3, [r7, #15]

	return status;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b088      	sub	sp, #32
 800553a:	af04      	add	r7, sp, #16
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800554c:	2301      	movs	r3, #1
 800554e:	9302      	str	r3, [sp, #8]
 8005550:	2301      	movs	r3, #1
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	1cfb      	adds	r3, r7, #3
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2304      	movs	r3, #4
 800555a:	f245 4258 	movw	r2, #21592	; 0x5458
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9be 	bl	80058e0 <vl53l5cx_dci_replace_data>
 8005564:	4603      	mov	r3, r0
 8005566:	461a      	mov	r2, r3
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	4313      	orrs	r3, r2
 800556c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 800556e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <vl53l5cx_set_integration_time_ms>:
}

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b088      	sub	sp, #32
 800557c:	af04      	add	r7, sp, #16
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d903      	bls.n	8005598 <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005596:	d904      	bls.n	80055a2 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800559e:	73fb      	strb	r3, [r7, #15]
 80055a0:	e01a      	b.n	80055d8 <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80055a8:	fb02 f303 	mul.w	r3, r2, r3
 80055ac:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80055b4:	2300      	movs	r3, #0
 80055b6:	9302      	str	r3, [sp, #8]
 80055b8:	2304      	movs	r3, #4
 80055ba:	9301      	str	r3, [sp, #4]
 80055bc:	f107 0308 	add.w	r3, r7, #8
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	2314      	movs	r3, #20
 80055c4:	f245 425c 	movw	r2, #21596	; 0x545c
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f989 	bl	80058e0 <vl53l5cx_dci_replace_data>
 80055ce:	4603      	mov	r3, r0
 80055d0:	461a      	mov	r2, r3
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b084      	sub	sp, #16
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
 80055ea:	460b      	mov	r3, r1
 80055ec:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80055fc:	2308      	movs	r3, #8
 80055fe:	f64a 5230 	movw	r2, #44336	; 0xad30
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f844 	bl	8005690 <vl53l5cx_dci_read_data>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	4313      	orrs	r3, r2
 8005610:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d002      	beq.n	800561e <vl53l5cx_set_ranging_mode+0x3c>
 8005618:	2b03      	cmp	r3, #3
 800561a:	d00b      	beq.n	8005634 <vl53l5cx_set_ranging_mode+0x52>
 800561c:	e015      	b.n	800564a <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2203      	movs	r2, #3
 800562a:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
			break;
 8005632:	e00d      	b.n	8005650 <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2203      	movs	r2, #3
 8005638:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8005644:	2301      	movs	r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
			break;
 8005648:	e002      	b.n	8005650 <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 800564a:	237f      	movs	r3, #127	; 0x7f
 800564c:	73fb      	strb	r3, [r7, #15]
			break;
 800564e:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8005656:	2308      	movs	r3, #8
 8005658:	f64a 5230 	movw	r2, #44336	; 0xad30
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f8a1 	bl	80057a4 <vl53l5cx_dci_write_data>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	4313      	orrs	r3, r2
 800566a:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 800566c:	f107 0108 	add.w	r1, r7, #8
 8005670:	2304      	movs	r3, #4
 8005672:	f64d 1264 	movw	r2, #55652	; 0xd964
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f894 	bl	80057a4 <vl53l5cx_dci_write_data>
 800567c:	4603      	mov	r3, r0
 800567e:	461a      	mov	r2, r3
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	4313      	orrs	r3, r2
 8005684:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	; 0x30
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	330c      	adds	r3, #12
 80056a8:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 80056aa:	4a3d      	ldr	r2, [pc, #244]	; (80057a0 <vl53l5cx_dci_read_data+0x110>)
 80056ac:	f107 0314 	add.w	r3, r7, #20
 80056b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80056b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80056bc:	d903      	bls.n	80056c6 <vl53l5cx_dci_read_data+0x36>
	{
		status |= VL53L5CX_STATUS_ERROR;
 80056be:	23ff      	movs	r3, #255	; 0xff
 80056c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80056c4:	e065      	b.n	8005792 <vl53l5cx_dci_read_data+0x102>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	0a1b      	lsrs	r3, r3, #8
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	111b      	asrs	r3, r3, #4
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 80056dc:	887b      	ldrh	r3, [r7, #2]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	011b      	lsls	r3, r3, #4
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 80056e6:	68f8      	ldr	r0, [r7, #12]
 80056e8:	f107 0214 	add.w	r2, r7, #20
 80056ec:	230c      	movs	r3, #12
 80056ee:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 80056f2:	f7fd fb0e 	bl	8002d12 <WrMulti>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80056fe:	4313      	orrs	r3, r2
 8005700:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005704:	2303      	movs	r3, #3
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	23ff      	movs	r3, #255	; 0xff
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005710:	2201      	movs	r2, #1
 8005712:	2104      	movs	r1, #4
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7fe f89e 	bl	8003856 <_vl53l5cx_poll_for_answer>
 800571a:	4603      	mov	r3, r0
 800571c:	461a      	mov	r2, r3
 800571e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005722:	4313      	orrs	r3, r2
 8005724:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005728:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	f642 4104 	movw	r1, #11268	; 0x2c04
 8005736:	f7fd fb03 	bl	8002d40 <RdMulti>
 800573a:	4603      	mov	r3, r0
 800573c:	461a      	mov	r2, r3
 800573e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005742:	4313      	orrs	r3, r2
 8005744:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 800574e:	887b      	ldrh	r3, [r7, #2]
 8005750:	330c      	adds	r3, #12
 8005752:	b29b      	uxth	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fd fb09 	bl	8002d6e <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 800575c:	2300      	movs	r3, #0
 800575e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005760:	e011      	b.n	8005786 <vl53l5cx_dci_read_data+0xf6>
			data[i] = p_dev->temp_buffer[i + 4];
 8005762:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005766:	1d1a      	adds	r2, r3, #4
 8005768:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	440b      	add	r3, r1
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	440a      	add	r2, r1
 8005774:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8005778:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 800577a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800577e:	b29b      	uxth	r3, r3
 8005780:	3301      	adds	r3, #1
 8005782:	b29b      	uxth	r3, r3
 8005784:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005786:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800578a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800578e:	429a      	cmp	r2, r3
 8005790:	dbe7      	blt.n	8005762 <vl53l5cx_dci_read_data+0xd2>
		}
	}

	return status;
 8005792:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8005796:	4618      	mov	r0, r3
 8005798:	3728      	adds	r7, #40	; 0x28
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	0800eb3c 	.word	0x0800eb3c

080057a4 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	; 0x30
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80057bc:	2300      	movs	r3, #0
 80057be:	753b      	strb	r3, [r7, #20]
 80057c0:	2300      	movs	r3, #0
 80057c2:	757b      	strb	r3, [r7, #21]
 80057c4:	2300      	movs	r3, #0
 80057c6:	75bb      	strb	r3, [r7, #22]
 80057c8:	230f      	movs	r3, #15
 80057ca:	75fb      	strb	r3, [r7, #23]
 80057cc:	2305      	movs	r3, #5
 80057ce:	763b      	strb	r3, [r7, #24]
 80057d0:	2301      	movs	r3, #1
 80057d2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	3308      	adds	r3, #8
 80057d8:	121b      	asrs	r3, r3, #8
 80057da:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80057dc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	3308      	adds	r3, #8
 80057e4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 80057e6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 80057e8:	887b      	ldrh	r3, [r7, #2]
 80057ea:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 80057ee:	3334      	adds	r3, #52	; 0x34
 80057f0:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	f5b3 6f83 	cmp.w	r3, #1048	; 0x418
 80057f8:	d903      	bls.n	8005802 <vl53l5cx_dci_write_data+0x5e>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 80057fa:	23ff      	movs	r3, #255	; 0xff
 80057fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005800:	e068      	b.n	80058d4 <vl53l5cx_dci_write_data+0x130>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	0a1b      	lsrs	r3, r3, #8
 8005806:	b2db      	uxtb	r3, r3
 8005808:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	111b      	asrs	r3, r3, #4
 8005814:	b2db      	uxtb	r3, r3
 8005816:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8005818:	887b      	ldrh	r3, [r7, #2]
 800581a:	b2db      	uxtb	r3, r3
 800581c:	011b      	lsls	r3, r3, #4
 800581e:	b2db      	uxtb	r3, r3
 8005820:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8005822:	887b      	ldrh	r3, [r7, #2]
 8005824:	4619      	mov	r1, r3
 8005826:	68b8      	ldr	r0, [r7, #8]
 8005828:	f7fd faa1 	bl	8002d6e <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 800582c:	887b      	ldrh	r3, [r7, #2]
 800582e:	3b01      	subs	r3, #1
 8005830:	b29b      	uxth	r3, r3
 8005832:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005834:	e012      	b.n	800585c <vl53l5cx_dci_write_data+0xb8>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8005836:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	441a      	add	r2, r3
 800583e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005842:	3304      	adds	r3, #4
 8005844:	7811      	ldrb	r1, [r2, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	460a      	mov	r2, r1
 800584c:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8005850:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29b      	uxth	r3, r3
 800585a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800585c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8005860:	2b00      	cmp	r3, #0
 8005862:	dae8      	bge.n	8005836 <vl53l5cx_dci_write_data+0x92>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 800586e:	887b      	ldrh	r3, [r7, #2]
 8005870:	3304      	adds	r3, #4
 8005872:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4413      	add	r3, r2
 800587a:	461a      	mov	r2, r3
 800587c:	f107 0314 	add.w	r3, r7, #20
 8005880:	cb03      	ldmia	r3!, {r0, r1}
 8005882:	6010      	str	r0, [r2, #0]
 8005884:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8005886:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 800588e:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8005890:	330c      	adds	r3, #12
 8005892:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8005894:	f7fd fa3d 	bl	8002d12 <WrMulti>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80058a6:	2303      	movs	r3, #3
 80058a8:	9301      	str	r3, [sp, #4]
 80058aa:	23ff      	movs	r3, #255	; 0xff
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80058b2:	2201      	movs	r2, #1
 80058b4:	2104      	movs	r1, #4
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7fd ffcd 	bl	8003856 <_vl53l5cx_poll_for_answer>
 80058bc:	4603      	mov	r3, r0
 80058be:	461a      	mov	r2, r3
 80058c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058c4:	4313      	orrs	r3, r2
 80058c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 80058ca:	887b      	ldrh	r3, [r7, #2]
 80058cc:	4619      	mov	r1, r3
 80058ce:	68b8      	ldr	r0, [r7, #8]
 80058d0:	f7fd fa4d 	bl	8002d6e <SwapBuffer>
	}

	return status;
 80058d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3728      	adds	r7, #40	; 0x28
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 80058f2:	887b      	ldrh	r3, [r7, #2]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fec9 	bl	8005690 <vl53l5cx_dci_read_data>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	4313      	orrs	r3, r2
 8005906:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8005908:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005910:	6a39      	ldr	r1, [r7, #32]
 8005912:	4618      	mov	r0, r3
 8005914:	f008 fc42 	bl	800e19c <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8005918:	887b      	ldrh	r3, [r7, #2]
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	68b9      	ldr	r1, [r7, #8]
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f7ff ff40 	bl	80057a4 <vl53l5cx_dci_write_data>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	7dfb      	ldrb	r3, [r7, #23]
 800592a:	4313      	orrs	r3, r2
 800592c:	75fb      	strb	r3, [r7, #23]

	return status;
 800592e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af04      	add	r7, sp, #16
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8005948:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800594c:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d104      	bne.n	800595e <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8005954:	2301      	movs	r3, #1
 8005956:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8005958:	2304      	movs	r3, #4
 800595a:	73bb      	strb	r3, [r7, #14]
 800595c:	e003      	b.n	8005966 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 800595e:	2300      	movs	r3, #0
 8005960:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8005962:	230c      	movs	r3, #12
 8005964:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800596c:	2300      	movs	r3, #0
 800596e:	9302      	str	r3, [sp, #8]
 8005970:	2304      	movs	r3, #4
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	f107 0308 	add.w	r3, r7, #8
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	2308      	movs	r3, #8
 800597c:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f7ff ffad 	bl	80058e0 <vl53l5cx_dci_replace_data>
 8005986:	4603      	mov	r3, r0
 8005988:	461a      	mov	r2, r3
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	4313      	orrs	r3, r2
 800598e:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8005996:	2311      	movs	r3, #17
 8005998:	9302      	str	r3, [sp, #8]
 800599a:	2301      	movs	r3, #1
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	f107 030e 	add.w	r3, r7, #14
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2314      	movs	r3, #20
 80059a6:	f245 4288 	movw	r2, #21640	; 0x5488
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ff98 	bl	80058e0 <vl53l5cx_dci_replace_data>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 80059d2:	4aab      	ldr	r2, [pc, #684]	; (8005c80 <vl53l5cx_set_detection_thresholds+0x2bc>)
 80059d4:	f107 030c 	add.w	r3, r7, #12
 80059d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059dc:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 80059e0:	2300      	movs	r3, #0
 80059e2:	75fb      	strb	r3, [r7, #23]
 80059e4:	e128      	b.n	8005c38 <vl53l5cx_set_detection_thresholds+0x274>
	{
		switch(p_thresholds[i].measurement)
 80059e6:	7dfa      	ldrb	r2, [r7, #23]
 80059e8:	4613      	mov	r3, r2
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	461a      	mov	r2, r3
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	4413      	add	r3, r2
 80059f6:	7a1b      	ldrb	r3, [r3, #8]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	2b12      	cmp	r3, #18
 80059fc:	f200 8118 	bhi.w	8005c30 <vl53l5cx_set_detection_thresholds+0x26c>
 8005a00:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <vl53l5cx_set_detection_thresholds+0x44>)
 8005a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a06:	bf00      	nop
 8005a08:	08005a55 	.word	0x08005a55
 8005a0c:	08005aa3 	.word	0x08005aa3
 8005a10:	08005c31 	.word	0x08005c31
 8005a14:	08005af1 	.word	0x08005af1
 8005a18:	08005c31 	.word	0x08005c31
 8005a1c:	08005c31 	.word	0x08005c31
 8005a20:	08005c31 	.word	0x08005c31
 8005a24:	08005b3f 	.word	0x08005b3f
 8005a28:	08005c31 	.word	0x08005c31
 8005a2c:	08005c31 	.word	0x08005c31
 8005a30:	08005c31 	.word	0x08005c31
 8005a34:	08005c31 	.word	0x08005c31
 8005a38:	08005b8d 	.word	0x08005b8d
 8005a3c:	08005c31 	.word	0x08005c31
 8005a40:	08005c31 	.word	0x08005c31
 8005a44:	08005c31 	.word	0x08005c31
 8005a48:	08005c31 	.word	0x08005c31
 8005a4c:	08005c31 	.word	0x08005c31
 8005a50:	08005bdb 	.word	0x08005bdb
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8005a54:	7dfa      	ldrb	r2, [r7, #23]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	461a      	mov	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4413      	add	r3, r2
 8005a64:	6819      	ldr	r1, [r3, #0]
 8005a66:	7dfa      	ldrb	r2, [r7, #23]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	461a      	mov	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	4413      	add	r3, r2
 8005a76:	008a      	lsls	r2, r1, #2
 8005a78:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8005a7a:	7dfa      	ldrb	r2, [r7, #23]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	461a      	mov	r2, r3
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	4413      	add	r3, r2
 8005a8a:	6859      	ldr	r1, [r3, #4]
 8005a8c:	7dfa      	ldrb	r2, [r7, #23]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	461a      	mov	r2, r3
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	008a      	lsls	r2, r1, #2
 8005a9e:	605a      	str	r2, [r3, #4]
				break;
 8005aa0:	e0c7      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8005aa2:	7dfa      	ldrb	r2, [r7, #23]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	461a      	mov	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	6819      	ldr	r1, [r3, #0]
 8005ab4:	7dfa      	ldrb	r2, [r7, #23]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	02ca      	lsls	r2, r1, #11
 8005ac6:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8005ac8:	7dfa      	ldrb	r2, [r7, #23]
 8005aca:	4613      	mov	r3, r2
 8005acc:	005b      	lsls	r3, r3, #1
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	7dfa      	ldrb	r2, [r7, #23]
 8005adc:	4613      	mov	r3, r2
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	4413      	add	r3, r2
 8005aea:	02ca      	lsls	r2, r1, #11
 8005aec:	605a      	str	r2, [r3, #4]
				break;
 8005aee:	e0a0      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8005af0:	7dfa      	ldrb	r2, [r7, #23]
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	461a      	mov	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	4413      	add	r3, r2
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	7dfa      	ldrb	r2, [r7, #23]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	4413      	add	r3, r2
 8005b12:	01ca      	lsls	r2, r1, #7
 8005b14:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8005b16:	7dfa      	ldrb	r2, [r7, #23]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	461a      	mov	r2, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	4413      	add	r3, r2
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	7dfa      	ldrb	r2, [r7, #23]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	461a      	mov	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	01ca      	lsls	r2, r1, #7
 8005b3a:	605a      	str	r2, [r3, #4]
				break;
 8005b3c:	e079      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8005b3e:	7dfa      	ldrb	r2, [r7, #23]
 8005b40:	4613      	mov	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	461a      	mov	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	7dfa      	ldrb	r2, [r7, #23]
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4413      	add	r3, r2
 8005b60:	02ca      	lsls	r2, r1, #11
 8005b62:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8005b64:	7dfa      	ldrb	r2, [r7, #23]
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	461a      	mov	r2, r3
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	4413      	add	r3, r2
 8005b74:	6859      	ldr	r1, [r3, #4]
 8005b76:	7dfa      	ldrb	r2, [r7, #23]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	461a      	mov	r2, r3
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	02ca      	lsls	r2, r1, #11
 8005b88:	605a      	str	r2, [r3, #4]
				break;
 8005b8a:	e052      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8005b8c:	7dfa      	ldrb	r2, [r7, #23]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	461a      	mov	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	6819      	ldr	r1, [r3, #0]
 8005b9e:	7dfa      	ldrb	r2, [r7, #23]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	005b      	lsls	r3, r3, #1
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	461a      	mov	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	4413      	add	r3, r2
 8005bae:	020a      	lsls	r2, r1, #8
 8005bb0:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8005bb2:	7dfa      	ldrb	r2, [r7, #23]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	6859      	ldr	r1, [r3, #4]
 8005bc4:	7dfa      	ldrb	r2, [r7, #23]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	461a      	mov	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	020a      	lsls	r2, r1, #8
 8005bd6:	605a      	str	r2, [r3, #4]
				break;
 8005bd8:	e02b      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8005bda:	7dfa      	ldrb	r2, [r7, #23]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	461a      	mov	r2, r3
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	7df9      	ldrb	r1, [r7, #23]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	440b      	add	r3, r1
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	4419      	add	r1, r3
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	041b      	lsls	r3, r3, #16
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8005c04:	7dfa      	ldrb	r2, [r7, #23]
 8005c06:	4613      	mov	r3, r2
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	4413      	add	r3, r2
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	7df9      	ldrb	r1, [r7, #23]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	440b      	add	r3, r1
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	4619      	mov	r1, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	4419      	add	r1, r3
 8005c26:	4613      	mov	r3, r2
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	1a9b      	subs	r3, r3, r2
 8005c2c:	604b      	str	r3, [r1, #4]
				break;
 8005c2e:	e000      	b.n	8005c32 <vl53l5cx_set_detection_thresholds+0x26e>
			default:
				break;
 8005c30:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	3301      	adds	r3, #1
 8005c36:	75fb      	strb	r3, [r7, #23]
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8005c3c:	f67f aed3 	bls.w	80059e6 <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8005c40:	f107 010c 	add.w	r1, r7, #12
 8005c44:	2308      	movs	r3, #8
 8005c46:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fdaa 	bl	80057a4 <vl53l5cx_dci_write_data>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	7dbb      	ldrb	r3, [r7, #22]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 8005c5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c5e:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fd9d 	bl	80057a4 <vl53l5cx_dci_write_data>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7dbb      	ldrb	r3, [r7, #22]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 8005c74:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	0800eb48 	.word	0x0800eb48

08005c84 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005c88:	4b11      	ldr	r3, [pc, #68]	; (8005cd0 <HAL_Init+0x4c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <HAL_Init+0x4c>)
 8005c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005c94:	2003      	movs	r0, #3
 8005c96:	f000 f94f 	bl	8005f38 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005c9a:	f003 ffb3 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	4b0c      	ldr	r3, [pc, #48]	; (8005cd4 <HAL_Init+0x50>)
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	490b      	ldr	r1, [pc, #44]	; (8005cd8 <HAL_Init+0x54>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb0:	4a0a      	ldr	r2, [pc, #40]	; (8005cdc <HAL_Init+0x58>)
 8005cb2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005cb4:	200f      	movs	r0, #15
 8005cb6:	f000 f813 	bl	8005ce0 <HAL_InitTick>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e002      	b.n	8005cca <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005cc4:	f7fb fb40 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	40022000 	.word	0x40022000
 8005cd4:	46020c00 	.word	0x46020c00
 8005cd8:	0800eb50 	.word	0x0800eb50
 8005cdc:	20000008 	.word	0x20000008

08005ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8005ce8:	4b15      	ldr	r3, [pc, #84]	; (8005d40 <HAL_InitTick+0x60>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e021      	b.n	8005d38 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005cf4:	4b13      	ldr	r3, [pc, #76]	; (8005d44 <HAL_InitTick+0x64>)
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	4b11      	ldr	r3, [pc, #68]	; (8005d40 <HAL_InitTick+0x60>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 f939 	bl	8005f82 <HAL_SYSTICK_Config>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e00e      	b.n	8005d38 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d80a      	bhi.n	8005d36 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d20:	2200      	movs	r2, #0
 8005d22:	6879      	ldr	r1, [r7, #4]
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	f000 f911 	bl	8005f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005d2c:	4a06      	ldr	r2, [pc, #24]	; (8005d48 <HAL_InitTick+0x68>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000048 	.word	0x20000048
 8005d44:	20000008 	.word	0x20000008
 8005d48:	20000044 	.word	0x20000044

08005d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005d50:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <HAL_IncTick+0x20>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_IncTick+0x24>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	4a04      	ldr	r2, [pc, #16]	; (8005d70 <HAL_IncTick+0x24>)
 8005d5e:	6013      	str	r3, [r2, #0]
}
 8005d60:	bf00      	nop
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000048 	.word	0x20000048
 8005d70:	20003734 	.word	0x20003734

08005d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
  return uwTick;
 8005d78:	4b03      	ldr	r3, [pc, #12]	; (8005d88 <HAL_GetTick+0x14>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20003734 	.word	0x20003734

08005d8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d94:	f7ff ffee 	bl	8005d74 <HAL_GetTick>
 8005d98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da4:	d005      	beq.n	8005db2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005da6:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <HAL_Delay+0x44>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4413      	add	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005db2:	bf00      	nop
 8005db4:	f7ff ffde 	bl	8005d74 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d8f7      	bhi.n	8005db4 <HAL_Delay+0x28>
  {
  }
}
 8005dc4:	bf00      	nop
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000048 	.word	0x20000048

08005dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f003 0307 	and.w	r3, r3, #7
 8005de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <__NVIC_SetPriorityGrouping+0x44>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005df0:	4013      	ands	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e06:	4a04      	ldr	r2, [pc, #16]	; (8005e18 <__NVIC_SetPriorityGrouping+0x44>)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	60d3      	str	r3, [r2, #12]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr
 8005e18:	e000ed00 	.word	0xe000ed00

08005e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <__NVIC_GetPriorityGrouping+0x18>)
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	0a1b      	lsrs	r3, r3, #8
 8005e26:	f003 0307 	and.w	r3, r3, #7
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	e000ed00 	.word	0xe000ed00

08005e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	6039      	str	r1, [r7, #0]
 8005e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	db0a      	blt.n	8005e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	b2da      	uxtb	r2, r3
 8005e50:	490c      	ldr	r1, [pc, #48]	; (8005e84 <__NVIC_SetPriority+0x4c>)
 8005e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e56:	0112      	lsls	r2, r2, #4
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e60:	e00a      	b.n	8005e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4908      	ldr	r1, [pc, #32]	; (8005e88 <__NVIC_SetPriority+0x50>)
 8005e68:	79fb      	ldrb	r3, [r7, #7]
 8005e6a:	f003 030f 	and.w	r3, r3, #15
 8005e6e:	3b04      	subs	r3, #4
 8005e70:	0112      	lsls	r2, r2, #4
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	440b      	add	r3, r1
 8005e76:	761a      	strb	r2, [r3, #24]
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	e000e100 	.word	0xe000e100
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b089      	sub	sp, #36	; 0x24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f1c3 0307 	rsb	r3, r3, #7
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	bf28      	it	cs
 8005eaa:	2304      	movcs	r3, #4
 8005eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	2b06      	cmp	r3, #6
 8005eb4:	d902      	bls.n	8005ebc <NVIC_EncodePriority+0x30>
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	3b03      	subs	r3, #3
 8005eba:	e000      	b.n	8005ebe <NVIC_EncodePriority+0x32>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	401a      	ands	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	43d9      	mvns	r1, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ee4:	4313      	orrs	r3, r2
         );
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f04:	d301      	bcc.n	8005f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f06:	2301      	movs	r3, #1
 8005f08:	e00f      	b.n	8005f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f0a:	4a0a      	ldr	r2, [pc, #40]	; (8005f34 <SysTick_Config+0x40>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005f12:	210f      	movs	r1, #15
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	f7ff ff8e 	bl	8005e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <SysTick_Config+0x40>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <SysTick_Config+0x40>)
 8005f24:	2207      	movs	r2, #7
 8005f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	e000e010 	.word	0xe000e010

08005f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff ff47 	bl	8005dd4 <__NVIC_SetPriorityGrouping>
}
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b086      	sub	sp, #24
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	4603      	mov	r3, r0
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	607a      	str	r2, [r7, #4]
 8005f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f5c:	f7ff ff5e 	bl	8005e1c <__NVIC_GetPriorityGrouping>
 8005f60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	68b9      	ldr	r1, [r7, #8]
 8005f66:	6978      	ldr	r0, [r7, #20]
 8005f68:	f7ff ff90 	bl	8005e8c <NVIC_EncodePriority>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	4611      	mov	r1, r2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff ff5f 	bl	8005e38 <__NVIC_SetPriority>
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff ffb2 	bl	8005ef4 <SysTick_Config>
 8005f90:	4603      	mov	r3, r0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b084      	sub	sp, #16
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8005fa2:	f7ff fee7 	bl	8005d74 <HAL_GetTick>
 8005fa6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d101      	bne.n	8005fb2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e06b      	b.n	800608a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d008      	beq.n	8005fd0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2220      	movs	r2, #32
 8005fc2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e05c      	b.n	800608a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0204 	orr.w	r2, r2, #4
 8005fde:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005fe8:	e020      	b.n	800602c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005fea:	f7ff fec3 	bl	8005d74 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b05      	cmp	r3, #5
 8005ff6:	d919      	bls.n	800602c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ffc:	f043 0210 	orr.w	r2, r3, #16
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2203      	movs	r2, #3
 8006008:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800601c:	2201      	movs	r2, #1
 800601e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e02e      	b.n	800608a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d0d7      	beq.n	8005fea <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695a      	ldr	r2, [r3, #20]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f042 0202 	orr.w	r2, r2, #2
 8006048:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2204      	movs	r2, #4
 800604e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800605a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d007      	beq.n	8006080 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006074:	2201      	movs	r2, #1
 8006076:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2200      	movs	r2, #0
 800607e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800609e:	2300      	movs	r3, #0
 80060a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80060a6:	e1ba      	b.n	800641e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	2101      	movs	r1, #1
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	fa01 f303 	lsl.w	r3, r1, r3
 80060b4:	4013      	ands	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 81aa 	beq.w	8006418 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a55      	ldr	r2, [pc, #340]	; (800621c <HAL_GPIO_Init+0x188>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d15d      	bne.n	8006188 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80060d2:	2201      	movs	r2, #1
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	4013      	ands	r3, r2
 80060e0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0201 	and.w	r2, r3, #1
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69fa      	ldr	r2, [r7, #28]
 80060fa:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80060fc:	4a48      	ldr	r2, [pc, #288]	; (8006220 <HAL_GPIO_Init+0x18c>)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006104:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006106:	4a46      	ldr	r2, [pc, #280]	; (8006220 <HAL_GPIO_Init+0x18c>)
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	00db      	lsls	r3, r3, #3
 800610c:	4413      	add	r3, r2
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	08da      	lsrs	r2, r3, #3
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	3208      	adds	r2, #8
 800611a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800611e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f003 0307 	and.w	r3, r3, #7
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	220f      	movs	r2, #15
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	69fa      	ldr	r2, [r7, #28]
 8006132:	4013      	ands	r3, r2
 8006134:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	220b      	movs	r2, #11
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	69fa      	ldr	r2, [r7, #28]
 8006146:	4313      	orrs	r3, r2
 8006148:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	08da      	lsrs	r2, r3, #3
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3208      	adds	r2, #8
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	4013      	ands	r3, r2
 800616e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	2202      	movs	r2, #2
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	69fa      	ldr	r2, [r7, #28]
 800617c:	4313      	orrs	r3, r2
 800617e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e067      	b.n	8006258 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	2b02      	cmp	r3, #2
 800618e:	d003      	beq.n	8006198 <HAL_GPIO_Init+0x104>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b12      	cmp	r3, #18
 8006196:	d145      	bne.n	8006224 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	08da      	lsrs	r2, r3, #3
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	3208      	adds	r2, #8
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	220f      	movs	r2, #15
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f003 0307 	and.w	r3, r3, #7
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	69fa      	ldr	r2, [r7, #28]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	08da      	lsrs	r2, r3, #3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	3208      	adds	r2, #8
 80061de:	69f9      	ldr	r1, [r7, #28]
 80061e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	005b      	lsls	r3, r3, #1
 80061ee:	2203      	movs	r2, #3
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69fa      	ldr	r2, [r7, #28]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f003 0203 	and.w	r2, r3, #3
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	4313      	orrs	r3, r2
 8006210:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	e01e      	b.n	8006258 <HAL_GPIO_Init+0x1c4>
 800621a:	bf00      	nop
 800621c:	46020000 	.word	0x46020000
 8006220:	08024328 	.word	0x08024328
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	2203      	movs	r2, #3
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	43db      	mvns	r3, r3
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	4013      	ands	r3, r2
 800623a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f003 0203 	and.w	r2, r3, #3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	4313      	orrs	r3, r2
 8006250:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	69fa      	ldr	r2, [r7, #28]
 8006256:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d00b      	beq.n	8006278 <HAL_GPIO_Init+0x1e4>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d007      	beq.n	8006278 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800626c:	2b11      	cmp	r3, #17
 800626e:	d003      	beq.n	8006278 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	2b12      	cmp	r3, #18
 8006276:	d130      	bne.n	80062da <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	2203      	movs	r2, #3
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	43db      	mvns	r3, r3
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	4013      	ands	r3, r2
 800628e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	68da      	ldr	r2, [r3, #12]
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	4313      	orrs	r3, r2
 80062a0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80062ae:	2201      	movs	r2, #1
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	fa02 f303 	lsl.w	r3, r2, r3
 80062b6:	43db      	mvns	r3, r3
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	4013      	ands	r3, r2
 80062bc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	091b      	lsrs	r3, r3, #4
 80062c4:	f003 0201 	and.w	r2, r3, #1
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	69fa      	ldr	r2, [r7, #28]
 80062d8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	2b03      	cmp	r3, #3
 80062e0:	d017      	beq.n	8006312 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	2203      	movs	r2, #3
 80062ee:	fa02 f303 	lsl.w	r3, r2, r3
 80062f2:	43db      	mvns	r3, r3
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	4013      	ands	r3, r2
 80062f8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	fa02 f303 	lsl.w	r3, r2, r3
 8006306:	69fa      	ldr	r2, [r7, #28]
 8006308:	4313      	orrs	r3, r2
 800630a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d07c      	beq.n	8006418 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800631e:	4a47      	ldr	r2, [pc, #284]	; (800643c <HAL_GPIO_Init+0x3a8>)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	3318      	adds	r3, #24
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	220f      	movs	r2, #15
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	43db      	mvns	r3, r3
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	4013      	ands	r3, r2
 8006340:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	0a9a      	lsrs	r2, r3, #10
 8006346:	4b3e      	ldr	r3, [pc, #248]	; (8006440 <HAL_GPIO_Init+0x3ac>)
 8006348:	4013      	ands	r3, r2
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	f002 0203 	and.w	r2, r2, #3
 8006350:	00d2      	lsls	r2, r2, #3
 8006352:	4093      	lsls	r3, r2
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	4313      	orrs	r3, r2
 8006358:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800635a:	4938      	ldr	r1, [pc, #224]	; (800643c <HAL_GPIO_Init+0x3a8>)
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	089b      	lsrs	r3, r3, #2
 8006360:	3318      	adds	r3, #24
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006368:	4b34      	ldr	r3, [pc, #208]	; (800643c <HAL_GPIO_Init+0x3a8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	43db      	mvns	r3, r3
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	4013      	ands	r3, r2
 8006376:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8006384:	69fa      	ldr	r2, [r7, #28]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800638c:	4a2b      	ldr	r2, [pc, #172]	; (800643c <HAL_GPIO_Init+0x3a8>)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8006392:	4b2a      	ldr	r3, [pc, #168]	; (800643c <HAL_GPIO_Init+0x3a8>)
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	4013      	ands	r3, r2
 80063a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80063b6:	4a21      	ldr	r2, [pc, #132]	; (800643c <HAL_GPIO_Init+0x3a8>)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80063bc:	4b1f      	ldr	r3, [pc, #124]	; (800643c <HAL_GPIO_Init+0x3a8>)
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	4013      	ands	r3, r2
 80063cc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d003      	beq.n	80063e2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	4313      	orrs	r3, r2
 80063e0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <HAL_GPIO_Init+0x3a8>)
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80063ea:	4b14      	ldr	r3, [pc, #80]	; (800643c <HAL_GPIO_Init+0x3a8>)
 80063ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	4013      	ands	r3, r2
 80063fa:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8006408:	69fa      	ldr	r2, [r7, #28]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8006410:	4a0a      	ldr	r2, [pc, #40]	; (800643c <HAL_GPIO_Init+0x3a8>)
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3301      	adds	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f ae3d 	bne.w	80060a8 <HAL_GPIO_Init+0x14>
  }
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	3724      	adds	r7, #36	; 0x24
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	46022000 	.word	0x46022000
 8006440:	002f7f7f 	.word	0x002f7f7f

08006444 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8006456:	e0bc      	b.n	80065d2 <HAL_GPIO_DeInit+0x18e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8006458:	2201      	movs	r2, #1
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	4013      	ands	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

    /*Save Pin Position */
    pin_position = position;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	61fb      	str	r3, [r7, #28]

    if (iocurrent != 0U)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80ad 	beq.w	80065cc <HAL_GPIO_DeInit+0x188>
    {
      /* In case of LPGPIO port selected */
      if (GPIOx == LPGPIO1)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a5e      	ldr	r2, [pc, #376]	; (80065f0 <HAL_GPIO_DeInit+0x1ac>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d115      	bne.n	80064a6 <HAL_GPIO_DeInit+0x62>
      {
        /* Configure LP/IO in Input Mode */
        p_gpio  = LPGPIO_Map[pin_position].GPIO_PORT;
 800647a:	4a5e      	ldr	r2, [pc, #376]	; (80065f4 <HAL_GPIO_DeInit+0x1b0>)
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006482:	617b      	str	r3, [r7, #20]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8006484:	4a5b      	ldr	r2, [pc, #364]	; (80065f4 <HAL_GPIO_DeInit+0x1b0>)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	00db      	lsls	r3, r3, #3
 800648a:	4413      	add	r3, r2
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	61fb      	str	r3, [r7, #28]
        LPGPIO1->MODER &= ~(1U << pin_position);
 8006490:	4b57      	ldr	r3, [pc, #348]	; (80065f0 <HAL_GPIO_DeInit+0x1ac>)
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	2101      	movs	r1, #1
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	4954      	ldr	r1, [pc, #336]	; (80065f0 <HAL_GPIO_DeInit+0x1ac>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	600b      	str	r3, [r1, #0]
 80064a4:	e053      	b.n	800654e <HAL_GPIO_DeInit+0x10a>
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /*------------------------- EXTI Mode Configuration --------------------*/
        /* Clear the External Interrupt or Event for the current IO */
        tmp = EXTI->EXTICR[position >> 2U];
 80064a6:	4a54      	ldr	r2, [pc, #336]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	3318      	adds	r3, #24
 80064ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064b2:	60fb      	str	r3, [r7, #12]
        tmp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	220f      	movs	r2, #15
 80064be:	fa02 f303 	lsl.w	r3, r2, r3
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4013      	ands	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
        if (tmp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	0a9a      	lsrs	r2, r3, #10
 80064cc:	4b4b      	ldr	r3, [pc, #300]	; (80065fc <HAL_GPIO_DeInit+0x1b8>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	f002 0203 	and.w	r2, r2, #3
 80064d6:	00d2      	lsls	r2, r2, #3
 80064d8:	4093      	lsls	r3, r2
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d136      	bne.n	800654e <HAL_GPIO_DeInit+0x10a>
        {
          /* Clear EXTI line configuration */
          EXTI->IMR1 &= ~(iocurrent);
 80064e0:	4b45      	ldr	r3, [pc, #276]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 80064e2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	4943      	ldr	r1, [pc, #268]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
          EXTI->EMR1 &= ~(iocurrent);
 80064f2:	4b41      	ldr	r3, [pc, #260]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 80064f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	493e      	ldr	r1, [pc, #248]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 80064fe:	4013      	ands	r3, r2
 8006500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

          /* Clear Rising Falling edge configuration */
          EXTI->RTSR1 &= ~(iocurrent);
 8006504:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	43db      	mvns	r3, r3
 800650c:	493a      	ldr	r1, [pc, #232]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 800650e:	4013      	ands	r3, r2
 8006510:	600b      	str	r3, [r1, #0]
          EXTI->FTSR1 &= ~(iocurrent);
 8006512:	4b39      	ldr	r3, [pc, #228]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	43db      	mvns	r3, r3
 800651a:	4937      	ldr	r1, [pc, #220]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 800651c:	4013      	ands	r3, r2
 800651e:	604b      	str	r3, [r1, #4]

          tmp = (0x0FUL) << (8U * (position & 0x03U));
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	00db      	lsls	r3, r3, #3
 8006528:	220f      	movs	r2, #15
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	60fb      	str	r3, [r7, #12]
          EXTI->EXTICR[position >> 2U] &= ~tmp;
 8006530:	4a31      	ldr	r2, [pc, #196]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	3318      	adds	r3, #24
 8006538:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	43da      	mvns	r2, r3
 8006540:	482d      	ldr	r0, [pc, #180]	; (80065f8 <HAL_GPIO_DeInit+0x1b4>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	089b      	lsrs	r3, r3, #2
 8006546:	400a      	ands	r2, r1
 8006548:	3318      	adds	r3, #24
 800654a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        }
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      p_gpio->MODER |= (GPIO_MODER_MODE0 << (pin_position * 2U));
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	2103      	movs	r1, #3
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      p_gpio->AFR[pin_position >> 3U] &= ~(0x0FUL << ((pin_position & 0x07U) * 4U));
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	08da      	lsrs	r2, r3, #3
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3208      	adds	r2, #8
 800656a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	220f      	movs	r2, #15
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69fa      	ldr	r2, [r7, #28]
 8006580:	08d2      	lsrs	r2, r2, #3
 8006582:	4019      	ands	r1, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	3208      	adds	r2, #8
 8006588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      p_gpio->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	2103      	movs	r1, #3
 8006596:	fa01 f303 	lsl.w	r3, r1, r3
 800659a:	43db      	mvns	r3, r3
 800659c:	401a      	ands	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      p_gpio->OTYPER  &= ~(GPIO_OTYPER_OT0 << pin_position);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	2101      	movs	r1, #1
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	401a      	ands	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      p_gpio->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	2103      	movs	r1, #3
 80065c0:	fa01 f303 	lsl.w	r3, r1, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	401a      	ands	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	60da      	str	r2, [r3, #12]
    }

    position++;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3301      	adds	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
  while ((GPIO_Pin >> position) != 0U)
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	fa22 f303 	lsr.w	r3, r2, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f47f af3c 	bne.w	8006458 <HAL_GPIO_DeInit+0x14>
  }
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	3724      	adds	r7, #36	; 0x24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	46020000 	.word	0x46020000
 80065f4:	08024328 	.word	0x08024328
 80065f8:	46022000 	.word	0x46022000
 80065fc:	002f7f7f 	.word	0x002f7f7f

08006600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	887b      	ldrh	r3, [r7, #2]
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e001      	b.n	8006622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  }

  return bitstatus;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	807b      	strh	r3, [r7, #2]
 800663c:	4613      	mov	r3, r2
 800663e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006640:	787b      	ldrb	r3, [r7, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006646:	887a      	ldrh	r2, [r7, #2]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800664c:	e002      	b.n	8006654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	460b      	mov	r3, r1
 800666a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4013      	ands	r3, r2
 8006678:	041a      	lsls	r2, r3, #16
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	43d9      	mvns	r1, r3
 800667e:	887b      	ldrh	r3, [r7, #2]
 8006680:	400b      	ands	r3, r1
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	619a      	str	r2, [r3, #24]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e081      	b.n	80067aa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d106      	bne.n	80066c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fa fec8 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2224      	movs	r2, #36	; 0x24
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f022 0201 	bic.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800670a:	609a      	str	r2, [r3, #8]
 800670c:	e006      	b.n	800671c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800671a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	2b02      	cmp	r3, #2
 8006722:	d104      	bne.n	800672e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800672c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6812      	ldr	r2, [r2, #0]
 8006738:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800673c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006740:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006750:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691a      	ldr	r2, [r3, #16]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	69d9      	ldr	r1, [r3, #28]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1a      	ldr	r2, [r3, #32]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2220      	movs	r2, #32
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e021      	b.n	8006808 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2224      	movs	r2, #36	; 0x24
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7fa fef1 	bl	80015c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	817b      	strh	r3, [r7, #10]
 8006822:	460b      	mov	r3, r1
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b20      	cmp	r3, #32
 8006834:	f040 80f9 	bne.w	8006a2a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d002      	beq.n	8006844 <HAL_I2C_Mem_Write+0x34>
 800683e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f44f 7200 	mov.w	r2, #512	; 0x200
 800684a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0ed      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006856:	2b01      	cmp	r3, #1
 8006858:	d101      	bne.n	800685e <HAL_I2C_Mem_Write+0x4e>
 800685a:	2302      	movs	r3, #2
 800685c:	e0e6      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006866:	f7ff fa85 	bl	8005d74 <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2319      	movs	r3, #25
 8006872:	2201      	movs	r2, #1
 8006874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fadd 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e0d1      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2221      	movs	r2, #33	; 0x21
 800688c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2240      	movs	r2, #64	; 0x40
 8006894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80068a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068b0:	88f8      	ldrh	r0, [r7, #6]
 80068b2:	893a      	ldrh	r2, [r7, #8]
 80068b4:	8979      	ldrh	r1, [r7, #10]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	9301      	str	r3, [sp, #4]
 80068ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068bc:	9300      	str	r3, [sp, #0]
 80068be:	4603      	mov	r3, r0
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f9ed 	bl	8006ca0 <I2C_RequestMemoryWrite>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0a9      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2bff      	cmp	r3, #255	; 0xff
 80068e0:	d90e      	bls.n	8006900 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	22ff      	movs	r2, #255	; 0xff
 80068e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	8979      	ldrh	r1, [r7, #10]
 80068f0:	2300      	movs	r3, #0
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fc57 	bl	80071ac <I2C_TransferConfig>
 80068fe:	e00f      	b.n	8006920 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006904:	b29a      	uxth	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800690e:	b2da      	uxtb	r2, r3
 8006910:	8979      	ldrh	r1, [r7, #10]
 8006912:	2300      	movs	r3, #0
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 fc46 	bl	80071ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fad6 	bl	8006ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	e07b      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	781a      	ldrb	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d034      	beq.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006972:	2b00      	cmp	r3, #0
 8006974:	d130      	bne.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	2200      	movs	r2, #0
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 fa59 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d001      	beq.n	8006990 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	e04d      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29b      	uxth	r3, r3
 8006996:	2bff      	cmp	r3, #255	; 0xff
 8006998:	d90e      	bls.n	80069b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	22ff      	movs	r2, #255	; 0xff
 800699e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8979      	ldrh	r1, [r7, #10]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fbfb 	bl	80071ac <I2C_TransferConfig>
 80069b6:	e00f      	b.n	80069d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069bc:	b29a      	uxth	r2, r3
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	8979      	ldrh	r1, [r7, #10]
 80069ca:	2300      	movs	r3, #0
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 fbea 	bl	80071ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d19e      	bne.n	8006920 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 fabc 	bl	8006f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e01a      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2220      	movs	r2, #32
 80069fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6859      	ldr	r1, [r3, #4]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_I2C_Mem_Write+0x224>)
 8006a0a:	400b      	ands	r3, r1
 8006a0c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	e000      	b.n	8006a2c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a2a:	2302      	movs	r3, #2
  }
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	fe00e800 	.word	0xfe00e800

08006a38 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af02      	add	r7, sp, #8
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	4608      	mov	r0, r1
 8006a42:	4611      	mov	r1, r2
 8006a44:	461a      	mov	r2, r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	817b      	strh	r3, [r7, #10]
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	813b      	strh	r3, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b20      	cmp	r3, #32
 8006a5c:	f040 80fd 	bne.w	8006c5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d002      	beq.n	8006a6c <HAL_I2C_Mem_Read+0x34>
 8006a66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e0f1      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d101      	bne.n	8006a86 <HAL_I2C_Mem_Read+0x4e>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e0ea      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a8e:	f7ff f971 	bl	8005d74 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	2319      	movs	r3, #25
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 f9c9 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0d5      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2222      	movs	r2, #34	; 0x22
 8006ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2240      	movs	r2, #64	; 0x40
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ad0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ad8:	88f8      	ldrh	r0, [r7, #6]
 8006ada:	893a      	ldrh	r2, [r7, #8]
 8006adc:	8979      	ldrh	r1, [r7, #10]
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	9300      	str	r3, [sp, #0]
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f92d 	bl	8006d48 <I2C_RequestMemoryRead>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0ad      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2bff      	cmp	r3, #255	; 0xff
 8006b08:	d90e      	bls.n	8006b28 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	22ff      	movs	r2, #255	; 0xff
 8006b0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b14:	b2da      	uxtb	r2, r3
 8006b16:	8979      	ldrh	r1, [r7, #10]
 8006b18:	4b52      	ldr	r3, [pc, #328]	; (8006c64 <HAL_I2C_Mem_Read+0x22c>)
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b20:	68f8      	ldr	r0, [r7, #12]
 8006b22:	f000 fb43 	bl	80071ac <I2C_TransferConfig>
 8006b26:	e00f      	b.n	8006b48 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	8979      	ldrh	r1, [r7, #10]
 8006b3a:	4b4a      	ldr	r3, [pc, #296]	; (8006c64 <HAL_I2C_Mem_Read+0x22c>)
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 fb32 	bl	80071ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2104      	movs	r1, #4
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f970 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e07c      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	3b01      	subs	r3, #1
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d034      	beq.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d130      	bne.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bac:	2200      	movs	r2, #0
 8006bae:	2180      	movs	r1, #128	; 0x80
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 f941 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e04d      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2bff      	cmp	r3, #255	; 0xff
 8006bc8:	d90e      	bls.n	8006be8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	22ff      	movs	r2, #255	; 0xff
 8006bce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	8979      	ldrh	r1, [r7, #10]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fae3 	bl	80071ac <I2C_TransferConfig>
 8006be6:	e00f      	b.n	8006c08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf6:	b2da      	uxtb	r2, r3
 8006bf8:	8979      	ldrh	r1, [r7, #10]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fad2 	bl	80071ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d19a      	bne.n	8006b48 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f9a4 	bl	8006f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e01a      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2220      	movs	r2, #32
 8006c2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	4b0b      	ldr	r3, [pc, #44]	; (8006c68 <HAL_I2C_Mem_Read+0x230>)
 8006c3a:	400b      	ands	r3, r1
 8006c3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2220      	movs	r2, #32
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	e000      	b.n	8006c5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c5a:	2302      	movs	r3, #2
  }
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	80002400 	.word	0x80002400
 8006c68:	fe00e800 	.word	0xfe00e800

08006c6c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7a:	b2db      	uxtb	r3, r3
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af02      	add	r7, sp, #8
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	461a      	mov	r2, r3
 8006cae:	4603      	mov	r3, r0
 8006cb0:	817b      	strh	r3, [r7, #10]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	813b      	strh	r3, [r7, #8]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	8979      	ldrh	r1, [r7, #10]
 8006cc0:	4b20      	ldr	r3, [pc, #128]	; (8006d44 <I2C_RequestMemoryWrite+0xa4>)
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f000 fa6f 	bl	80071ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cce:	69fa      	ldr	r2, [r7, #28]
 8006cd0:	69b9      	ldr	r1, [r7, #24]
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f8ff 	bl	8006ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e02c      	b.n	8006d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d105      	bne.n	8006cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ce8:	893b      	ldrh	r3, [r7, #8]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cf2:	e015      	b.n	8006d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cf4:	893b      	ldrh	r3, [r7, #8]
 8006cf6:	0a1b      	lsrs	r3, r3, #8
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d02:	69fa      	ldr	r2, [r7, #28]
 8006d04:	69b9      	ldr	r1, [r7, #24]
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f000 f8e5 	bl	8006ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e012      	b.n	8006d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d16:	893b      	ldrh	r3, [r7, #8]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2200      	movs	r2, #0
 8006d28:	2180      	movs	r1, #128	; 0x80
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f884 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	80002000 	.word	0x80002000

08006d48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	817b      	strh	r3, [r7, #10]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	813b      	strh	r3, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d62:	88fb      	ldrh	r3, [r7, #6]
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	8979      	ldrh	r1, [r7, #10]
 8006d68:	4b20      	ldr	r3, [pc, #128]	; (8006dec <I2C_RequestMemoryRead+0xa4>)
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	68f8      	ldr	r0, [r7, #12]
 8006d70:	f000 fa1c 	bl	80071ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d74:	69fa      	ldr	r2, [r7, #28]
 8006d76:	69b9      	ldr	r1, [r7, #24]
 8006d78:	68f8      	ldr	r0, [r7, #12]
 8006d7a:	f000 f8ac 	bl	8006ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e02c      	b.n	8006de2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d88:	88fb      	ldrh	r3, [r7, #6]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d105      	bne.n	8006d9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8e:	893b      	ldrh	r3, [r7, #8]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	629a      	str	r2, [r3, #40]	; 0x28
 8006d98:	e015      	b.n	8006dc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d9a:	893b      	ldrh	r3, [r7, #8]
 8006d9c:	0a1b      	lsrs	r3, r3, #8
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006da8:	69fa      	ldr	r2, [r7, #28]
 8006daa:	69b9      	ldr	r1, [r7, #24]
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f000 f892 	bl	8006ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e012      	b.n	8006de2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dbc:	893b      	ldrh	r3, [r7, #8]
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	9300      	str	r3, [sp, #0]
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2140      	movs	r1, #64	; 0x40
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f831 	bl	8006e38 <I2C_WaitOnFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	80002000 	.word	0x80002000

08006df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d103      	bne.n	8006e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d007      	beq.n	8006e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699a      	ldr	r2, [r3, #24]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f042 0201 	orr.w	r2, r2, #1
 8006e2a:	619a      	str	r2, [r3, #24]
  }
}
 8006e2c:	bf00      	nop
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	4613      	mov	r3, r2
 8006e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e48:	e031      	b.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d02d      	beq.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fe ff8f 	bl	8005d74 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d122      	bne.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699a      	ldr	r2, [r3, #24]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d113      	bne.n	8006eae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f043 0220 	orr.w	r2, r3, #32
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00f      	b.n	8006ece <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d0be      	beq.n	8006e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b084      	sub	sp, #16
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ee2:	e033      	b.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68b9      	ldr	r1, [r7, #8]
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 f87f 	bl	8006fec <I2C_IsErrorOccurred>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e031      	b.n	8006f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d025      	beq.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f00:	f7fe ff38 	bl	8005d74 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d11a      	bne.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699b      	ldr	r3, [r3, #24]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d013      	beq.n	8006f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e007      	b.n	8006f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d1c4      	bne.n	8006ee4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f70:	e02f      	b.n	8006fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	68b9      	ldr	r1, [r7, #8]
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 f838 	bl	8006fec <I2C_IsErrorOccurred>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e02d      	b.n	8006fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f86:	f7fe fef5 	bl	8005d74 <HAL_GetTick>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d302      	bcc.n	8006f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d11a      	bne.n	8006fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d013      	beq.n	8006fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e007      	b.n	8006fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b20      	cmp	r3, #32
 8006fde:	d1c8      	bne.n	8006f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	f003 0310 	and.w	r3, r3, #16
 8007014:	2b00      	cmp	r3, #0
 8007016:	d068      	beq.n	80070ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2210      	movs	r2, #16
 800701e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007020:	e049      	b.n	80070b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d045      	beq.n	80070b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800702a:	f7fe fea3 	bl	8005d74 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <I2C_IsErrorOccurred+0x54>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d13a      	bne.n	80070b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007052:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800705e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007062:	d121      	bne.n	80070a8 <I2C_IsErrorOccurred+0xbc>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800706a:	d01d      	beq.n	80070a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800706c:	7cfb      	ldrb	r3, [r7, #19]
 800706e:	2b20      	cmp	r3, #32
 8007070:	d01a      	beq.n	80070a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007080:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007082:	f7fe fe77 	bl	8005d74 <HAL_GetTick>
 8007086:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007088:	e00e      	b.n	80070a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800708a:	f7fe fe73 	bl	8005d74 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b19      	cmp	r3, #25
 8007096:	d907      	bls.n	80070a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f043 0320 	orr.w	r3, r3, #32
 800709e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80070a6:	e006      	b.n	80070b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699b      	ldr	r3, [r3, #24]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d1e9      	bne.n	800708a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	f003 0320 	and.w	r3, r3, #32
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d003      	beq.n	80070cc <I2C_IsErrorOccurred+0xe0>
 80070c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0aa      	beq.n	8007022 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2220      	movs	r2, #32
 80070da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	f043 0304 	orr.w	r3, r3, #4
 80070e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80070f2:	69bb      	ldr	r3, [r7, #24]
 80070f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00b      	beq.n	8007114 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800710c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	f043 0308 	orr.w	r3, r3, #8
 8007124:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800712e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	f043 0302 	orr.w	r3, r3, #2
 8007146:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01c      	beq.n	800719a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fe45 	bl	8006df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6859      	ldr	r1, [r3, #4]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b0d      	ldr	r3, [pc, #52]	; (80071a8 <I2C_IsErrorOccurred+0x1bc>)
 8007172:	400b      	ands	r3, r1
 8007174:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	431a      	orrs	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800719a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	; 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	fe00e800 	.word	0xfe00e800

080071ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	607b      	str	r3, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	817b      	strh	r3, [r7, #10]
 80071ba:	4613      	mov	r3, r2
 80071bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071be:	897b      	ldrh	r3, [r7, #10]
 80071c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071c4:	7a7b      	ldrb	r3, [r7, #9]
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	0d5b      	lsrs	r3, r3, #21
 80071e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80071ea:	4b08      	ldr	r3, [pc, #32]	; (800720c <I2C_TransferConfig+0x60>)
 80071ec:	430b      	orrs	r3, r1
 80071ee:	43db      	mvns	r3, r3
 80071f0:	ea02 0103 	and.w	r1, r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	03ff63ff 	.word	0x03ff63ff

08007210 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b20      	cmp	r3, #32
 8007224:	d138      	bne.n	8007298 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007230:	2302      	movs	r3, #2
 8007232:	e032      	b.n	800729a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2224      	movs	r2, #36	; 0x24
 8007240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 0201 	bic.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007262:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6819      	ldr	r1, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	e000      	b.n	800729a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007298:	2302      	movs	r3, #2
  }
}
 800729a:	4618      	mov	r0, r3
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d139      	bne.n	8007330 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072c6:	2302      	movs	r3, #2
 80072c8:	e033      	b.n	8007332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2224      	movs	r2, #36	; 0x24
 80072d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0201 	bic.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80072f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2220      	movs	r2, #32
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	e000      	b.n	8007332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007330:	2302      	movs	r3, #2
  }
}
 8007332:	4618      	mov	r0, r3
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 800734c:	4b0b      	ldr	r3, [pc, #44]	; (800737c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e007      	b.n	800736e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800735e:	4b07      	ldr	r3, [pc, #28]	; (800737c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f023 0204 	bic.w	r2, r3, #4
 8007366:	4905      	ldr	r1, [pc, #20]	; (800737c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4313      	orrs	r3, r2
 800736c:	600b      	str	r3, [r1, #0]
  }

  return status;
 800736e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3714      	adds	r7, #20
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	40030400 	.word	0x40030400

08007380 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8007384:	4b05      	ldr	r3, [pc, #20]	; (800739c <HAL_ICACHE_Enable+0x1c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a04      	ldr	r2, [pc, #16]	; (800739c <HAL_ICACHE_Enable+0x1c>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	40030400 	.word	0x40030400

080073a0 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a8:	2300      	movs	r3, #0
 80073aa:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d102      	bne.n	80073b8 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80073b2:	2301      	movs	r3, #1
 80073b4:	73fb      	strb	r3, [r7, #15]
 80073b6:	e141      	b.n	800763c <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 f947 	bl	8007650 <MDF_GetHandleNumberFromInstance>
 80073c2:	4603      	mov	r3, r0
 80073c4:	4a86      	ldr	r2, [pc, #536]	; (80075e0 <HAL_MDF_Init+0x240>)
 80073c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d002      	beq.n	80073d4 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	73fb      	strb	r3, [r7, #15]
 80073d2:	e133      	b.n	800763c <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f7f9 ffd1 	bl	800137c <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80073da:	4b82      	ldr	r3, [pc, #520]	; (80075e4 <HAL_MDF_Init+0x244>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d11d      	bne.n	800741e <HAL_MDF_Init+0x7e>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a80      	ldr	r2, [pc, #512]	; (80075e8 <HAL_MDF_Init+0x248>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d023      	beq.n	8007434 <HAL_MDF_Init+0x94>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a7e      	ldr	r2, [pc, #504]	; (80075ec <HAL_MDF_Init+0x24c>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d01e      	beq.n	8007434 <HAL_MDF_Init+0x94>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a7d      	ldr	r2, [pc, #500]	; (80075f0 <HAL_MDF_Init+0x250>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d019      	beq.n	8007434 <HAL_MDF_Init+0x94>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a7b      	ldr	r2, [pc, #492]	; (80075f4 <HAL_MDF_Init+0x254>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d014      	beq.n	8007434 <HAL_MDF_Init+0x94>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a7a      	ldr	r2, [pc, #488]	; (80075f8 <HAL_MDF_Init+0x258>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00f      	beq.n	8007434 <HAL_MDF_Init+0x94>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a78      	ldr	r2, [pc, #480]	; (80075fc <HAL_MDF_Init+0x25c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00a      	beq.n	8007434 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800741e:	4b78      	ldr	r3, [pc, #480]	; (8007600 <HAL_MDF_Init+0x260>)
 8007420:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8007422:	2b00      	cmp	r3, #0
 8007424:	f040 8090 	bne.w	8007548 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a75      	ldr	r2, [pc, #468]	; (8007604 <HAL_MDF_Init+0x264>)
 800742e:	4293      	cmp	r3, r2
 8007430:	f040 808a 	bne.w	8007548 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a72      	ldr	r2, [pc, #456]	; (8007604 <HAL_MDF_Init+0x264>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d101      	bne.n	8007442 <HAL_MDF_Init+0xa2>
 800743e:	4b72      	ldr	r3, [pc, #456]	; (8007608 <HAL_MDF_Init+0x268>)
 8007440:	e000      	b.n	8007444 <HAL_MDF_Init+0xa4>
 8007442:	4b72      	ldr	r3, [pc, #456]	; (800760c <HAL_MDF_Init+0x26c>)
 8007444:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da02      	bge.n	8007454 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e079      	b.n	8007548 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a63      	ldr	r2, [pc, #396]	; (80075e8 <HAL_MDF_Init+0x248>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d018      	beq.n	8007490 <HAL_MDF_Init+0xf0>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a62      	ldr	r2, [pc, #392]	; (80075ec <HAL_MDF_Init+0x24c>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d013      	beq.n	8007490 <HAL_MDF_Init+0xf0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a60      	ldr	r2, [pc, #384]	; (80075f0 <HAL_MDF_Init+0x250>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d00e      	beq.n	8007490 <HAL_MDF_Init+0xf0>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a5f      	ldr	r2, [pc, #380]	; (80075f4 <HAL_MDF_Init+0x254>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d009      	beq.n	8007490 <HAL_MDF_Init+0xf0>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a5d      	ldr	r2, [pc, #372]	; (80075f8 <HAL_MDF_Init+0x258>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_MDF_Init+0xf0>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a5c      	ldr	r2, [pc, #368]	; (80075fc <HAL_MDF_Init+0x25c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10d      	bne.n	80074ac <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	011b      	lsls	r3, r3, #4
 80074a6:	431a      	orrs	r2, r3
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2200      	movs	r2, #0
 80074b0:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	431a      	orrs	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7b1b      	ldrb	r3, [r3, #12]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d137      	bne.n	800753c <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	3b01      	subs	r3, #1
 80074d6:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80074dc:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80074e4:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80074e6:	431a      	orrs	r2, r3
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	7e1b      	ldrb	r3, [r3, #24]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d123      	bne.n	800753c <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3b      	ldr	r2, [pc, #236]	; (80075e8 <HAL_MDF_Init+0x248>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d012      	beq.n	8007524 <HAL_MDF_Init+0x184>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a3a      	ldr	r2, [pc, #232]	; (80075ec <HAL_MDF_Init+0x24c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d00d      	beq.n	8007524 <HAL_MDF_Init+0x184>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a38      	ldr	r2, [pc, #224]	; (80075f0 <HAL_MDF_Init+0x250>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d008      	beq.n	8007524 <HAL_MDF_Init+0x184>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a37      	ldr	r2, [pc, #220]	; (80075f4 <HAL_MDF_Init+0x254>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <HAL_MDF_Init+0x184>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <HAL_MDF_Init+0x258>)
 8007522:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8007530:	430b      	orrs	r3, r1
 8007532:	4313      	orrs	r3, r2
 8007534:	f043 0210 	orr.w	r2, r3, #16
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	f043 0201 	orr.w	r2, r3, #1
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d128      	bne.n	80075a0 <HAL_MDF_Init+0x200>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007554:	2b01      	cmp	r3, #1
 8007556:	d123      	bne.n	80075a0 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	da02      	bge.n	8007568 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	73fb      	strb	r3, [r7, #15]
 8007566:	e01b      	b.n	80075a0 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6819      	ldr	r1, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8007580:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d14a      	bne.n	800763c <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 021f 	bic.w	r2, r2, #31
 80075b4:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6859      	ldr	r1, [r3, #4]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	430a      	orrs	r2, r1
 80075c6:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a0d      	ldr	r2, [pc, #52]	; (8007604 <HAL_MDF_Init+0x264>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d11e      	bne.n	8007610 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80075d2:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <HAL_MDF_Init+0x260>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	4a09      	ldr	r2, [pc, #36]	; (8007600 <HAL_MDF_Init+0x260>)
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	e01d      	b.n	800761a <HAL_MDF_Init+0x27a>
 80075de:	bf00      	nop
 80075e0:	20003740 	.word	0x20003740
 80075e4:	20003738 	.word	0x20003738
 80075e8:	40025080 	.word	0x40025080
 80075ec:	40025100 	.word	0x40025100
 80075f0:	40025180 	.word	0x40025180
 80075f4:	40025200 	.word	0x40025200
 80075f8:	40025280 	.word	0x40025280
 80075fc:	40025300 	.word	0x40025300
 8007600:	2000373c 	.word	0x2000373c
 8007604:	46024080 	.word	0x46024080
 8007608:	46024000 	.word	0x46024000
 800760c:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8007610:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <HAL_MDF_Init+0x2a8>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	3301      	adds	r3, #1
 8007616:	4a0c      	ldr	r2, [pc, #48]	; (8007648 <HAL_MDF_Init+0x2a8>)
 8007618:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f816 	bl	8007650 <MDF_GetHandleNumberFromInstance>
 8007624:	4602      	mov	r2, r0
 8007626:	4909      	ldr	r1, [pc, #36]	; (800764c <HAL_MDF_Init+0x2ac>)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20003738 	.word	0x20003738
 800764c:	20003740 	.word	0x20003740

08007650 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a19      	ldr	r2, [pc, #100]	; (80076c0 <MDF_GetHandleNumberFromInstance+0x70>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d102      	bne.n	8007666 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e024      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a16      	ldr	r2, [pc, #88]	; (80076c4 <MDF_GetHandleNumberFromInstance+0x74>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d102      	bne.n	8007674 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800766e:	2301      	movs	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	e01d      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
#if !defined(STM32U535xx) && !defined(STM32U545xx)
  else if (pInstance == MDF1_Filter2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a14      	ldr	r2, [pc, #80]	; (80076c8 <MDF_GetHandleNumberFromInstance+0x78>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d102      	bne.n	8007682 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 800767c:	2302      	movs	r3, #2
 800767e:	60fb      	str	r3, [r7, #12]
 8007680:	e016      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a11      	ldr	r2, [pc, #68]	; (80076cc <MDF_GetHandleNumberFromInstance+0x7c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d102      	bne.n	8007690 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 800768a:	2303      	movs	r3, #3
 800768c:	60fb      	str	r3, [r7, #12]
 800768e:	e00f      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a0f      	ldr	r2, [pc, #60]	; (80076d0 <MDF_GetHandleNumberFromInstance+0x80>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d102      	bne.n	800769e <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8007698:	2304      	movs	r3, #4
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e008      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a0c      	ldr	r2, [pc, #48]	; (80076d4 <MDF_GetHandleNumberFromInstance+0x84>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d102      	bne.n	80076ac <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80076a6:	2305      	movs	r3, #5
 80076a8:	60fb      	str	r3, [r7, #12]
 80076aa:	e001      	b.n	80076b0 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80076ac:	2306      	movs	r3, #6
 80076ae:	60fb      	str	r3, [r7, #12]
  {
    handle_number = 2U;
  }
#endif /* !defined(STM32U535xx) && !defined(STM32U545xx) */

  return handle_number;
 80076b0:	68fb      	ldr	r3, [r7, #12]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3714      	adds	r7, #20
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40025080 	.word	0x40025080
 80076c4:	40025100 	.word	0x40025100
 80076c8:	40025180 	.word	0x40025180
 80076cc:	40025200 	.word	0x40025200
 80076d0:	40025280 	.word	0x40025280
 80076d4:	40025300 	.word	0x40025300

080076d8 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f043 0201 	orr.w	r2, r3, #1
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af02      	add	r7, sp, #8
 80076fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8007704:	f7fe fb36 	bl	8005d74 <HAL_GetTick>
 8007708:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
 8007714:	e0a5      	b.n	8007862 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007720:	2b00      	cmp	r3, #0
 8007722:	f040 809e 	bne.w	8007862 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f7f9 ff8c 	bl	8001644 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 800772c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f912 	bl	800795a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	4b4b      	ldr	r3, [pc, #300]	; (800786c <HAL_OSPI_Init+0x174>)
 800773e:	4013      	ands	r3, r2
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	68d1      	ldr	r1, [r2, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6912      	ldr	r2, [r2, #16]
 8007748:	3a01      	subs	r2, #1
 800774a:	0412      	lsls	r2, r2, #16
 800774c:	4311      	orrs	r1, r2
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	6952      	ldr	r2, [r2, #20]
 8007752:	3a01      	subs	r2, #1
 8007754:	0212      	lsls	r2, r2, #8
 8007756:	4311      	orrs	r1, r2
 8007758:	687a      	ldr	r2, [r7, #4]
 800775a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800775c:	4311      	orrs	r1, r2
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	69d2      	ldr	r2, [r2, #28]
 8007762:	4311      	orrs	r1, r2
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	6812      	ldr	r2, [r2, #0]
 8007768:	430b      	orrs	r3, r1
 800776a:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	430a      	orrs	r2, r1
 8007792:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800779c:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	021a      	lsls	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	430a      	orrs	r2, r1
 80077b6:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2200      	movs	r2, #0
 80077c2:	2120      	movs	r1, #32
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fdc9 	bl	800835c <OSPI_WaitFlagStateUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d146      	bne.n	8007862 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68db      	ldr	r3, [r3, #12]
 80077da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	1e5a      	subs	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	430a      	orrs	r2, r1
 80077ea:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800780a:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	430a      	orrs	r2, r1
 800781e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b02      	cmp	r3, #2
 8007838:	d107      	bne.n	800784a <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0202 	orr.w	r2, r2, #2
 8007848:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007852:	d103      	bne.n	800785c <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	651a      	str	r2, [r3, #80]	; 0x50
 800785a:	e002      	b.n	8007862 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2202      	movs	r2, #2
 8007860:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	f8e0c0f4 	.word	0xf8e0c0f4

08007870 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af02      	add	r7, sp, #8
 8007876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007878:	2300      	movs	r3, #0
 800787a:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800787c:	f7fe fa7a 	bl	8005d74 <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007886:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f003 0308 	and.w	r3, r3, #8
 800788e:	2b00      	cmp	r3, #0
 8007890:	d104      	bne.n	800789c <HAL_OSPI_Abort+0x2c>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d052      	beq.n	8007942 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0304 	and.w	r3, r3, #4
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d014      	beq.n	80078d4 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f022 0204 	bic.w	r2, r2, #4
 80078b8:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe fb6b 	bl	8005f9a <HAL_DMA_Abort>
 80078c4:	4603      	mov	r3, r0
 80078c6:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2204      	movs	r2, #4
 80078d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d02b      	beq.n	800793a <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f042 0202 	orr.w	r2, r2, #2
 80078f0:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	2201      	movs	r2, #1
 80078fc:	2102      	movs	r1, #2
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fd2c 	bl	800835c <OSPI_WaitFlagStateUntilTimeout>
 8007904:	4603      	mov	r3, r0
 8007906:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d11f      	bne.n	800794e <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2202      	movs	r2, #2
 8007914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	2200      	movs	r2, #0
 8007920:	2120      	movs	r1, #32
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fd1a 	bl	800835c <OSPI_WaitFlagStateUntilTimeout>
 8007928:	4603      	mov	r3, r0
 800792a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800792c:	7dfb      	ldrb	r3, [r7, #23]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2202      	movs	r2, #2
 8007936:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007938:	e009      	b.n	800794e <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2202      	movs	r2, #2
 800793e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8007940:	e005      	b.n	800794e <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2210      	movs	r2, #16
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
 800794c:	e000      	b.n	8007950 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800794e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8007950:	7dfb      	ldrb	r3, [r7, #23]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800795a:	b480      	push	{r7}
 800795c:	b083      	sub	sp, #12
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b094      	sub	sp, #80	; 0x50
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800798a:	2300      	movs	r3, #0
 800798c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a9d      	ldr	r2, [pc, #628]	; (8007c0c <HAL_OSPIM_Config+0x294>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d105      	bne.n	80079a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800799e:	2301      	movs	r3, #1
 80079a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80079a4:	e004      	b.n	80079b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80079a6:	2301      	movs	r3, #1
 80079a8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80079b0:	2300      	movs	r3, #0
 80079b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079b6:	e01d      	b.n	80079f4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80079b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079bc:	3301      	adds	r3, #1
 80079be:	b2d8      	uxtb	r0, r3
 80079c0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80079c4:	f107 0114 	add.w	r1, r7, #20
 80079c8:	4613      	mov	r3, r2
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	4413      	add	r3, r2
 80079ce:	00db      	lsls	r3, r3, #3
 80079d0:	440b      	add	r3, r1
 80079d2:	4619      	mov	r1, r3
 80079d4:	f000 fd02 	bl	80083dc <OSPIM_GetConfig>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d005      	beq.n	80079ea <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2208      	movs	r2, #8
 80079e8:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80079ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079ee:	3301      	adds	r3, #1
 80079f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80079f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d9dd      	bls.n	80079b8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 80079fc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f040 849e 	bne.w	8008342 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8007a06:	4b81      	ldr	r3, [pc, #516]	; (8007c0c <HAL_OSPIM_Config+0x294>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0301 	and.w	r3, r3, #1
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8007a12:	4b7e      	ldr	r3, [pc, #504]	; (8007c0c <HAL_OSPIM_Config+0x294>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a7d      	ldr	r2, [pc, #500]	; (8007c0c <HAL_OSPIM_Config+0x294>)
 8007a18:	f023 0301 	bic.w	r3, r3, #1
 8007a1c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8007a1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a22:	f043 0301 	orr.w	r3, r3, #1
 8007a26:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8007a2a:	4b79      	ldr	r3, [pc, #484]	; (8007c10 <HAL_OSPIM_Config+0x298>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007a36:	4b76      	ldr	r3, [pc, #472]	; (8007c10 <HAL_OSPIM_Config+0x298>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a75      	ldr	r2, [pc, #468]	; (8007c10 <HAL_OSPIM_Config+0x298>)
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8007a42:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007a46:	f043 0302 	orr.w	r3, r3, #2
 8007a4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007a4e:	4971      	ldr	r1, [pc, #452]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	3350      	adds	r3, #80	; 0x50
 8007a5c:	443b      	add	r3, r7
 8007a5e:	3b34      	subs	r3, #52	; 0x34
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3b01      	subs	r3, #1
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	486a      	ldr	r0, [pc, #424]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a6e:	4613      	mov	r3, r2
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	4413      	add	r3, r2
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	3350      	adds	r3, #80	; 0x50
 8007a78:	443b      	add	r3, r7
 8007a7a:	3b34      	subs	r3, #52	; 0x34
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4403      	add	r3, r0
 8007a88:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007a8a:	4b62      	ldr	r3, [pc, #392]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 80c0 	beq.w	8007c18 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007a98:	4b5e      	ldr	r3, [pc, #376]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a5d      	ldr	r2, [pc, #372]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007a9e:	f023 0301 	bic.w	r3, r3, #1
 8007aa2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8007aa4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	f040 8162 	bne.w	8007d72 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8007aae:	4959      	ldr	r1, [pc, #356]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007ab0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	005b      	lsls	r3, r3, #1
 8007ab8:	4413      	add	r3, r2
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	3350      	adds	r3, #80	; 0x50
 8007abe:	443b      	add	r3, r7
 8007ac0:	3b3c      	subs	r3, #60	; 0x3c
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	440b      	add	r3, r1
 8007aca:	6859      	ldr	r1, [r3, #4]
 8007acc:	4851      	ldr	r0, [pc, #324]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007ace:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	4413      	add	r3, r2
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	3350      	adds	r3, #80	; 0x50
 8007adc:	443b      	add	r3, r7
 8007ade:	3b3c      	subs	r3, #60	; 0x3c
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	f041 0202 	orr.w	r2, r1, #2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4403      	add	r3, r0
 8007aec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007aee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007af2:	4613      	mov	r3, r2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	4413      	add	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	3350      	adds	r3, #80	; 0x50
 8007afc:	443b      	add	r3, r7
 8007afe:	3b38      	subs	r3, #56	; 0x38
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01f      	beq.n	8007b46 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8007b06:	4943      	ldr	r1, [pc, #268]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007b08:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	005b      	lsls	r3, r3, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	3350      	adds	r3, #80	; 0x50
 8007b16:	443b      	add	r3, r7
 8007b18:	3b38      	subs	r3, #56	; 0x38
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3b01      	subs	r3, #1
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	440b      	add	r3, r1
 8007b22:	6859      	ldr	r1, [r3, #4]
 8007b24:	483b      	ldr	r0, [pc, #236]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007b26:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	005b      	lsls	r3, r3, #1
 8007b2e:	4413      	add	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	3350      	adds	r3, #80	; 0x50
 8007b34:	443b      	add	r3, r7
 8007b36:	3b38      	subs	r3, #56	; 0x38
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	f041 0220 	orr.w	r2, r1, #32
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4403      	add	r3, r0
 8007b44:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007b46:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	3350      	adds	r3, #80	; 0x50
 8007b54:	443b      	add	r3, r7
 8007b56:	3b30      	subs	r3, #48	; 0x30
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d023      	beq.n	8007ba6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007b5e:	492d      	ldr	r1, [pc, #180]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007b60:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b64:	4613      	mov	r3, r2
 8007b66:	005b      	lsls	r3, r3, #1
 8007b68:	4413      	add	r3, r2
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	3350      	adds	r3, #80	; 0x50
 8007b6e:	443b      	add	r3, r7
 8007b70:	3b30      	subs	r3, #48	; 0x30
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	3b01      	subs	r3, #1
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	440b      	add	r3, r1
 8007b7e:	6859      	ldr	r1, [r3, #4]
 8007b80:	4824      	ldr	r0, [pc, #144]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007b82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007b86:	4613      	mov	r3, r2
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	4413      	add	r3, r2
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	3350      	adds	r3, #80	; 0x50
 8007b90:	443b      	add	r3, r7
 8007b92:	3b30      	subs	r3, #48	; 0x30
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3b01      	subs	r3, #1
 8007b98:	f003 0301 	and.w	r3, r3, #1
 8007b9c:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	4403      	add	r3, r0
 8007ba4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007ba6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007baa:	4613      	mov	r3, r2
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4413      	add	r3, r2
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	3350      	adds	r3, #80	; 0x50
 8007bb4:	443b      	add	r3, r7
 8007bb6:	3b2c      	subs	r3, #44	; 0x2c
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80d9 	beq.w	8007d72 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007bc0:	4914      	ldr	r1, [pc, #80]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007bc2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4413      	add	r3, r2
 8007bcc:	00db      	lsls	r3, r3, #3
 8007bce:	3350      	adds	r3, #80	; 0x50
 8007bd0:	443b      	add	r3, r7
 8007bd2:	3b2c      	subs	r3, #44	; 0x2c
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	480c      	ldr	r0, [pc, #48]	; (8007c14 <HAL_OSPIM_Config+0x29c>)
 8007be4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007be8:	4613      	mov	r3, r2
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	4413      	add	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	3350      	adds	r3, #80	; 0x50
 8007bf2:	443b      	add	r3, r7
 8007bf4:	3b2c      	subs	r3, #44	; 0x2c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4403      	add	r3, r0
 8007c06:	605a      	str	r2, [r3, #4]
 8007c08:	e0b3      	b.n	8007d72 <HAL_OSPIM_Config+0x3fa>
 8007c0a:	bf00      	nop
 8007c0c:	420d1400 	.word	0x420d1400
 8007c10:	420d2400 	.word	0x420d2400
 8007c14:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	4413      	add	r3, r2
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	3350      	adds	r3, #80	; 0x50
 8007c24:	443b      	add	r3, r7
 8007c26:	3b3c      	subs	r3, #60	; 0x3c
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80a1 	beq.w	8007d72 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007c30:	4993      	ldr	r1, [pc, #588]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007c32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c34:	4613      	mov	r3, r2
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	4413      	add	r3, r2
 8007c3a:	00db      	lsls	r3, r3, #3
 8007c3c:	3350      	adds	r3, #80	; 0x50
 8007c3e:	443b      	add	r3, r7
 8007c40:	3b3c      	subs	r3, #60	; 0x3c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3b01      	subs	r3, #1
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	6859      	ldr	r1, [r3, #4]
 8007c4c:	488c      	ldr	r0, [pc, #560]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007c4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c50:	4613      	mov	r3, r2
 8007c52:	005b      	lsls	r3, r3, #1
 8007c54:	4413      	add	r3, r2
 8007c56:	00db      	lsls	r3, r3, #3
 8007c58:	3350      	adds	r3, #80	; 0x50
 8007c5a:	443b      	add	r3, r7
 8007c5c:	3b3c      	subs	r3, #60	; 0x3c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	f021 0201 	bic.w	r2, r1, #1
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4403      	add	r3, r0
 8007c6a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007c6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c6e:	4613      	mov	r3, r2
 8007c70:	005b      	lsls	r3, r3, #1
 8007c72:	4413      	add	r3, r2
 8007c74:	00db      	lsls	r3, r3, #3
 8007c76:	3350      	adds	r3, #80	; 0x50
 8007c78:	443b      	add	r3, r7
 8007c7a:	3b38      	subs	r3, #56	; 0x38
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01d      	beq.n	8007cbe <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007c82:	497f      	ldr	r1, [pc, #508]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	3350      	adds	r3, #80	; 0x50
 8007c90:	443b      	add	r3, r7
 8007c92:	3b38      	subs	r3, #56	; 0x38
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	440b      	add	r3, r1
 8007c9c:	6859      	ldr	r1, [r3, #4]
 8007c9e:	4878      	ldr	r0, [pc, #480]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca2:	4613      	mov	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4413      	add	r3, r2
 8007ca8:	00db      	lsls	r3, r3, #3
 8007caa:	3350      	adds	r3, #80	; 0x50
 8007cac:	443b      	add	r3, r7
 8007cae:	3b38      	subs	r3, #56	; 0x38
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f021 0210 	bic.w	r2, r1, #16
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	4403      	add	r3, r0
 8007cbc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	005b      	lsls	r3, r3, #1
 8007cc4:	4413      	add	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	3350      	adds	r3, #80	; 0x50
 8007cca:	443b      	add	r3, r7
 8007ccc:	3b30      	subs	r3, #48	; 0x30
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d021      	beq.n	8007d18 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8007cd4:	496a      	ldr	r1, [pc, #424]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd8:	4613      	mov	r3, r2
 8007cda:	005b      	lsls	r3, r3, #1
 8007cdc:	4413      	add	r3, r2
 8007cde:	00db      	lsls	r3, r3, #3
 8007ce0:	3350      	adds	r3, #80	; 0x50
 8007ce2:	443b      	add	r3, r7
 8007ce4:	3b30      	subs	r3, #48	; 0x30
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	f003 0301 	and.w	r3, r3, #1
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	440b      	add	r3, r1
 8007cf2:	6859      	ldr	r1, [r3, #4]
 8007cf4:	4862      	ldr	r0, [pc, #392]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007cf6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4413      	add	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	3350      	adds	r3, #80	; 0x50
 8007d02:	443b      	add	r3, r7
 8007d04:	3b30      	subs	r3, #48	; 0x30
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	f003 0301 	and.w	r3, r3, #1
 8007d0e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4403      	add	r3, r0
 8007d16:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007d18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	4413      	add	r3, r2
 8007d20:	00db      	lsls	r3, r3, #3
 8007d22:	3350      	adds	r3, #80	; 0x50
 8007d24:	443b      	add	r3, r7
 8007d26:	3b2c      	subs	r3, #44	; 0x2c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d021      	beq.n	8007d72 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8007d2e:	4954      	ldr	r1, [pc, #336]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d32:	4613      	mov	r3, r2
 8007d34:	005b      	lsls	r3, r3, #1
 8007d36:	4413      	add	r3, r2
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	3350      	adds	r3, #80	; 0x50
 8007d3c:	443b      	add	r3, r7
 8007d3e:	3b2c      	subs	r3, #44	; 0x2c
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	f003 0301 	and.w	r3, r3, #1
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	440b      	add	r3, r1
 8007d4c:	6859      	ldr	r1, [r3, #4]
 8007d4e:	484c      	ldr	r0, [pc, #304]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d52:	4613      	mov	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	4413      	add	r3, r2
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	3350      	adds	r3, #80	; 0x50
 8007d5c:	443b      	add	r3, r7
 8007d5e:	3b2c      	subs	r3, #44	; 0x2c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4403      	add	r3, r0
 8007d70:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	4413      	add	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	3350      	adds	r3, #80	; 0x50
 8007d84:	443b      	add	r3, r7
 8007d86:	3b3c      	subs	r3, #60	; 0x3c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4299      	cmp	r1, r3
 8007d8c:	d038      	beq.n	8007e00 <HAL_OSPIM_Config+0x488>
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	6859      	ldr	r1, [r3, #4]
 8007d92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007d96:	4613      	mov	r3, r2
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	4413      	add	r3, r2
 8007d9c:	00db      	lsls	r3, r3, #3
 8007d9e:	3350      	adds	r3, #80	; 0x50
 8007da0:	443b      	add	r3, r7
 8007da2:	3b38      	subs	r3, #56	; 0x38
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4299      	cmp	r1, r3
 8007da8:	d02a      	beq.n	8007e00 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6899      	ldr	r1, [r3, #8]
 8007dae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007db2:	4613      	mov	r3, r2
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	4413      	add	r3, r2
 8007db8:	00db      	lsls	r3, r3, #3
 8007dba:	3350      	adds	r3, #80	; 0x50
 8007dbc:	443b      	add	r3, r7
 8007dbe:	3b34      	subs	r3, #52	; 0x34
 8007dc0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	d01c      	beq.n	8007e00 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	68d9      	ldr	r1, [r3, #12]
 8007dca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007dce:	4613      	mov	r3, r2
 8007dd0:	005b      	lsls	r3, r3, #1
 8007dd2:	4413      	add	r3, r2
 8007dd4:	00db      	lsls	r3, r3, #3
 8007dd6:	3350      	adds	r3, #80	; 0x50
 8007dd8:	443b      	add	r3, r7
 8007dda:	3b30      	subs	r3, #48	; 0x30
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	d00e      	beq.n	8007e00 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	6919      	ldr	r1, [r3, #16]
 8007de6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007dea:	4613      	mov	r3, r2
 8007dec:	005b      	lsls	r3, r3, #1
 8007dee:	4413      	add	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	3350      	adds	r3, #80	; 0x50
 8007df4:	443b      	add	r3, r7
 8007df6:	3b2c      	subs	r3, #44	; 0x2c
 8007df8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	f040 810e 	bne.w	800801c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	6819      	ldr	r1, [r3, #0]
 8007e04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e08:	4613      	mov	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	3350      	adds	r3, #80	; 0x50
 8007e12:	443b      	add	r3, r7
 8007e14:	3b3c      	subs	r3, #60	; 0x3c
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	d133      	bne.n	8007e84 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	6859      	ldr	r1, [r3, #4]
 8007e20:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e24:	4613      	mov	r3, r2
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	4413      	add	r3, r2
 8007e2a:	00db      	lsls	r3, r3, #3
 8007e2c:	3350      	adds	r3, #80	; 0x50
 8007e2e:	443b      	add	r3, r7
 8007e30:	3b38      	subs	r3, #56	; 0x38
 8007e32:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007e34:	4299      	cmp	r1, r3
 8007e36:	d125      	bne.n	8007e84 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	68d9      	ldr	r1, [r3, #12]
 8007e3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e40:	4613      	mov	r3, r2
 8007e42:	005b      	lsls	r3, r3, #1
 8007e44:	4413      	add	r3, r2
 8007e46:	00db      	lsls	r3, r3, #3
 8007e48:	3350      	adds	r3, #80	; 0x50
 8007e4a:	443b      	add	r3, r7
 8007e4c:	3b30      	subs	r3, #48	; 0x30
 8007e4e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d117      	bne.n	8007e84 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	6919      	ldr	r1, [r3, #16]
 8007e58:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	4413      	add	r3, r2
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	3350      	adds	r3, #80	; 0x50
 8007e66:	443b      	add	r3, r7
 8007e68:	3b2c      	subs	r3, #44	; 0x2c
 8007e6a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007e6c:	4299      	cmp	r1, r3
 8007e6e:	d109      	bne.n	8007e84 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007e70:	4b03      	ldr	r3, [pc, #12]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a02      	ldr	r2, [pc, #8]	; (8007e80 <HAL_OSPIM_Config+0x508>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	6013      	str	r3, [r2, #0]
 8007e7c:	e0ce      	b.n	800801c <HAL_OSPIM_Config+0x6a4>
 8007e7e:	bf00      	nop
 8007e80:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007e84:	49a4      	ldr	r1, [pc, #656]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007e86:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	4413      	add	r3, r2
 8007e90:	00db      	lsls	r3, r3, #3
 8007e92:	3350      	adds	r3, #80	; 0x50
 8007e94:	443b      	add	r3, r7
 8007e96:	3b3c      	subs	r3, #60	; 0x3c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	440b      	add	r3, r1
 8007ea0:	6859      	ldr	r1, [r3, #4]
 8007ea2:	489d      	ldr	r0, [pc, #628]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007ea4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	4413      	add	r3, r2
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	3350      	adds	r3, #80	; 0x50
 8007eb2:	443b      	add	r3, r7
 8007eb4:	3b3c      	subs	r3, #60	; 0x3c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	f021 0201 	bic.w	r2, r1, #1
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4403      	add	r3, r0
 8007ec2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8007ec4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	3350      	adds	r3, #80	; 0x50
 8007ed2:	443b      	add	r3, r7
 8007ed4:	3b38      	subs	r3, #56	; 0x38
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d01f      	beq.n	8007f1c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007edc:	498e      	ldr	r1, [pc, #568]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007ede:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	3350      	adds	r3, #80	; 0x50
 8007eec:	443b      	add	r3, r7
 8007eee:	3b38      	subs	r3, #56	; 0x38
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	3b01      	subs	r3, #1
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	440b      	add	r3, r1
 8007ef8:	6859      	ldr	r1, [r3, #4]
 8007efa:	4887      	ldr	r0, [pc, #540]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007efc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f00:	4613      	mov	r3, r2
 8007f02:	005b      	lsls	r3, r3, #1
 8007f04:	4413      	add	r3, r2
 8007f06:	00db      	lsls	r3, r3, #3
 8007f08:	3350      	adds	r3, #80	; 0x50
 8007f0a:	443b      	add	r3, r7
 8007f0c:	3b38      	subs	r3, #56	; 0x38
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3b01      	subs	r3, #1
 8007f12:	f021 0210 	bic.w	r2, r1, #16
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4403      	add	r3, r0
 8007f1a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8007f1c:	497e      	ldr	r1, [pc, #504]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007f1e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f22:	4613      	mov	r3, r2
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	4413      	add	r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	3350      	adds	r3, #80	; 0x50
 8007f2c:	443b      	add	r3, r7
 8007f2e:	3b34      	subs	r3, #52	; 0x34
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	440b      	add	r3, r1
 8007f38:	6859      	ldr	r1, [r3, #4]
 8007f3a:	4877      	ldr	r0, [pc, #476]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007f3c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f40:	4613      	mov	r3, r2
 8007f42:	005b      	lsls	r3, r3, #1
 8007f44:	4413      	add	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	3350      	adds	r3, #80	; 0x50
 8007f4a:	443b      	add	r3, r7
 8007f4c:	3b34      	subs	r3, #52	; 0x34
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	4403      	add	r3, r0
 8007f5a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007f5c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f60:	4613      	mov	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	4413      	add	r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	3350      	adds	r3, #80	; 0x50
 8007f6a:	443b      	add	r3, r7
 8007f6c:	3b30      	subs	r3, #48	; 0x30
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d023      	beq.n	8007fbc <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007f74:	4968      	ldr	r1, [pc, #416]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007f76:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	4413      	add	r3, r2
 8007f80:	00db      	lsls	r3, r3, #3
 8007f82:	3350      	adds	r3, #80	; 0x50
 8007f84:	443b      	add	r3, r7
 8007f86:	3b30      	subs	r3, #48	; 0x30
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	6859      	ldr	r1, [r3, #4]
 8007f96:	4860      	ldr	r0, [pc, #384]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007f98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	005b      	lsls	r3, r3, #1
 8007fa0:	4413      	add	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	3350      	adds	r3, #80	; 0x50
 8007fa6:	443b      	add	r3, r7
 8007fa8:	3b30      	subs	r3, #48	; 0x30
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	4403      	add	r3, r0
 8007fba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007fbc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	3350      	adds	r3, #80	; 0x50
 8007fca:	443b      	add	r3, r7
 8007fcc:	3b2c      	subs	r3, #44	; 0x2c
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d023      	beq.n	800801c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007fd4:	4950      	ldr	r1, [pc, #320]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007fd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007fda:	4613      	mov	r3, r2
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	4413      	add	r3, r2
 8007fe0:	00db      	lsls	r3, r3, #3
 8007fe2:	3350      	adds	r3, #80	; 0x50
 8007fe4:	443b      	add	r3, r7
 8007fe6:	3b2c      	subs	r3, #44	; 0x2c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3b01      	subs	r3, #1
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	6859      	ldr	r1, [r3, #4]
 8007ff6:	4848      	ldr	r0, [pc, #288]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8007ff8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	005b      	lsls	r3, r3, #1
 8008000:	4413      	add	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	3350      	adds	r3, #80	; 0x50
 8008006:	443b      	add	r3, r7
 8008008:	3b2c      	subs	r3, #44	; 0x2c
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	3b01      	subs	r3, #1
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	4403      	add	r3, r0
 800801a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800801c:	4a3e      	ldr	r2, [pc, #248]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	3b01      	subs	r3, #1
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800802e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008030:	025b      	lsls	r3, r3, #9
 8008032:	431a      	orrs	r2, r3
 8008034:	4938      	ldr	r1, [pc, #224]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	3b01      	subs	r3, #1
 800803c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	440b      	add	r3, r1
 8008044:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d018      	beq.n	8008080 <HAL_OSPIM_Config+0x708>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008056:	d813      	bhi.n	8008080 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	4b2e      	ldr	r3, [pc, #184]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	b2db      	uxtb	r3, r3
 8008066:	429a      	cmp	r2, r3
 8008068:	d90a      	bls.n	8008080 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 800806a:	4b2b      	ldr	r3, [pc, #172]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	3b01      	subs	r3, #1
 8008078:	041b      	lsls	r3, r3, #16
 800807a:	4927      	ldr	r1, [pc, #156]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 800807c:	4313      	orrs	r3, r2
 800807e:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8008080:	4b25      	ldr	r3, [pc, #148]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 0301 	and.w	r3, r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 809a 	beq.w	80081c2 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800808e:	4a22      	ldr	r2, [pc, #136]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3b01      	subs	r3, #1
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4413      	add	r3, r2
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f023 0203 	bic.w	r2, r3, #3
 80080a0:	491d      	ldr	r1, [pc, #116]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	440b      	add	r3, r1
 80080b0:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d011      	beq.n	80080de <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80080ba:	4a17      	ldr	r2, [pc, #92]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	3b01      	subs	r3, #1
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080cc:	4912      	ldr	r1, [pc, #72]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	f042 0210 	orr.w	r2, r2, #16
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	440b      	add	r3, r1
 80080dc:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d018      	beq.n	800811c <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80080ea:	4a0b      	ldr	r2, [pc, #44]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4413      	add	r3, r2
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008100:	4905      	ldr	r1, [pc, #20]	; (8008118 <HAL_OSPIM_Config+0x7a0>)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	3b01      	subs	r3, #1
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	605a      	str	r2, [r3, #4]
 8008116:	e01b      	b.n	8008150 <HAL_OSPIM_Config+0x7d8>
 8008118:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d015      	beq.n	8008150 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008124:	4a8a      	ldr	r2, [pc, #552]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	3b01      	subs	r3, #1
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	009b      	lsls	r3, r3, #2
 8008132:	4413      	add	r3, r2
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800813a:	4985      	ldr	r1, [pc, #532]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	3b01      	subs	r3, #1
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	440b      	add	r3, r1
 800814e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d016      	beq.n	800818a <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800815c:	4a7c      	ldr	r2, [pc, #496]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	3b01      	subs	r3, #1
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	4413      	add	r3, r2
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008172:	4977      	ldr	r1, [pc, #476]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	3b01      	subs	r3, #1
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	440b      	add	r3, r1
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	e0c3      	b.n	8008312 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f000 80bf 	beq.w	8008312 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008194:	4a6e      	ldr	r2, [pc, #440]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	3b01      	subs	r3, #1
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	4413      	add	r3, r2
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80081aa:	4969      	ldr	r1, [pc, #420]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	440b      	add	r3, r1
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	e0a7      	b.n	8008312 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80081c2:	4a63      	ldr	r2, [pc, #396]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4413      	add	r3, r2
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f023 0203 	bic.w	r2, r3, #3
 80081d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	431a      	orrs	r2, r3
 80081da:	495d      	ldr	r1, [pc, #372]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	f042 0201 	orr.w	r2, r2, #1
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d014      	beq.n	800821e <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80081f4:	4a56      	ldr	r2, [pc, #344]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	3b01      	subs	r3, #1
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008208:	015b      	lsls	r3, r3, #5
 800820a:	431a      	orrs	r2, r3
 800820c:	4950      	ldr	r1, [pc, #320]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	3b01      	subs	r3, #1
 8008214:	f042 0210 	orr.w	r2, r2, #16
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	440b      	add	r3, r1
 800821c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d019      	beq.n	800825e <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800822a:	4a49      	ldr	r2, [pc, #292]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	3b01      	subs	r3, #1
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008242:	049b      	lsls	r3, r3, #18
 8008244:	431a      	orrs	r2, r3
 8008246:	4942      	ldr	r1, [pc, #264]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	3b01      	subs	r3, #1
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	605a      	str	r2, [r3, #4]
 800825c:	e01c      	b.n	8008298 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d018      	beq.n	8008298 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8008266:	4a3a      	ldr	r2, [pc, #232]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	3b01      	subs	r3, #1
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800827c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800827e:	069b      	lsls	r3, r3, #26
 8008280:	431a      	orrs	r2, r3
 8008282:	4933      	ldr	r1, [pc, #204]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	3b01      	subs	r3, #1
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	440b      	add	r3, r1
 8008296:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d019      	beq.n	80082d8 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80082a4:	4a2a      	ldr	r2, [pc, #168]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082bc:	049b      	lsls	r3, r3, #18
 80082be:	431a      	orrs	r2, r3
 80082c0:	4923      	ldr	r1, [pc, #140]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691b      	ldr	r3, [r3, #16]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	e01c      	b.n	8008312 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d018      	beq.n	8008312 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80082e0:	4a1b      	ldr	r2, [pc, #108]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	f003 0301 	and.w	r3, r3, #1
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80082f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082f8:	069b      	lsls	r3, r3, #26
 80082fa:	431a      	orrs	r2, r3
 80082fc:	4914      	ldr	r1, [pc, #80]	; (8008350 <HAL_OSPIM_Config+0x9d8>)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	3b01      	subs	r3, #1
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	440b      	add	r3, r1
 8008310:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8008312:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800831e:	4b0d      	ldr	r3, [pc, #52]	; (8008354 <HAL_OSPIM_Config+0x9dc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a0c      	ldr	r2, [pc, #48]	; (8008354 <HAL_OSPIM_Config+0x9dc>)
 8008324:	f043 0301 	orr.w	r3, r3, #1
 8008328:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800832a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8008336:	4b08      	ldr	r3, [pc, #32]	; (8008358 <HAL_OSPIM_Config+0x9e0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a07      	ldr	r2, [pc, #28]	; (8008358 <HAL_OSPIM_Config+0x9e0>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8008342:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008346:	4618      	mov	r0, r3
 8008348:	3750      	adds	r7, #80	; 0x50
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	420c4000 	.word	0x420c4000
 8008354:	420d1400 	.word	0x420d1400
 8008358:	420d2400 	.word	0x420d2400

0800835c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	603b      	str	r3, [r7, #0]
 8008368:	4613      	mov	r3, r2
 800836a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800836c:	e022      	b.n	80083b4 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008374:	d01e      	beq.n	80083b4 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fd fcfd 	bl	8005d74 <HAL_GetTick>
 800837a:	4602      	mov	r2, r0
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	69ba      	ldr	r2, [r7, #24]
 8008382:	429a      	cmp	r2, r3
 8008384:	d302      	bcc.n	800838c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8008386:	69bb      	ldr	r3, [r7, #24]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d113      	bne.n	80083b4 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	401a      	ands	r2, r3
 8008396:	79fb      	ldrb	r3, [r7, #7]
 8008398:	429a      	cmp	r2, r3
 800839a:	d00b      	beq.n	80083b4 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083a2:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a8:	f043 0201 	orr.w	r2, r3, #1
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e00e      	b.n	80083d2 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a1a      	ldr	r2, [r3, #32]
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bf14      	ite	ne
 80083c2:	2301      	movne	r3, #1
 80083c4:	2300      	moveq	r3, #0
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	461a      	mov	r2, r3
 80083ca:	79fb      	ldrb	r3, [r7, #7]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d1ce      	bne.n	800836e <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80083dc:	b480      	push	{r7}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80083f0:	79fb      	ldrb	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d005      	beq.n	8008402 <OSPIM_GetConfig+0x26>
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d802      	bhi.n	8008402 <OSPIM_GetConfig+0x26>
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d102      	bne.n	8008408 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	75fb      	strb	r3, [r7, #23]
 8008406:	e098      	b.n	800853a <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2200      	movs	r2, #0
 800841e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8008426:	79fb      	ldrb	r3, [r7, #7]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d10b      	bne.n	8008444 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 800842c:	4b46      	ldr	r3, [pc, #280]	; (8008548 <OSPIM_GetConfig+0x16c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8008438:	4b44      	ldr	r3, [pc, #272]	; (800854c <OSPIM_GetConfig+0x170>)
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	e002      	b.n	8008444 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800843e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008442:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8008444:	2300      	movs	r3, #0
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e074      	b.n	8008534 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 800844a:	4a3f      	ldr	r2, [pc, #252]	; (8008548 <OSPIM_GetConfig+0x16c>)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	4413      	add	r3, r2
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00a      	beq.n	8008476 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	4053      	eors	r3, r2
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b00      	cmp	r3, #0
 800846c:	d103      	bne.n	8008476 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	1c5a      	adds	r2, r3, #1
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f003 0310 	and.w	r3, r3, #16
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	4053      	eors	r3, r2
 8008486:	f003 0320 	and.w	r3, r3, #32
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	1c5a      	adds	r2, r3, #1
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	4053      	eors	r3, r2
 80084a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d103      	bne.n	80084b6 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d018      	beq.n	80084f2 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	4053      	eors	r3, r2
 80084c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d111      	bne.n	80084f2 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3301      	adds	r3, #1
 80084dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	60da      	str	r2, [r3, #12]
 80084e4:	e005      	b.n	80084f2 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	3301      	adds	r3, #1
 80084ea:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d018      	beq.n	800852e <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	4053      	eors	r3, r2
 8008502:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d111      	bne.n	800852e <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d106      	bne.n	8008522 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3301      	adds	r3, #1
 8008518:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	611a      	str	r2, [r3, #16]
 8008520:	e005      	b.n	800852e <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	3301      	adds	r3, #1
 8008526:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	3301      	adds	r3, #1
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d987      	bls.n	800844a <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 800853a:	7dfb      	ldrb	r3, [r7, #23]
}
 800853c:	4618      	mov	r0, r3
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	420c4000 	.word	0x420c4000
 800854c:	04040222 	.word	0x04040222

08008550 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f042 0202 	orr.w	r2, r2, #2
 800856c:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2208      	movs	r2, #8
 8008572:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a15      	ldr	r2, [pc, #84]	; (80085d0 <HAL_OSPI_DLYB_SetConfig+0x80>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d109      	bne.n	8008592 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800857e:	4815      	ldr	r0, [pc, #84]	; (80085d4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8008580:	f7ff f8aa 	bl	80076d8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8008584:	6839      	ldr	r1, [r7, #0]
 8008586:	4813      	ldr	r0, [pc, #76]	; (80085d4 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8008588:	f005 f948 	bl	800d81c <LL_DLYB_SetDelay>
    status = HAL_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	73fb      	strb	r3, [r7, #15]
 8008590:	e00d      	b.n	80085ae <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

#if defined (OCTOSPI2)
  else if (hospi->Instance == OCTOSPI2)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a10      	ldr	r2, [pc, #64]	; (80085d8 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d108      	bne.n	80085ae <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 800859c:	480f      	ldr	r0, [pc, #60]	; (80085dc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800859e:	f7ff f89b 	bl	80076d8 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80085a2:	6839      	ldr	r1, [r7, #0]
 80085a4:	480d      	ldr	r0, [pc, #52]	; (80085dc <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80085a6:	f005 f939 	bl	800d81c <LL_DLYB_SetDelay>
    status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff f95e 	bl	8007870 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 0202 	bic.w	r2, r2, #2
 80085c2:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	420d1400 	.word	0x420d1400
 80085d4:	420cf000 	.word	0x420cf000
 80085d8:	420d2400 	.word	0x420d2400
 80085dc:	420cf400 	.word	0x420cf400

080085e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80085e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e2:	b08f      	sub	sp, #60	; 0x3c
 80085e4:	af0a      	add	r7, sp, #40	; 0x28
 80085e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80085ee:	2301      	movs	r3, #1
 80085f0:	e116      	b.n	8008820 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7f9 fbcb 	bl	8001da8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2203      	movs	r2, #3
 8008616:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 14)) == 0U)
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d102      	bne.n	800862c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4618      	mov	r0, r3
 8008632:	f005 fb07 	bl	800dc44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	603b      	str	r3, [r7, #0]
 800863c:	687e      	ldr	r6, [r7, #4]
 800863e:	466d      	mov	r5, sp
 8008640:	f106 0410 	add.w	r4, r6, #16
 8008644:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008646:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800864a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800864c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008650:	e885 0003 	stmia.w	r5, {r0, r1}
 8008654:	1d33      	adds	r3, r6, #4
 8008656:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008658:	6838      	ldr	r0, [r7, #0]
 800865a:	f005 fac7 	bl	800dbec <USB_CoreInit>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2202      	movs	r2, #2
 8008668:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e0d7      	b.n	8008820 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	2100      	movs	r1, #0
 8008676:	4618      	mov	r0, r3
 8008678:	f005 faf5 	bl	800dc66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800867c:	2300      	movs	r3, #0
 800867e:	73fb      	strb	r3, [r7, #15]
 8008680:	e04a      	b.n	8008718 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008682:	7bfa      	ldrb	r2, [r7, #15]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	4413      	add	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	333d      	adds	r3, #61	; 0x3d
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008696:	7bfa      	ldrb	r2, [r7, #15]
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	4613      	mov	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	4413      	add	r3, r2
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	440b      	add	r3, r1
 80086a4:	333c      	adds	r3, #60	; 0x3c
 80086a6:	7bfa      	ldrb	r2, [r7, #15]
 80086a8:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80086aa:	7bfa      	ldrb	r2, [r7, #15]
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
 80086ae:	b298      	uxth	r0, r3
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	4613      	mov	r3, r2
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	4413      	add	r3, r2
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	440b      	add	r3, r1
 80086bc:	3356      	adds	r3, #86	; 0x56
 80086be:	4602      	mov	r2, r0
 80086c0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	00db      	lsls	r3, r3, #3
 80086ca:	4413      	add	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	440b      	add	r3, r1
 80086d0:	3340      	adds	r3, #64	; 0x40
 80086d2:	2200      	movs	r2, #0
 80086d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80086d6:	7bfa      	ldrb	r2, [r7, #15]
 80086d8:	6879      	ldr	r1, [r7, #4]
 80086da:	4613      	mov	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	4413      	add	r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	440b      	add	r3, r1
 80086e4:	3344      	adds	r3, #68	; 0x44
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80086ea:	7bfa      	ldrb	r2, [r7, #15]
 80086ec:	6879      	ldr	r1, [r7, #4]
 80086ee:	4613      	mov	r3, r2
 80086f0:	00db      	lsls	r3, r3, #3
 80086f2:	4413      	add	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	440b      	add	r3, r1
 80086f8:	3348      	adds	r3, #72	; 0x48
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80086fe:	7bfa      	ldrb	r2, [r7, #15]
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	00db      	lsls	r3, r3, #3
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	334c      	adds	r3, #76	; 0x4c
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008712:	7bfb      	ldrb	r3, [r7, #15]
 8008714:	3301      	adds	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
 8008718:	7bfa      	ldrb	r2, [r7, #15]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	429a      	cmp	r2, r3
 8008720:	d3af      	bcc.n	8008682 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
 8008726:	e044      	b.n	80087b2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008728:	7bfa      	ldrb	r2, [r7, #15]
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	00db      	lsls	r3, r3, #3
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800873a:	2200      	movs	r2, #0
 800873c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800873e:	7bfa      	ldrb	r2, [r7, #15]
 8008740:	6879      	ldr	r1, [r7, #4]
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008750:	7bfa      	ldrb	r2, [r7, #15]
 8008752:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008754:	7bfa      	ldrb	r2, [r7, #15]
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	4613      	mov	r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	00db      	lsls	r3, r3, #3
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800877c:	2200      	movs	r2, #0
 800877e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	6879      	ldr	r1, [r7, #4]
 8008784:	4613      	mov	r3, r2
 8008786:	00db      	lsls	r3, r3, #3
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008792:	2200      	movs	r2, #0
 8008794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008796:	7bfa      	ldrb	r2, [r7, #15]
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	3301      	adds	r3, #1
 80087b0:	73fb      	strb	r3, [r7, #15]
 80087b2:	7bfa      	ldrb	r2, [r7, #15]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d3b5      	bcc.n	8008728 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	603b      	str	r3, [r7, #0]
 80087c2:	687e      	ldr	r6, [r7, #4]
 80087c4:	466d      	mov	r5, sp
 80087c6:	f106 0410 	add.w	r4, r6, #16
 80087ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80087da:	1d33      	adds	r3, r6, #4
 80087dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087de:	6838      	ldr	r0, [r7, #0]
 80087e0:	f005 fa8e 	bl	800dd00 <USB_DevInit>
 80087e4:	4603      	mov	r3, r0
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2202      	movs	r2, #2
 80087ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	e014      	b.n	8008820 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	2b01      	cmp	r3, #1
 800880c:	d102      	bne.n	8008814 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f80a 	bl	8008828 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f005 fc32 	bl	800e082 <USB_DevDisconnect>

  return HAL_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008828 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885a:	f043 0303 	orr.w	r3, r3, #3
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008878:	4b39      	ldr	r3, [pc, #228]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800887a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008880:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8008882:	68ba      	ldr	r2, [r7, #8]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d10b      	bne.n	80088a2 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008890:	d905      	bls.n	800889e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008892:	4b33      	ldr	r3, [pc, #204]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	4a32      	ldr	r2, [pc, #200]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800889c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800889e:	2300      	movs	r3, #0
 80088a0:	e057      	b.n	8008952 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a8:	d90a      	bls.n	80088c0 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80088aa:	4b2d      	ldr	r3, [pc, #180]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4313      	orrs	r3, r2
 80088b6:	4a2a      	ldr	r2, [pc, #168]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80088b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088bc:	60d3      	str	r3, [r2, #12]
 80088be:	e007      	b.n	80088d0 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80088c0:	4b27      	ldr	r3, [pc, #156]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80088c8:	4925      	ldr	r1, [pc, #148]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80088d0:	4b24      	ldr	r3, [pc, #144]	; (8008964 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a24      	ldr	r2, [pc, #144]	; (8008968 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80088d6:	fba2 2303 	umull	r2, r3, r2, r3
 80088da:	099b      	lsrs	r3, r3, #6
 80088dc:	2232      	movs	r2, #50	; 0x32
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	4a21      	ldr	r2, [pc, #132]	; (8008968 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80088e4:	fba2 2303 	umull	r2, r3, r2, r3
 80088e8:	099b      	lsrs	r3, r3, #6
 80088ea:	3301      	adds	r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80088ee:	e002      	b.n	80088f6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d102      	bne.n	8008908 <HAL_PWREx_ControlVoltageScaling+0x98>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f3      	bne.n	80088f0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d01b      	beq.n	8008946 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800890e:	4b15      	ldr	r3, [pc, #84]	; (8008964 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a15      	ldr	r2, [pc, #84]	; (8008968 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008914:	fba2 2303 	umull	r2, r3, r2, r3
 8008918:	099b      	lsrs	r3, r3, #6
 800891a:	2232      	movs	r2, #50	; 0x32
 800891c:	fb02 f303 	mul.w	r3, r2, r3
 8008920:	4a11      	ldr	r2, [pc, #68]	; (8008968 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008922:	fba2 2303 	umull	r2, r3, r2, r3
 8008926:	099b      	lsrs	r3, r3, #6
 8008928:	3301      	adds	r3, #1
 800892a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800892c:	e002      	b.n	8008934 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b01      	subs	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008938:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f3      	bne.n	800892e <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e000      	b.n	8008952 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	46020800 	.word	0x46020800
 8008964:	20000008 	.word	0x20000008
 8008968:	10624dd3 	.word	0x10624dd3

0800896c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <HAL_PWREx_GetVoltageRange+0x18>)
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008978:	4618      	mov	r0, r3
 800897a:	46bd      	mov	sp, r7
 800897c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop
 8008984:	46020800 	.word	0x46020800

08008988 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008990:	4b22      	ldr	r3, [pc, #136]	; (8008a1c <HAL_PWREx_ConfigSupply+0x94>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a22      	ldr	r2, [pc, #136]	; (8008a20 <HAL_PWREx_ConfigSupply+0x98>)
 8008996:	fba2 2303 	umull	r2, r3, r2, r3
 800899a:	099b      	lsrs	r3, r3, #6
 800899c:	2232      	movs	r2, #50	; 0x32
 800899e:	fb02 f303 	mul.w	r3, r2, r3
 80089a2:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <HAL_PWREx_ConfigSupply+0x98>)
 80089a4:	fba2 2303 	umull	r2, r3, r2, r3
 80089a8:	099b      	lsrs	r3, r3, #6
 80089aa:	3301      	adds	r3, #1
 80089ac:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d113      	bne.n	80089dc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80089b4:	4b1b      	ldr	r3, [pc, #108]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089ba:	f023 0302 	bic.w	r3, r3, #2
 80089be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80089c0:	e002      	b.n	80089c8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089cc:	f003 0302 	and.w	r3, r3, #2
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d116      	bne.n	8008a02 <HAL_PWREx_ConfigSupply+0x7a>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f3      	bne.n	80089c2 <HAL_PWREx_ConfigSupply+0x3a>
 80089da:	e012      	b.n	8008a02 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80089dc:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	4a10      	ldr	r2, [pc, #64]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089e2:	f043 0302 	orr.w	r3, r3, #2
 80089e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80089e8:	e002      	b.n	80089f0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3b01      	subs	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80089f0:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <HAL_PWREx_ConfigSupply+0x9c>)
 80089f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f4:	f003 0302 	and.w	r3, r3, #2
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <HAL_PWREx_ConfigSupply+0x7a>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1f3      	bne.n	80089ea <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e000      	b.n	8008a0e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	20000008 	.word	0x20000008
 8008a20:	10624dd3 	.word	0x10624dd3
 8008a24:	46020800 	.word	0x46020800

08008a28 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8008a2c:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	4a04      	ldr	r2, [pc, #16]	; (8008a44 <HAL_PWREx_EnableVddUSB+0x1c>)
 8008a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a36:	6113      	str	r3, [r2, #16]
}
 8008a38:	bf00      	nop
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	46020800 	.word	0x46020800

08008a48 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <HAL_PWREx_EnableVddIO2+0x1c>)
 8008a52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a56:	6113      	str	r3, [r2, #16]
}
 8008a58:	bf00      	nop
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	46020800 	.word	0x46020800

08008a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008a70:	2300      	movs	r3, #0
 8008a72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f000 bec8 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a82:	4b99      	ldr	r3, [pc, #612]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	f003 030c 	and.w	r3, r3, #12
 8008a8a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a8c:	4b96      	ldr	r3, [pc, #600]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0310 	and.w	r3, r3, #16
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 816c 	beq.w	8008d7c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <HAL_RCC_OscConfig+0x52>
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	2b0c      	cmp	r3, #12
 8008aae:	f040 80de 	bne.w	8008c6e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	f040 80da 	bne.w	8008c6e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d102      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f000 bea5 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008acc:	4b86      	ldr	r3, [pc, #536]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d004      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x7a>
 8008ad8:	4b83      	ldr	r3, [pc, #524]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ae0:	e005      	b.n	8008aee <HAL_RCC_OscConfig+0x86>
 8008ae2:	4b81      	ldr	r3, [pc, #516]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ae8:	041b      	lsls	r3, r3, #16
 8008aea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d255      	bcs.n	8008b9e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	4618      	mov	r0, r3
 8008afe:	f001 f9df 	bl	8009ec0 <RCC_SetFlashLatencyFromMSIRange>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d002      	beq.n	8008b0e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	f000 be82 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008b0e:	4b76      	ldr	r3, [pc, #472]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	4a75      	ldr	r2, [pc, #468]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b18:	6093      	str	r3, [r2, #8]
 8008b1a:	4b73      	ldr	r3, [pc, #460]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b26:	4970      	ldr	r1, [pc, #448]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008b34:	d309      	bcc.n	8008b4a <HAL_RCC_OscConfig+0xe2>
 8008b36:	4b6c      	ldr	r3, [pc, #432]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f023 021f 	bic.w	r2, r3, #31
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a1b      	ldr	r3, [r3, #32]
 8008b42:	4969      	ldr	r1, [pc, #420]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	60cb      	str	r3, [r1, #12]
 8008b48:	e07e      	b.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	da0a      	bge.n	8008b68 <HAL_RCC_OscConfig+0x100>
 8008b52:	4b65      	ldr	r3, [pc, #404]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	015b      	lsls	r3, r3, #5
 8008b60:	4961      	ldr	r1, [pc, #388]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60cb      	str	r3, [r1, #12]
 8008b66:	e06f      	b.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b70:	d30a      	bcc.n	8008b88 <HAL_RCC_OscConfig+0x120>
 8008b72:	4b5d      	ldr	r3, [pc, #372]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	029b      	lsls	r3, r3, #10
 8008b80:	4959      	ldr	r1, [pc, #356]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60cb      	str	r3, [r1, #12]
 8008b86:	e05f      	b.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
 8008b88:	4b57      	ldr	r3, [pc, #348]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6a1b      	ldr	r3, [r3, #32]
 8008b94:	03db      	lsls	r3, r3, #15
 8008b96:	4954      	ldr	r1, [pc, #336]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	60cb      	str	r3, [r1, #12]
 8008b9c:	e054      	b.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008b9e:	4b52      	ldr	r3, [pc, #328]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	4a51      	ldr	r2, [pc, #324]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ba4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ba8:	6093      	str	r3, [r2, #8]
 8008baa:	4b4f      	ldr	r3, [pc, #316]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb6:	494c      	ldr	r1, [pc, #304]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008bc4:	d309      	bcc.n	8008bda <HAL_RCC_OscConfig+0x172>
 8008bc6:	4b48      	ldr	r3, [pc, #288]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f023 021f 	bic.w	r2, r3, #31
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	4945      	ldr	r1, [pc, #276]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60cb      	str	r3, [r1, #12]
 8008bd8:	e028      	b.n	8008c2c <HAL_RCC_OscConfig+0x1c4>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	da0a      	bge.n	8008bf8 <HAL_RCC_OscConfig+0x190>
 8008be2:	4b41      	ldr	r3, [pc, #260]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a1b      	ldr	r3, [r3, #32]
 8008bee:	015b      	lsls	r3, r3, #5
 8008bf0:	493d      	ldr	r1, [pc, #244]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60cb      	str	r3, [r1, #12]
 8008bf6:	e019      	b.n	8008c2c <HAL_RCC_OscConfig+0x1c4>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c00:	d30a      	bcc.n	8008c18 <HAL_RCC_OscConfig+0x1b0>
 8008c02:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	4935      	ldr	r1, [pc, #212]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60cb      	str	r3, [r1, #12]
 8008c16:	e009      	b.n	8008c2c <HAL_RCC_OscConfig+0x1c4>
 8008c18:	4b33      	ldr	r3, [pc, #204]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	03db      	lsls	r3, r3, #15
 8008c26:	4930      	ldr	r1, [pc, #192]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 f942 	bl	8009ec0 <RCC_SetFlashLatencyFromMSIRange>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	f000 bde5 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008c48:	f001 f8e4 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c4c:	4b27      	ldr	r3, [pc, #156]	; (8008cec <HAL_RCC_OscConfig+0x284>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fd f845 	bl	8005ce0 <HAL_InitTick>
 8008c56:	4603      	mov	r3, r0
 8008c58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 808a 	beq.w	8008d7a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008c66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c6a:	f000 bdd2 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	69db      	ldr	r3, [r3, #28]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d066      	beq.n	8008d44 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008c76:	4b1c      	ldr	r3, [pc, #112]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008c7c:	f043 0301 	orr.w	r3, r3, #1
 8008c80:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c82:	f7fd f877 	bl	8005d74 <HAL_GetTick>
 8008c86:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008c88:	e009      	b.n	8008c9e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c8a:	f7fd f873 	bl	8005d74 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d902      	bls.n	8008c9e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	f000 bdba 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008c9e:	4b12      	ldr	r3, [pc, #72]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f003 0304 	and.w	r3, r3, #4
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0ef      	beq.n	8008c8a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008caa:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	4a0e      	ldr	r2, [pc, #56]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008cb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008cb4:	6093      	str	r3, [r2, #8]
 8008cb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc2:	4909      	ldr	r1, [pc, #36]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008cd0:	d30e      	bcc.n	8008cf0 <HAL_RCC_OscConfig+0x288>
 8008cd2:	4b05      	ldr	r3, [pc, #20]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f023 021f 	bic.w	r2, r3, #31
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a1b      	ldr	r3, [r3, #32]
 8008cde:	4902      	ldr	r1, [pc, #8]	; (8008ce8 <HAL_RCC_OscConfig+0x280>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60cb      	str	r3, [r1, #12]
 8008ce4:	e04a      	b.n	8008d7c <HAL_RCC_OscConfig+0x314>
 8008ce6:	bf00      	nop
 8008ce8:	46020c00 	.word	0x46020c00
 8008cec:	20000044 	.word	0x20000044
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	da0a      	bge.n	8008d0e <HAL_RCC_OscConfig+0x2a6>
 8008cf8:	4b98      	ldr	r3, [pc, #608]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	015b      	lsls	r3, r3, #5
 8008d06:	4995      	ldr	r1, [pc, #596]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60cb      	str	r3, [r1, #12]
 8008d0c:	e036      	b.n	8008d7c <HAL_RCC_OscConfig+0x314>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d16:	d30a      	bcc.n	8008d2e <HAL_RCC_OscConfig+0x2c6>
 8008d18:	4b90      	ldr	r3, [pc, #576]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6a1b      	ldr	r3, [r3, #32]
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	498d      	ldr	r1, [pc, #564]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60cb      	str	r3, [r1, #12]
 8008d2c:	e026      	b.n	8008d7c <HAL_RCC_OscConfig+0x314>
 8008d2e:	4b8b      	ldr	r3, [pc, #556]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	03db      	lsls	r3, r3, #15
 8008d3c:	4987      	ldr	r1, [pc, #540]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	60cb      	str	r3, [r1, #12]
 8008d42:	e01b      	b.n	8008d7c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008d44:	4b85      	ldr	r3, [pc, #532]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a84      	ldr	r2, [pc, #528]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d50:	f7fd f810 	bl	8005d74 <HAL_GetTick>
 8008d54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008d56:	e009      	b.n	8008d6c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d58:	f7fd f80c 	bl	8005d74 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d902      	bls.n	8008d6c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	f000 bd53 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008d6c:	4b7b      	ldr	r3, [pc, #492]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 0304 	and.w	r3, r3, #4
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1ef      	bne.n	8008d58 <HAL_RCC_OscConfig+0x2f0>
 8008d78:	e000      	b.n	8008d7c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008d7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 808b 	beq.w	8008ea0 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	d005      	beq.n	8008d9c <HAL_RCC_OscConfig+0x334>
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	2b0c      	cmp	r3, #12
 8008d94:	d109      	bne.n	8008daa <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d106      	bne.n	8008daa <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d17d      	bne.n	8008ea0 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f000 bd34 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db2:	d106      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x35a>
 8008db4:	4b69      	ldr	r3, [pc, #420]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a68      	ldr	r2, [pc, #416]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	e041      	b.n	8008e46 <HAL_RCC_OscConfig+0x3de>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dca:	d112      	bne.n	8008df2 <HAL_RCC_OscConfig+0x38a>
 8008dcc:	4b63      	ldr	r3, [pc, #396]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a62      	ldr	r2, [pc, #392]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	4b60      	ldr	r3, [pc, #384]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a5f      	ldr	r2, [pc, #380]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4b5d      	ldr	r3, [pc, #372]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a5c      	ldr	r2, [pc, #368]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	e029      	b.n	8008e46 <HAL_RCC_OscConfig+0x3de>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008dfa:	d112      	bne.n	8008e22 <HAL_RCC_OscConfig+0x3ba>
 8008dfc:	4b57      	ldr	r3, [pc, #348]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a56      	ldr	r2, [pc, #344]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	4b54      	ldr	r3, [pc, #336]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a53      	ldr	r2, [pc, #332]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	4b51      	ldr	r3, [pc, #324]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a50      	ldr	r2, [pc, #320]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	e011      	b.n	8008e46 <HAL_RCC_OscConfig+0x3de>
 8008e22:	4b4e      	ldr	r3, [pc, #312]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a4d      	ldr	r2, [pc, #308]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e2c:	6013      	str	r3, [r2, #0]
 8008e2e:	4b4b      	ldr	r3, [pc, #300]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a4a      	ldr	r2, [pc, #296]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	4b48      	ldr	r3, [pc, #288]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a47      	ldr	r2, [pc, #284]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e40:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d014      	beq.n	8008e78 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008e4e:	f7fc ff91 	bl	8005d74 <HAL_GetTick>
 8008e52:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e54:	e009      	b.n	8008e6a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e56:	f7fc ff8d 	bl	8005d74 <HAL_GetTick>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	2b64      	cmp	r3, #100	; 0x64
 8008e62:	d902      	bls.n	8008e6a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	f000 bcd4 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e6a:	4b3c      	ldr	r3, [pc, #240]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0ef      	beq.n	8008e56 <HAL_RCC_OscConfig+0x3ee>
 8008e76:	e013      	b.n	8008ea0 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008e78:	f7fc ff7c 	bl	8005d74 <HAL_GetTick>
 8008e7c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e7e:	e009      	b.n	8008e94 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e80:	f7fc ff78 	bl	8005d74 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b64      	cmp	r3, #100	; 0x64
 8008e8c:	d902      	bls.n	8008e94 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	f000 bcbf 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e94:	4b31      	ldr	r3, [pc, #196]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d1ef      	bne.n	8008e80 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d05f      	beq.n	8008f6c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eae:	2b04      	cmp	r3, #4
 8008eb0:	d005      	beq.n	8008ebe <HAL_RCC_OscConfig+0x456>
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb4:	2b0c      	cmp	r3, #12
 8008eb6:	d114      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eba:	2b02      	cmp	r3, #2
 8008ebc:	d111      	bne.n	8008ee2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d102      	bne.n	8008ecc <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	f000 bca3 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008ecc:	4b23      	ldr	r3, [pc, #140]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	041b      	lsls	r3, r3, #16
 8008eda:	4920      	ldr	r1, [pc, #128]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008ee0:	e044      	b.n	8008f6c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d024      	beq.n	8008f34 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008eea:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1b      	ldr	r2, [pc, #108]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ef4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008ef6:	f7fc ff3d 	bl	8005d74 <HAL_GetTick>
 8008efa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008efc:	e009      	b.n	8008f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008efe:	f7fc ff39 	bl	8005d74 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d902      	bls.n	8008f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	f000 bc80 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f12:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d0ef      	beq.n	8008efe <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	490b      	ldr	r1, [pc, #44]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
 8008f32:	e01b      	b.n	8008f6c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008f34:	4b09      	ldr	r3, [pc, #36]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <HAL_RCC_OscConfig+0x4f4>)
 8008f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f3e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f40:	f7fc ff18 	bl	8005d74 <HAL_GetTick>
 8008f44:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f46:	e00b      	b.n	8008f60 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f48:	f7fc ff14 	bl	8005d74 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d904      	bls.n	8008f60 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	f000 bc5b 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
 8008f5c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f60:	4baf      	ldr	r3, [pc, #700]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1ed      	bne.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0308 	and.w	r3, r3, #8
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 80c8 	beq.w	800910a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f80:	4ba7      	ldr	r3, [pc, #668]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f86:	f003 0304 	and.w	r3, r3, #4
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d111      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f8e:	4ba4      	ldr	r3, [pc, #656]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008f90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f94:	4aa2      	ldr	r2, [pc, #648]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008f96:	f043 0304 	orr.w	r3, r3, #4
 8008f9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008f9e:	4ba0      	ldr	r3, [pc, #640]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008fac:	2301      	movs	r3, #1
 8008fae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008fb2:	4b9c      	ldr	r3, [pc, #624]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8008fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d119      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008fbe:	4b99      	ldr	r3, [pc, #612]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	4a98      	ldr	r2, [pc, #608]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8008fc4:	f043 0301 	orr.w	r3, r3, #1
 8008fc8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fca:	f7fc fed3 	bl	8005d74 <HAL_GetTick>
 8008fce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008fd0:	e009      	b.n	8008fe6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd2:	f7fc fecf 	bl	8005d74 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d902      	bls.n	8008fe6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	f000 bc16 	b.w	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008fe6:	4b8f      	ldr	r3, [pc, #572]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	f003 0301 	and.w	r3, r3, #1
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d0ef      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d05f      	beq.n	80090ba <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8008ffa:	4b89      	ldr	r3, [pc, #548]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8008ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009000:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	699a      	ldr	r2, [r3, #24]
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800900c:	429a      	cmp	r2, r3
 800900e:	d037      	beq.n	8009080 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009016:	2b00      	cmp	r3, #0
 8009018:	d006      	beq.n	8009028 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800901a:	6a3b      	ldr	r3, [r7, #32]
 800901c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e3f4      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01b      	beq.n	800906a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8009032:	4b7b      	ldr	r3, [pc, #492]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009038:	4a79      	ldr	r2, [pc, #484]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800903a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800903e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8009042:	f7fc fe97 	bl	8005d74 <HAL_GetTick>
 8009046:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009048:	e008      	b.n	800905c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800904a:	f7fc fe93 	bl	8005d74 <HAL_GetTick>
 800904e:	4602      	mov	r2, r0
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	1ad3      	subs	r3, r2, r3
 8009054:	2b05      	cmp	r3, #5
 8009056:	d901      	bls.n	800905c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8009058:	2303      	movs	r3, #3
 800905a:	e3da      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800905c:	4b70      	ldr	r3, [pc, #448]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800905e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1ef      	bne.n	800904a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800906a:	4b6d      	ldr	r3, [pc, #436]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800906c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009070:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	4969      	ldr	r1, [pc, #420]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800907a:	4313      	orrs	r3, r2
 800907c:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009080:	4b67      	ldr	r3, [pc, #412]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009086:	4a66      	ldr	r2, [pc, #408]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009088:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800908c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8009090:	f7fc fe70 	bl	8005d74 <HAL_GetTick>
 8009094:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009098:	f7fc fe6c 	bl	8005d74 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e3b3      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80090aa:	4b5d      	ldr	r3, [pc, #372]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80090ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0ef      	beq.n	8009098 <HAL_RCC_OscConfig+0x630>
 80090b8:	e01b      	b.n	80090f2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80090ba:	4b59      	ldr	r3, [pc, #356]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80090bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090c0:	4a57      	ldr	r2, [pc, #348]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80090c2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80090c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80090ca:	f7fc fe53 	bl	8005d74 <HAL_GetTick>
 80090ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090d2:	f7fc fe4f 	bl	8005d74 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e396      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80090e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1ef      	bne.n	80090d2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d107      	bne.n	800910a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090fa:	4b49      	ldr	r3, [pc, #292]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80090fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009100:	4a47      	ldr	r2, [pc, #284]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009102:	f023 0304 	bic.w	r3, r3, #4
 8009106:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8111 	beq.w	800933a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8009118:	2300      	movs	r3, #0
 800911a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800911e:	4b40      	ldr	r3, [pc, #256]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009124:	f003 0304 	and.w	r3, r3, #4
 8009128:	2b00      	cmp	r3, #0
 800912a:	d111      	bne.n	8009150 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800912c:	4b3c      	ldr	r3, [pc, #240]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800912e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009132:	4a3b      	ldr	r2, [pc, #236]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 8009134:	f043 0304 	orr.w	r3, r3, #4
 8009138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800913c:	4b38      	ldr	r3, [pc, #224]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 800913e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009142:	f003 0304 	and.w	r3, r3, #4
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800914a:	2301      	movs	r3, #1
 800914c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009150:	4b34      	ldr	r3, [pc, #208]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8009152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d118      	bne.n	800918e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800915c:	4b31      	ldr	r3, [pc, #196]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 800915e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009160:	4a30      	ldr	r2, [pc, #192]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8009162:	f043 0301 	orr.w	r3, r3, #1
 8009166:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009168:	f7fc fe04 	bl	8005d74 <HAL_GetTick>
 800916c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009170:	f7fc fe00 	bl	8005d74 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e347      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009182:	4b28      	ldr	r3, [pc, #160]	; (8009224 <HAL_RCC_OscConfig+0x7bc>)
 8009184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009186:	f003 0301 	and.w	r3, r3, #1
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f0      	beq.n	8009170 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f003 0301 	and.w	r3, r3, #1
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01f      	beq.n	80091da <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0304 	and.w	r3, r3, #4
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d010      	beq.n	80091c8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80091a6:	4b1e      	ldr	r3, [pc, #120]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091ac:	4a1c      	ldr	r2, [pc, #112]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091ae:	f043 0304 	orr.w	r3, r3, #4
 80091b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091b6:	4b1a      	ldr	r3, [pc, #104]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091bc:	4a18      	ldr	r2, [pc, #96]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091be:	f043 0301 	orr.w	r3, r3, #1
 80091c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80091c6:	e018      	b.n	80091fa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091c8:	4b15      	ldr	r3, [pc, #84]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091ce:	4a14      	ldr	r2, [pc, #80]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091d0:	f043 0301 	orr.w	r3, r3, #1
 80091d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80091d8:	e00f      	b.n	80091fa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091da:	4b11      	ldr	r3, [pc, #68]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091e0:	4a0f      	ldr	r2, [pc, #60]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80091ea:	4b0d      	ldr	r3, [pc, #52]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091f0:	4a0b      	ldr	r2, [pc, #44]	; (8009220 <HAL_RCC_OscConfig+0x7b8>)
 80091f2:	f023 0304 	bic.w	r3, r3, #4
 80091f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d057      	beq.n	80092b2 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8009202:	f7fc fdb7 	bl	8005d74 <HAL_GetTick>
 8009206:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009208:	e00e      	b.n	8009228 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800920a:	f7fc fdb3 	bl	8005d74 <HAL_GetTick>
 800920e:	4602      	mov	r2, r0
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	f241 3288 	movw	r2, #5000	; 0x1388
 8009218:	4293      	cmp	r3, r2
 800921a:	d905      	bls.n	8009228 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e2f8      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
 8009220:	46020c00 	.word	0x46020c00
 8009224:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009228:	4b9c      	ldr	r3, [pc, #624]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800922a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0e9      	beq.n	800920a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01b      	beq.n	800927a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009242:	4b96      	ldr	r3, [pc, #600]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009244:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009248:	4a94      	ldr	r2, [pc, #592]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800924a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800924e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009252:	e00a      	b.n	800926a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009254:	f7fc fd8e 	bl	8005d74 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009262:	4293      	cmp	r3, r2
 8009264:	d901      	bls.n	800926a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e2d3      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800926a:	4b8c      	ldr	r3, [pc, #560]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800926c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009274:	2b00      	cmp	r3, #0
 8009276:	d0ed      	beq.n	8009254 <HAL_RCC_OscConfig+0x7ec>
 8009278:	e053      	b.n	8009322 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800927a:	4b88      	ldr	r3, [pc, #544]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800927c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009280:	4a86      	ldr	r2, [pc, #536]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800928a:	e00a      	b.n	80092a2 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800928c:	f7fc fd72 	bl	8005d74 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	f241 3288 	movw	r2, #5000	; 0x1388
 800929a:	4293      	cmp	r3, r2
 800929c:	d901      	bls.n	80092a2 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800929e:	2303      	movs	r3, #3
 80092a0:	e2b7      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80092a2:	4b7e      	ldr	r3, [pc, #504]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80092a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1ed      	bne.n	800928c <HAL_RCC_OscConfig+0x824>
 80092b0:	e037      	b.n	8009322 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80092b2:	f7fc fd5f 	bl	8005d74 <HAL_GetTick>
 80092b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092b8:	e00a      	b.n	80092d0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ba:	f7fc fd5b 	bl	8005d74 <HAL_GetTick>
 80092be:	4602      	mov	r2, r0
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e2a0      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092d0:	4b72      	ldr	r3, [pc, #456]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80092d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1ed      	bne.n	80092ba <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80092de:	4b6f      	ldr	r3, [pc, #444]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80092e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d01a      	beq.n	8009322 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80092ec:	4b6b      	ldr	r3, [pc, #428]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80092ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092f2:	4a6a      	ldr	r2, [pc, #424]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80092f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80092fc:	e00a      	b.n	8009314 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092fe:	f7fc fd39 	bl	8005d74 <HAL_GetTick>
 8009302:	4602      	mov	r2, r0
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	1ad3      	subs	r3, r2, r3
 8009308:	f241 3288 	movw	r2, #5000	; 0x1388
 800930c:	4293      	cmp	r3, r2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e27e      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009314:	4b61      	ldr	r3, [pc, #388]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009316:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800931a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1ed      	bne.n	80092fe <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009322:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8009326:	2b01      	cmp	r3, #1
 8009328:	d107      	bne.n	800933a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800932a:	4b5c      	ldr	r3, [pc, #368]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800932c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009330:	4a5a      	ldr	r2, [pc, #360]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009332:	f023 0304 	bic.w	r3, r3, #4
 8009336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0320 	and.w	r3, r3, #32
 8009342:	2b00      	cmp	r3, #0
 8009344:	d036      	beq.n	80093b4 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934a:	2b00      	cmp	r3, #0
 800934c:	d019      	beq.n	8009382 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800934e:	4b53      	ldr	r3, [pc, #332]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a52      	ldr	r2, [pc, #328]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009358:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800935a:	f7fc fd0b 	bl	8005d74 <HAL_GetTick>
 800935e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009360:	e008      	b.n	8009374 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009362:	f7fc fd07 	bl	8005d74 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936a:	1ad3      	subs	r3, r2, r3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d901      	bls.n	8009374 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e24e      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009374:	4b49      	ldr	r3, [pc, #292]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0f0      	beq.n	8009362 <HAL_RCC_OscConfig+0x8fa>
 8009380:	e018      	b.n	80093b4 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8009382:	4b46      	ldr	r3, [pc, #280]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a45      	ldr	r2, [pc, #276]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009388:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800938c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800938e:	f7fc fcf1 	bl	8005d74 <HAL_GetTick>
 8009392:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009394:	e008      	b.n	80093a8 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009396:	f7fc fced 	bl	8005d74 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d901      	bls.n	80093a8 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e234      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80093a8:	4b3c      	ldr	r3, [pc, #240]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1f0      	bne.n	8009396 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d036      	beq.n	800942e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d019      	beq.n	80093fc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80093c8:	4b34      	ldr	r3, [pc, #208]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a33      	ldr	r2, [pc, #204]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80093ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80093d4:	f7fc fcce 	bl	8005d74 <HAL_GetTick>
 80093d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80093da:	e008      	b.n	80093ee <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80093dc:	f7fc fcca 	bl	8005d74 <HAL_GetTick>
 80093e0:	4602      	mov	r2, r0
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d901      	bls.n	80093ee <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80093ea:	2303      	movs	r3, #3
 80093ec:	e211      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80093ee:	4b2b      	ldr	r3, [pc, #172]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0f0      	beq.n	80093dc <HAL_RCC_OscConfig+0x974>
 80093fa:	e018      	b.n	800942e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80093fc:	4b27      	ldr	r3, [pc, #156]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a26      	ldr	r2, [pc, #152]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009406:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009408:	f7fc fcb4 	bl	8005d74 <HAL_GetTick>
 800940c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800940e:	e008      	b.n	8009422 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009410:	f7fc fcb0 	bl	8005d74 <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b02      	cmp	r3, #2
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e1f7      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009422:	4b1e      	ldr	r3, [pc, #120]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1f0      	bne.n	8009410 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d07f      	beq.n	800953a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943e:	2b00      	cmp	r3, #0
 8009440:	d062      	beq.n	8009508 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8009442:	4b16      	ldr	r3, [pc, #88]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	4a15      	ldr	r2, [pc, #84]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800944c:	6093      	str	r3, [r2, #8]
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	4910      	ldr	r1, [pc, #64]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800945c:	4313      	orrs	r3, r2
 800945e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009464:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009468:	d309      	bcc.n	800947e <HAL_RCC_OscConfig+0xa16>
 800946a:	4b0c      	ldr	r3, [pc, #48]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	f023 021f 	bic.w	r2, r3, #31
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	4909      	ldr	r1, [pc, #36]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009478:	4313      	orrs	r3, r2
 800947a:	60cb      	str	r3, [r1, #12]
 800947c:	e02a      	b.n	80094d4 <HAL_RCC_OscConfig+0xa6c>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009482:	2b00      	cmp	r3, #0
 8009484:	da0c      	bge.n	80094a0 <HAL_RCC_OscConfig+0xa38>
 8009486:	4b05      	ldr	r3, [pc, #20]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	015b      	lsls	r3, r3, #5
 8009494:	4901      	ldr	r1, [pc, #4]	; (800949c <HAL_RCC_OscConfig+0xa34>)
 8009496:	4313      	orrs	r3, r2
 8009498:	60cb      	str	r3, [r1, #12]
 800949a:	e01b      	b.n	80094d4 <HAL_RCC_OscConfig+0xa6c>
 800949c:	46020c00 	.word	0x46020c00
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094a8:	d30a      	bcc.n	80094c0 <HAL_RCC_OscConfig+0xa58>
 80094aa:	4ba1      	ldr	r3, [pc, #644]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	029b      	lsls	r3, r3, #10
 80094b8:	499d      	ldr	r1, [pc, #628]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	60cb      	str	r3, [r1, #12]
 80094be:	e009      	b.n	80094d4 <HAL_RCC_OscConfig+0xa6c>
 80094c0:	4b9b      	ldr	r3, [pc, #620]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	03db      	lsls	r3, r3, #15
 80094ce:	4998      	ldr	r1, [pc, #608]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80094d4:	4b96      	ldr	r3, [pc, #600]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a95      	ldr	r2, [pc, #596]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094da:	f043 0310 	orr.w	r3, r3, #16
 80094de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80094e0:	f7fc fc48 	bl	8005d74 <HAL_GetTick>
 80094e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80094e6:	e008      	b.n	80094fa <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80094e8:	f7fc fc44 	bl	8005d74 <HAL_GetTick>
 80094ec:	4602      	mov	r2, r0
 80094ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e18b      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80094fa:	4b8d      	ldr	r3, [pc, #564]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d0f0      	beq.n	80094e8 <HAL_RCC_OscConfig+0xa80>
 8009506:	e018      	b.n	800953a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009508:	4b89      	ldr	r3, [pc, #548]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a88      	ldr	r2, [pc, #544]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800950e:	f023 0310 	bic.w	r3, r3, #16
 8009512:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009514:	f7fc fc2e 	bl	8005d74 <HAL_GetTick>
 8009518:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800951a:	e008      	b.n	800952e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800951c:	f7fc fc2a 	bl	8005d74 <HAL_GetTick>
 8009520:	4602      	mov	r2, r0
 8009522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009524:	1ad3      	subs	r3, r2, r3
 8009526:	2b02      	cmp	r3, #2
 8009528:	d901      	bls.n	800952e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800952a:	2303      	movs	r3, #3
 800952c:	e171      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800952e:	4b80      	ldr	r3, [pc, #512]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d1f0      	bne.n	800951c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953e:	2b00      	cmp	r3, #0
 8009540:	f000 8166 	beq.w	8009810 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8009544:	2300      	movs	r3, #0
 8009546:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800954a:	4b79      	ldr	r3, [pc, #484]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	f003 030c 	and.w	r3, r3, #12
 8009552:	2b0c      	cmp	r3, #12
 8009554:	f000 80f2 	beq.w	800973c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	2b02      	cmp	r3, #2
 800955e:	f040 80c5 	bne.w	80096ec <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009562:	4b73      	ldr	r3, [pc, #460]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a72      	ldr	r2, [pc, #456]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009568:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800956c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800956e:	f7fc fc01 	bl	8005d74 <HAL_GetTick>
 8009572:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009574:	e008      	b.n	8009588 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009576:	f7fc fbfd 	bl	8005d74 <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	2b02      	cmp	r3, #2
 8009582:	d901      	bls.n	8009588 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e144      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009588:	4b69      	ldr	r3, [pc, #420]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f0      	bne.n	8009576 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009594:	4b66      	ldr	r3, [pc, #408]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d111      	bne.n	80095c6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80095a2:	4b63      	ldr	r3, [pc, #396]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80095a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095a8:	4a61      	ldr	r2, [pc, #388]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80095aa:	f043 0304 	orr.w	r3, r3, #4
 80095ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80095b2:	4b5f      	ldr	r3, [pc, #380]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80095b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b8:	f003 0304 	and.w	r3, r3, #4
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80095c6:	4b5b      	ldr	r3, [pc, #364]	; (8009734 <HAL_RCC_OscConfig+0xccc>)
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095d2:	d102      	bne.n	80095da <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80095d4:	2301      	movs	r3, #1
 80095d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80095da:	4b56      	ldr	r3, [pc, #344]	; (8009734 <HAL_RCC_OscConfig+0xccc>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	4a55      	ldr	r2, [pc, #340]	; (8009734 <HAL_RCC_OscConfig+0xccc>)
 80095e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80095e6:	4b52      	ldr	r3, [pc, #328]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80095fa:	3a01      	subs	r2, #1
 80095fc:	0212      	lsls	r2, r2, #8
 80095fe:	4311      	orrs	r1, r2
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009604:	430a      	orrs	r2, r1
 8009606:	494a      	ldr	r1, [pc, #296]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009608:	4313      	orrs	r3, r2
 800960a:	628b      	str	r3, [r1, #40]	; 0x28
 800960c:	4b48      	ldr	r3, [pc, #288]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800960e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009610:	4b49      	ldr	r3, [pc, #292]	; (8009738 <HAL_RCC_OscConfig+0xcd0>)
 8009612:	4013      	ands	r3, r2
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009618:	3a01      	subs	r2, #1
 800961a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009622:	3a01      	subs	r2, #1
 8009624:	0252      	lsls	r2, r2, #9
 8009626:	b292      	uxth	r2, r2
 8009628:	4311      	orrs	r1, r2
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800962e:	3a01      	subs	r2, #1
 8009630:	0412      	lsls	r2, r2, #16
 8009632:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009636:	4311      	orrs	r1, r2
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800963c:	3a01      	subs	r2, #1
 800963e:	0612      	lsls	r2, r2, #24
 8009640:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009644:	430a      	orrs	r2, r1
 8009646:	493a      	ldr	r1, [pc, #232]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009648:	4313      	orrs	r3, r2
 800964a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800964c:	4b38      	ldr	r3, [pc, #224]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800964e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009650:	4a37      	ldr	r2, [pc, #220]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009652:	f023 0310 	bic.w	r3, r3, #16
 8009656:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800965c:	4a34      	ldr	r2, [pc, #208]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800965e:	00db      	lsls	r3, r3, #3
 8009660:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009662:	4b33      	ldr	r3, [pc, #204]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009666:	4a32      	ldr	r2, [pc, #200]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009668:	f043 0310 	orr.w	r3, r3, #16
 800966c:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800966e:	4b30      	ldr	r3, [pc, #192]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009672:	f023 020c 	bic.w	r2, r3, #12
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967a:	492d      	ldr	r1, [pc, #180]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800967c:	4313      	orrs	r3, r2
 800967e:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009680:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009684:	2b01      	cmp	r3, #1
 8009686:	d105      	bne.n	8009694 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8009688:	4b2a      	ldr	r3, [pc, #168]	; (8009734 <HAL_RCC_OscConfig+0xccc>)
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	4a29      	ldr	r2, [pc, #164]	; (8009734 <HAL_RCC_OscConfig+0xccc>)
 800968e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009692:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8009694:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009698:	2b01      	cmp	r3, #1
 800969a:	d107      	bne.n	80096ac <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800969c:	4b24      	ldr	r3, [pc, #144]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 800969e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096a2:	4a23      	ldr	r2, [pc, #140]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096a4:	f023 0304 	bic.w	r3, r3, #4
 80096a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096ac:	4b20      	ldr	r3, [pc, #128]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b0:	4a1f      	ldr	r2, [pc, #124]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80096b8:	4b1d      	ldr	r3, [pc, #116]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a1c      	ldr	r2, [pc, #112]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80096c4:	f7fc fb56 	bl	8005d74 <HAL_GetTick>
 80096c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80096ca:	e008      	b.n	80096de <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096cc:	f7fc fb52 	bl	8005d74 <HAL_GetTick>
 80096d0:	4602      	mov	r2, r0
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	1ad3      	subs	r3, r2, r3
 80096d6:	2b02      	cmp	r3, #2
 80096d8:	d901      	bls.n	80096de <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80096da:	2303      	movs	r3, #3
 80096dc:	e099      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80096de:	4b14      	ldr	r3, [pc, #80]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d0f0      	beq.n	80096cc <HAL_RCC_OscConfig+0xc64>
 80096ea:	e091      	b.n	8009810 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80096ec:	4b10      	ldr	r3, [pc, #64]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a0f      	ldr	r2, [pc, #60]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 80096f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80096f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80096f8:	f7fc fb3c 	bl	8005d74 <HAL_GetTick>
 80096fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80096fe:	e008      	b.n	8009712 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009700:	f7fc fb38 	bl	8005d74 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	2b02      	cmp	r3, #2
 800970c:	d901      	bls.n	8009712 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800970e:	2303      	movs	r3, #3
 8009710:	e07f      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009712:	4b07      	ldr	r3, [pc, #28]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1f0      	bne.n	8009700 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800971e:	4b04      	ldr	r3, [pc, #16]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	4a03      	ldr	r2, [pc, #12]	; (8009730 <HAL_RCC_OscConfig+0xcc8>)
 8009724:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009728:	f023 0303 	bic.w	r3, r3, #3
 800972c:	6293      	str	r3, [r2, #40]	; 0x28
 800972e:	e06f      	b.n	8009810 <HAL_RCC_OscConfig+0xda8>
 8009730:	46020c00 	.word	0x46020c00
 8009734:	46020800 	.word	0x46020800
 8009738:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800973c:	4b37      	ldr	r3, [pc, #220]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009742:	4b36      	ldr	r3, [pc, #216]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 8009744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009746:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	2b01      	cmp	r3, #1
 800974e:	d039      	beq.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	f003 0203 	and.w	r2, r3, #3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975a:	429a      	cmp	r2, r3
 800975c:	d132      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	0a1b      	lsrs	r3, r3, #8
 8009762:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800976c:	429a      	cmp	r2, r3
 800976e:	d129      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800977a:	429a      	cmp	r2, r3
 800977c:	d122      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009788:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800978a:	429a      	cmp	r2, r3
 800978c:	d11a      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	0a5b      	lsrs	r3, r3, #9
 8009792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800979c:	429a      	cmp	r2, r3
 800979e:	d111      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	0c1b      	lsrs	r3, r3, #16
 80097a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097ac:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d108      	bne.n	80097c4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	0e1b      	lsrs	r3, r3, #24
 80097b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d001      	beq.n	80097c8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	e024      	b.n	8009812 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80097c8:	4b14      	ldr	r3, [pc, #80]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 80097ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097cc:	08db      	lsrs	r3, r3, #3
 80097ce:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d01a      	beq.n	8009810 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80097da:	4b10      	ldr	r3, [pc, #64]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 80097dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097de:	4a0f      	ldr	r2, [pc, #60]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 80097e0:	f023 0310 	bic.w	r3, r3, #16
 80097e4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097e6:	f7fc fac5 	bl	8005d74 <HAL_GetTick>
 80097ea:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80097ec:	bf00      	nop
 80097ee:	f7fc fac1 	bl	8005d74 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d0f9      	beq.n	80097ee <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097fe:	4a07      	ldr	r2, [pc, #28]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 8009800:	00db      	lsls	r3, r3, #3
 8009802:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 8009806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009808:	4a04      	ldr	r2, [pc, #16]	; (800981c <HAL_RCC_OscConfig+0xdb4>)
 800980a:	f043 0310 	orr.w	r3, r3, #16
 800980e:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3738      	adds	r7, #56	; 0x38
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	46020c00 	.word	0x46020c00

08009820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e1d9      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009834:	4b9b      	ldr	r3, [pc, #620]	; (8009aa4 <HAL_RCC_ClockConfig+0x284>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 030f 	and.w	r3, r3, #15
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d910      	bls.n	8009864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009842:	4b98      	ldr	r3, [pc, #608]	; (8009aa4 <HAL_RCC_ClockConfig+0x284>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f023 020f 	bic.w	r2, r3, #15
 800984a:	4996      	ldr	r1, [pc, #600]	; (8009aa4 <HAL_RCC_ClockConfig+0x284>)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	4313      	orrs	r3, r2
 8009850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009852:	4b94      	ldr	r3, [pc, #592]	; (8009aa4 <HAL_RCC_ClockConfig+0x284>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 030f 	and.w	r3, r3, #15
 800985a:	683a      	ldr	r2, [r7, #0]
 800985c:	429a      	cmp	r2, r3
 800985e:	d001      	beq.n	8009864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e1c1      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 0310 	and.w	r3, r3, #16
 800986c:	2b00      	cmp	r3, #0
 800986e:	d010      	beq.n	8009892 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	695a      	ldr	r2, [r3, #20]
 8009874:	4b8c      	ldr	r3, [pc, #560]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800987c:	429a      	cmp	r2, r3
 800987e:	d908      	bls.n	8009892 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009880:	4b89      	ldr	r3, [pc, #548]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	4986      	ldr	r1, [pc, #536]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 800988e:	4313      	orrs	r3, r2
 8009890:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f003 0308 	and.w	r3, r3, #8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d012      	beq.n	80098c4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691a      	ldr	r2, [r3, #16]
 80098a2:	4b81      	ldr	r3, [pc, #516]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098a4:	6a1b      	ldr	r3, [r3, #32]
 80098a6:	091b      	lsrs	r3, r3, #4
 80098a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d909      	bls.n	80098c4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80098b0:	4b7d      	ldr	r3, [pc, #500]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098b2:	6a1b      	ldr	r3, [r3, #32]
 80098b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	497a      	ldr	r1, [pc, #488]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0304 	and.w	r3, r3, #4
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68da      	ldr	r2, [r3, #12]
 80098d4:	4b74      	ldr	r3, [pc, #464]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098dc:	429a      	cmp	r2, r3
 80098de:	d908      	bls.n	80098f2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80098e0:	4b71      	ldr	r3, [pc, #452]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	496e      	ldr	r1, [pc, #440]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d010      	beq.n	8009920 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	4b69      	ldr	r3, [pc, #420]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f003 030f 	and.w	r3, r3, #15
 800990a:	429a      	cmp	r2, r3
 800990c:	d908      	bls.n	8009920 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800990e:	4b66      	ldr	r3, [pc, #408]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f023 020f 	bic.w	r2, r3, #15
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	4963      	ldr	r1, [pc, #396]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 800991c:	4313      	orrs	r3, r2
 800991e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f003 0301 	and.w	r3, r3, #1
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 80d2 	beq.w	8009ad2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d143      	bne.n	80099c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800993a:	4b5b      	ldr	r3, [pc, #364]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 800993c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d110      	bne.n	800996a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009948:	4b57      	ldr	r3, [pc, #348]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 800994a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800994e:	4a56      	ldr	r2, [pc, #344]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009950:	f043 0304 	orr.w	r3, r3, #4
 8009954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009958:	4b53      	ldr	r3, [pc, #332]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 800995a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800995e:	f003 0304 	and.w	r3, r3, #4
 8009962:	60bb      	str	r3, [r7, #8]
 8009964:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8009966:	2301      	movs	r3, #1
 8009968:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800996a:	f7fc fa03 	bl	8005d74 <HAL_GetTick>
 800996e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009970:	4b4e      	ldr	r3, [pc, #312]	; (8009aac <HAL_RCC_ClockConfig+0x28c>)
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00f      	beq.n	800999c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800997c:	e008      	b.n	8009990 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800997e:	f7fc f9f9 	bl	8005d74 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d901      	bls.n	8009990 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	e12b      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009990:	4b46      	ldr	r3, [pc, #280]	; (8009aac <HAL_RCC_ClockConfig+0x28c>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d0f0      	beq.n	800997e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800999c:	7dfb      	ldrb	r3, [r7, #23]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d107      	bne.n	80099b2 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80099a2:	4b41      	ldr	r3, [pc, #260]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099a8:	4a3f      	ldr	r2, [pc, #252]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099aa:	f023 0304 	bic.w	r3, r3, #4
 80099ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80099b2:	4b3d      	ldr	r3, [pc, #244]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d121      	bne.n	8009a02 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e112      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d107      	bne.n	80099da <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099ca:	4b37      	ldr	r3, [pc, #220]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d115      	bne.n	8009a02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e106      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d107      	bne.n	80099f2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80099e2:	4b31      	ldr	r3, [pc, #196]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0304 	and.w	r3, r3, #4
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e0fa      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099f2:	4b2d      	ldr	r3, [pc, #180]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e0f2      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009a02:	4b29      	ldr	r3, [pc, #164]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f023 0203 	bic.w	r2, r3, #3
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	4926      	ldr	r1, [pc, #152]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009a14:	f7fc f9ae 	bl	8005d74 <HAL_GetTick>
 8009a18:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d112      	bne.n	8009a48 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a22:	e00a      	b.n	8009a3a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a24:	f7fc f9a6 	bl	8005d74 <HAL_GetTick>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	1ad3      	subs	r3, r2, r3
 8009a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d901      	bls.n	8009a3a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e0d6      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	f003 030c 	and.w	r3, r3, #12
 8009a42:	2b0c      	cmp	r3, #12
 8009a44:	d1ee      	bne.n	8009a24 <HAL_RCC_ClockConfig+0x204>
 8009a46:	e044      	b.n	8009ad2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d112      	bne.n	8009a76 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a50:	e00a      	b.n	8009a68 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a52:	f7fc f98f 	bl	8005d74 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d901      	bls.n	8009a68 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a64:	2303      	movs	r3, #3
 8009a66:	e0bf      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a68:	4b0f      	ldr	r3, [pc, #60]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009a6a:	69db      	ldr	r3, [r3, #28]
 8009a6c:	f003 030c 	and.w	r3, r3, #12
 8009a70:	2b08      	cmp	r3, #8
 8009a72:	d1ee      	bne.n	8009a52 <HAL_RCC_ClockConfig+0x232>
 8009a74:	e02d      	b.n	8009ad2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d123      	bne.n	8009ac6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a7e:	e00a      	b.n	8009a96 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a80:	f7fc f978 	bl	8005d74 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e0a8      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a96:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <HAL_RCC_ClockConfig+0x288>)
 8009a98:	69db      	ldr	r3, [r3, #28]
 8009a9a:	f003 030c 	and.w	r3, r3, #12
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1ee      	bne.n	8009a80 <HAL_RCC_ClockConfig+0x260>
 8009aa2:	e016      	b.n	8009ad2 <HAL_RCC_ClockConfig+0x2b2>
 8009aa4:	40022000 	.word	0x40022000
 8009aa8:	46020c00 	.word	0x46020c00
 8009aac:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab0:	f7fc f960 	bl	8005d74 <HAL_GetTick>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d901      	bls.n	8009ac6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e090      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ac6:	4b4a      	ldr	r3, [pc, #296]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f003 030c 	and.w	r3, r3, #12
 8009ace:	2b04      	cmp	r3, #4
 8009ad0:	d1ee      	bne.n	8009ab0 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 0302 	and.w	r3, r3, #2
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d010      	beq.n	8009b00 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	689a      	ldr	r2, [r3, #8]
 8009ae2:	4b43      	ldr	r3, [pc, #268]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	f003 030f 	and.w	r3, r3, #15
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d208      	bcs.n	8009b00 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009aee:	4b40      	ldr	r3, [pc, #256]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009af0:	6a1b      	ldr	r3, [r3, #32]
 8009af2:	f023 020f 	bic.w	r2, r3, #15
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	493d      	ldr	r1, [pc, #244]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b00:	4b3c      	ldr	r3, [pc, #240]	; (8009bf4 <HAL_RCC_ClockConfig+0x3d4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	683a      	ldr	r2, [r7, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d210      	bcs.n	8009b30 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b0e:	4b39      	ldr	r3, [pc, #228]	; (8009bf4 <HAL_RCC_ClockConfig+0x3d4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f023 020f 	bic.w	r2, r3, #15
 8009b16:	4937      	ldr	r1, [pc, #220]	; (8009bf4 <HAL_RCC_ClockConfig+0x3d4>)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b1e:	4b35      	ldr	r3, [pc, #212]	; (8009bf4 <HAL_RCC_ClockConfig+0x3d4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f003 030f 	and.w	r3, r3, #15
 8009b26:	683a      	ldr	r2, [r7, #0]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d001      	beq.n	8009b30 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e05b      	b.n	8009be8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d010      	beq.n	8009b5e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	4b2b      	ldr	r3, [pc, #172]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b42:	6a1b      	ldr	r3, [r3, #32]
 8009b44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d208      	bcs.n	8009b5e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009b4c:	4b28      	ldr	r3, [pc, #160]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	4925      	ldr	r1, [pc, #148]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0308 	and.w	r3, r3, #8
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d012      	beq.n	8009b90 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691a      	ldr	r2, [r3, #16]
 8009b6e:	4b20      	ldr	r3, [pc, #128]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	091b      	lsrs	r3, r3, #4
 8009b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d209      	bcs.n	8009b90 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009b7c:	4b1c      	ldr	r3, [pc, #112]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b7e:	6a1b      	ldr	r3, [r3, #32]
 8009b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	4919      	ldr	r1, [pc, #100]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 0310 	and.w	r3, r3, #16
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d010      	beq.n	8009bbe <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	695a      	ldr	r2, [r3, #20]
 8009ba0:	4b13      	ldr	r3, [pc, #76]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d208      	bcs.n	8009bbe <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009bac:	4b10      	ldr	r3, [pc, #64]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	490d      	ldr	r1, [pc, #52]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009bbe:	f000 f821 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <HAL_RCC_ClockConfig+0x3d0>)
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	f003 030f 	and.w	r3, r3, #15
 8009bcc:	490a      	ldr	r1, [pc, #40]	; (8009bf8 <HAL_RCC_ClockConfig+0x3d8>)
 8009bce:	5ccb      	ldrb	r3, [r1, r3]
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd4:	4a09      	ldr	r2, [pc, #36]	; (8009bfc <HAL_RCC_ClockConfig+0x3dc>)
 8009bd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009bd8:	4b09      	ldr	r3, [pc, #36]	; (8009c00 <HAL_RCC_ClockConfig+0x3e0>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fc f87f 	bl	8005ce0 <HAL_InitTick>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

  return status;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3718      	adds	r7, #24
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	46020c00 	.word	0x46020c00
 8009bf4:	40022000 	.word	0x40022000
 8009bf8:	0800eb50 	.word	0x0800eb50
 8009bfc:	20000008 	.word	0x20000008
 8009c00:	20000044 	.word	0x20000044

08009c04 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b08b      	sub	sp, #44	; 0x2c
 8009c08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	f003 030c 	and.w	r3, r3, #12
 8009c1a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c1c:	4b78      	ldr	r3, [pc, #480]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c20:	f003 0303 	and.w	r3, r3, #3
 8009c24:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <HAL_RCC_GetSysClockFreq+0x34>
 8009c2c:	69bb      	ldr	r3, [r7, #24]
 8009c2e:	2b0c      	cmp	r3, #12
 8009c30:	d121      	bne.n	8009c76 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d11e      	bne.n	8009c76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009c38:	4b71      	ldr	r3, [pc, #452]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d107      	bne.n	8009c54 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009c44:	4b6e      	ldr	r3, [pc, #440]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c4a:	0b1b      	lsrs	r3, r3, #12
 8009c4c:	f003 030f 	and.w	r3, r3, #15
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
 8009c52:	e005      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009c54:	4b6a      	ldr	r3, [pc, #424]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	0f1b      	lsrs	r3, r3, #28
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c60:	4a68      	ldr	r2, [pc, #416]	; (8009e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d110      	bne.n	8009c92 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c74:	e00d      	b.n	8009c92 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c76:	4b62      	ldr	r3, [pc, #392]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	f003 030c 	and.w	r3, r3, #12
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	d102      	bne.n	8009c88 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c82:	4b61      	ldr	r3, [pc, #388]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	e004      	b.n	8009c92 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	2b08      	cmp	r3, #8
 8009c8c:	d101      	bne.n	8009c92 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009c8e:	4b5e      	ldr	r3, [pc, #376]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8009c90:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c92:	69bb      	ldr	r3, [r7, #24]
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	f040 80ac 	bne.w	8009df2 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009ca4:	4b56      	ldr	r3, [pc, #344]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ca8:	0a1b      	lsrs	r3, r3, #8
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	3301      	adds	r3, #1
 8009cb0:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009cb2:	4b53      	ldr	r3, [pc, #332]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	091b      	lsrs	r3, r3, #4
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009cbe:	4b50      	ldr	r3, [pc, #320]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	fb02 f303 	mul.w	r3, r2, r3
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8086 	beq.w	8009dee <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d003      	beq.n	8009cf0 <HAL_RCC_GetSysClockFreq+0xec>
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d022      	beq.n	8009d34 <HAL_RCC_GetSysClockFreq+0x130>
 8009cee:	e043      	b.n	8009d78 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	ee07 3a90 	vmov	s15, r3
 8009cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfa:	eddf 6a44 	vldr	s13, [pc, #272]	; 8009e0c <HAL_RCC_GetSysClockFreq+0x208>
 8009cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d02:	4b3f      	ldr	r3, [pc, #252]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0a:	ee07 3a90 	vmov	s15, r3
 8009d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d12:	ed97 6a01 	vldr	s12, [r7, #4]
 8009d16:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009e10 <HAL_RCC_GetSysClockFreq+0x20c>
 8009d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d2e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009d32:	e046      	b.n	8009dc2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	ee07 3a90 	vmov	s15, r3
 8009d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d3e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8009e0c <HAL_RCC_GetSysClockFreq+0x208>
 8009d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d46:	4b2e      	ldr	r3, [pc, #184]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d4e:	ee07 3a90 	vmov	s15, r3
 8009d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d56:	ed97 6a01 	vldr	s12, [r7, #4]
 8009d5a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8009e10 <HAL_RCC_GetSysClockFreq+0x20c>
 8009d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d72:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009d76:	e024      	b.n	8009dc2 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	ee07 3a90 	vmov	s15, r3
 8009d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d90:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d98:	ee07 3a90 	vmov	s15, r3
 8009d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009da0:	ed97 6a01 	vldr	s12, [r7, #4]
 8009da4:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8009e10 <HAL_RCC_GetSysClockFreq+0x20c>
 8009da8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009dac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009db0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dbc:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8009dc0:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009dc2:	4b0f      	ldr	r3, [pc, #60]	; (8009e00 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8009dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc6:	0e1b      	lsrs	r3, r3, #24
 8009dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dcc:	3301      	adds	r3, #1
 8009dce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	ee07 3a90 	vmov	s15, r3
 8009dd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de6:	ee17 3a90 	vmov	r3, s15
 8009dea:	623b      	str	r3, [r7, #32]
 8009dec:	e001      	b.n	8009df2 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8009dee:	2300      	movs	r3, #0
 8009df0:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	372c      	adds	r7, #44	; 0x2c
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	46020c00 	.word	0x46020c00
 8009e04:	0800eb68 	.word	0x0800eb68
 8009e08:	00f42400 	.word	0x00f42400
 8009e0c:	4b742400 	.word	0x4b742400
 8009e10:	46000000 	.word	0x46000000

08009e14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009e18:	f7ff fef4 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <HAL_RCC_GetHCLKFreq+0x28>)
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	f003 030f 	and.w	r3, r3, #15
 8009e26:	4906      	ldr	r1, [pc, #24]	; (8009e40 <HAL_RCC_GetHCLKFreq+0x2c>)
 8009e28:	5ccb      	ldrb	r3, [r1, r3]
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	4a05      	ldr	r2, [pc, #20]	; (8009e44 <HAL_RCC_GetHCLKFreq+0x30>)
 8009e30:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009e32:	4b04      	ldr	r3, [pc, #16]	; (8009e44 <HAL_RCC_GetHCLKFreq+0x30>)
 8009e34:	681b      	ldr	r3, [r3, #0]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	46020c00 	.word	0x46020c00
 8009e40:	0800eb50 	.word	0x0800eb50
 8009e44:	20000008 	.word	0x20000008

08009e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8009e4c:	f7ff ffe2 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 8009e50:	4602      	mov	r2, r0
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	091b      	lsrs	r3, r3, #4
 8009e58:	f003 0307 	and.w	r3, r3, #7
 8009e5c:	4903      	ldr	r1, [pc, #12]	; (8009e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e5e:	5ccb      	ldrb	r3, [r1, r3]
 8009e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	46020c00 	.word	0x46020c00
 8009e6c:	0800eb60 	.word	0x0800eb60

08009e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8009e74:	f7ff ffce 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	0a1b      	lsrs	r3, r3, #8
 8009e80:	f003 0307 	and.w	r3, r3, #7
 8009e84:	4903      	ldr	r1, [pc, #12]	; (8009e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e86:	5ccb      	ldrb	r3, [r1, r3]
 8009e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	46020c00 	.word	0x46020c00
 8009e94:	0800eb60 	.word	0x0800eb60

08009e98 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8009e9c:	f7ff ffba 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <HAL_RCC_GetPCLK3Freq+0x20>)
 8009ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea6:	091b      	lsrs	r3, r3, #4
 8009ea8:	f003 0307 	and.w	r3, r3, #7
 8009eac:	4903      	ldr	r1, [pc, #12]	; (8009ebc <HAL_RCC_GetPCLK3Freq+0x24>)
 8009eae:	5ccb      	ldrb	r3, [r1, r3]
 8009eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	bd80      	pop	{r7, pc}
 8009eb8:	46020c00 	.word	0x46020c00
 8009ebc:	0800eb60 	.word	0x0800eb60

08009ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b086      	sub	sp, #24
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009ec8:	4b3e      	ldr	r3, [pc, #248]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ece:	f003 0304 	and.w	r3, r3, #4
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009ed6:	f7fe fd49 	bl	800896c <HAL_PWREx_GetVoltageRange>
 8009eda:	6178      	str	r0, [r7, #20]
 8009edc:	e019      	b.n	8009f12 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009ede:	4b39      	ldr	r3, [pc, #228]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ee4:	4a37      	ldr	r2, [pc, #220]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009ee6:	f043 0304 	orr.w	r3, r3, #4
 8009eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009eee:	4b35      	ldr	r3, [pc, #212]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ef4:	f003 0304 	and.w	r3, r3, #4
 8009ef8:	60fb      	str	r3, [r7, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009efc:	f7fe fd36 	bl	800896c <HAL_PWREx_GetVoltageRange>
 8009f00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009f02:	4b30      	ldr	r3, [pc, #192]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009f08:	4a2e      	ldr	r2, [pc, #184]	; (8009fc4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009f0a:	f023 0304 	bic.w	r3, r3, #4
 8009f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009f18:	d003      	beq.n	8009f22 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f20:	d109      	bne.n	8009f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f28:	d202      	bcs.n	8009f30 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009f2e:	e033      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009f30:	2300      	movs	r3, #0
 8009f32:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009f34:	e030      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f3c:	d208      	bcs.n	8009f50 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f44:	d102      	bne.n	8009f4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009f46:	2303      	movs	r3, #3
 8009f48:	613b      	str	r3, [r7, #16]
 8009f4a:	e025      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e035      	b.n	8009fbc <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f56:	d90f      	bls.n	8009f78 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f64:	d902      	bls.n	8009f6c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009f66:	2300      	movs	r3, #0
 8009f68:	613b      	str	r3, [r7, #16]
 8009f6a:	e015      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	613b      	str	r3, [r7, #16]
 8009f70:	e012      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
 8009f76:	e00f      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f7e:	d109      	bne.n	8009f94 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009f80:	697b      	ldr	r3, [r7, #20]
 8009f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f86:	d102      	bne.n	8009f8e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009f88:	2301      	movs	r3, #1
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	e004      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009f8e:	2302      	movs	r3, #2
 8009f90:	613b      	str	r3, [r7, #16]
 8009f92:	e001      	b.n	8009f98 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009f94:	2301      	movs	r3, #1
 8009f96:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009f98:	4b0b      	ldr	r3, [pc, #44]	; (8009fc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f023 020f 	bic.w	r2, r3, #15
 8009fa0:	4909      	ldr	r1, [pc, #36]	; (8009fc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009fa8:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 030f 	and.w	r3, r3, #15
 8009fb0:	693a      	ldr	r2, [r7, #16]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d001      	beq.n	8009fba <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3718      	adds	r7, #24
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	46020c00 	.word	0x46020c00
 8009fc8:	40022000 	.word	0x40022000

08009fcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8009fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fd0:	b0ba      	sub	sp, #232	; 0xe8
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f002 0401 	and.w	r4, r2, #1
 8009ff0:	2500      	movs	r5, #0
 8009ff2:	ea54 0305 	orrs.w	r3, r4, r5
 8009ff6:	d00b      	beq.n	800a010 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8009ff8:	4bcb      	ldr	r3, [pc, #812]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8009ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ffe:	f023 0103 	bic.w	r1, r3, #3
 800a002:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a008:	4ac7      	ldr	r2, [pc, #796]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a00a:	430b      	orrs	r3, r1
 800a00c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a018:	f002 0802 	and.w	r8, r2, #2
 800a01c:	f04f 0900 	mov.w	r9, #0
 800a020:	ea58 0309 	orrs.w	r3, r8, r9
 800a024:	d00b      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800a026:	4bc0      	ldr	r3, [pc, #768]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a02c:	f023 010c 	bic.w	r1, r3, #12
 800a030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a036:	4abc      	ldr	r2, [pc, #752]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a038:	430b      	orrs	r3, r1
 800a03a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a03e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f002 0a04 	and.w	sl, r2, #4
 800a04a:	f04f 0b00 	mov.w	fp, #0
 800a04e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a052:	d00b      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800a054:	4bb4      	ldr	r3, [pc, #720]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a05a:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a05e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a064:	4ab0      	ldr	r2, [pc, #704]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a066:	430b      	orrs	r3, r1
 800a068:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a06c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	f002 0308 	and.w	r3, r2, #8
 800a078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a07c:	2300      	movs	r3, #0
 800a07e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a082:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a086:	460b      	mov	r3, r1
 800a088:	4313      	orrs	r3, r2
 800a08a:	d00b      	beq.n	800a0a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800a08c:	4ba6      	ldr	r3, [pc, #664]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a08e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a092:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a09a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a09c:	4aa2      	ldr	r2, [pc, #648]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a09e:	430b      	orrs	r3, r1
 800a0a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a0a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f002 0310 	and.w	r3, r2, #16
 800a0b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a0be:	460b      	mov	r3, r1
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	d00b      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800a0c4:	4b98      	ldr	r3, [pc, #608]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a0c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d4:	4a94      	ldr	r2, [pc, #592]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a0d6:	430b      	orrs	r3, r1
 800a0d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a0dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f002 0320 	and.w	r3, r2, #32
 800a0e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	d00b      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800a0fc:	4b8a      	ldr	r3, [pc, #552]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a0fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a102:	f023 0107 	bic.w	r1, r3, #7
 800a106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a10a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a10c:	4a86      	ldr	r2, [pc, #536]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a10e:	430b      	orrs	r3, r1
 800a110:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a114:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a124:	2300      	movs	r3, #0
 800a126:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a12a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d00b      	beq.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800a134:	4b7c      	ldr	r3, [pc, #496]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a13a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a144:	4a78      	ldr	r2, [pc, #480]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a146:	430b      	orrs	r3, r1
 800a148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a14c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a158:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a15c:	2300      	movs	r3, #0
 800a15e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a162:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a166:	460b      	mov	r3, r1
 800a168:	4313      	orrs	r3, r2
 800a16a:	d00b      	beq.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800a16c:	4b6e      	ldr	r3, [pc, #440]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a16e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a17a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a17c:	4a6a      	ldr	r2, [pc, #424]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a17e:	430b      	orrs	r3, r1
 800a180:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a184:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18c:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800a190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a194:	2300      	movs	r3, #0
 800a196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a19a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a19e:	460b      	mov	r3, r1
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	d00b      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800a1a4:	4b60      	ldr	r3, [pc, #384]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a1a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a1ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b4:	4a5c      	ldr	r2, [pc, #368]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a1c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	d00b      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800a1dc:	4b52      	ldr	r3, [pc, #328]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a1de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1e2:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800a1e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ec:	4a4e      	ldr	r2, [pc, #312]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a1f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800a200:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a204:	2300      	movs	r3, #0
 800a206:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a20a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a20e:	460b      	mov	r3, r1
 800a210:	4313      	orrs	r3, r2
 800a212:	d00b      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800a214:	4b44      	ldr	r3, [pc, #272]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a21a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800a21e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a224:	4a40      	ldr	r2, [pc, #256]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a226:	430b      	orrs	r3, r1
 800a228:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a22c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800a238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a23c:	2300      	movs	r3, #0
 800a23e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a242:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a246:	460b      	mov	r3, r1
 800a248:	4313      	orrs	r3, r2
 800a24a:	d00b      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a24e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a252:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800a256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a25a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a25c:	4a32      	ldr	r2, [pc, #200]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a25e:	430b      	orrs	r3, r1
 800a260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800a264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a26c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a270:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a274:	2300      	movs	r3, #0
 800a276:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a27a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a27e:	460b      	mov	r3, r1
 800a280:	4313      	orrs	r3, r2
 800a282:	d00c      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800a284:	4b28      	ldr	r3, [pc, #160]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a28a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a28e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a296:	4a24      	ldr	r2, [pc, #144]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a298:	430b      	orrs	r3, r1
 800a29a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a29e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a2aa:	67bb      	str	r3, [r7, #120]	; 0x78
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a2b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	d04f      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800a2ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c2:	2b80      	cmp	r3, #128	; 0x80
 800a2c4:	d02d      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800a2c6:	2b80      	cmp	r3, #128	; 0x80
 800a2c8:	d827      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a2ca:	2b60      	cmp	r3, #96	; 0x60
 800a2cc:	d02e      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a2ce:	2b60      	cmp	r3, #96	; 0x60
 800a2d0:	d823      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a2d2:	2b40      	cmp	r3, #64	; 0x40
 800a2d4:	d006      	beq.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800a2d6:	2b40      	cmp	r3, #64	; 0x40
 800a2d8:	d81f      	bhi.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d009      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d011      	beq.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800a2e2:	e01a      	b.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a2e4:	4b10      	ldr	r3, [pc, #64]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	4a0f      	ldr	r2, [pc, #60]	; (800a328 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800a2ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2ee:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a2f0:	e01d      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a2f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f002 fa41 	bl	800c780 <RCCEx_PLL2_Config>
 800a2fe:	4603      	mov	r3, r0
 800a300:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a304:	e013      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a30a:	332c      	adds	r3, #44	; 0x2c
 800a30c:	4618      	mov	r0, r3
 800a30e:	f002 facf 	bl	800c8b0 <RCCEx_PLL3_Config>
 800a312:	4603      	mov	r3, r0
 800a314:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a318:	e009      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a320:	e005      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800a322:	bf00      	nop
 800a324:	e003      	b.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a326:	bf00      	nop
 800a328:	46020c00 	.word	0x46020c00
        break;
 800a32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a32e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10d      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800a336:	4bb6      	ldr	r3, [pc, #728]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a338:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a33c:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800a340:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a348:	4ab1      	ldr	r2, [pc, #708]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a34a:	430b      	orrs	r3, r1
 800a34c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a350:	e003      	b.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a356:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800a35a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a366:	673b      	str	r3, [r7, #112]	; 0x70
 800a368:	2300      	movs	r3, #0
 800a36a:	677b      	str	r3, [r7, #116]	; 0x74
 800a36c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a370:	460b      	mov	r3, r1
 800a372:	4313      	orrs	r3, r2
 800a374:	d053      	beq.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800a376:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a37e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a382:	d033      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a388:	d82c      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a38a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a38e:	d02f      	beq.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800a390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a394:	d826      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a39a:	d008      	beq.n	800a3ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 800a39c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3a0:	d820      	bhi.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00a      	beq.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800a3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3aa:	d011      	beq.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800a3ac:	e01a      	b.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3ae:	4b98      	ldr	r3, [pc, #608]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3b2:	4a97      	ldr	r2, [pc, #604]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a3b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3b8:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a3ba:	e01a      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a3bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f002 f9dc 	bl	800c780 <RCCEx_PLL2_Config>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a3ce:	e010      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a3d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3d4:	332c      	adds	r3, #44	; 0x2c
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f002 fa6a 	bl	800c8b0 <RCCEx_PLL3_Config>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800a3e2:	e006      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a3ea:	e002      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800a3ec:	bf00      	nop
 800a3ee:	e000      	b.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800a3f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10d      	bne.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800a3fa:	4b85      	ldr	r3, [pc, #532]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a3fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a400:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800a404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a40c:	4a80      	ldr	r2, [pc, #512]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a40e:	430b      	orrs	r3, r1
 800a410:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a414:	e003      	b.n	800a41e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a416:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a41a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800a41e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a426:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a42a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a42c:	2300      	movs	r3, #0
 800a42e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a430:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a434:	460b      	mov	r3, r1
 800a436:	4313      	orrs	r3, r2
 800a438:	d046      	beq.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800a43a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a43e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a442:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a446:	d028      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a448:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a44c:	d821      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a44e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a452:	d022      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a454:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a458:	d81b      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a45a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a45e:	d01c      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a464:	d815      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a46a:	d008      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a46c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a470:	d80f      	bhi.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d011      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47a:	d00e      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800a47c:	e009      	b.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a47e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a482:	3308      	adds	r3, #8
 800a484:	4618      	mov	r0, r3
 800a486:	f002 f97b 	bl	800c780 <RCCEx_PLL2_Config>
 800a48a:	4603      	mov	r3, r0
 800a48c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a490:	e004      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a498:	e000      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 800a49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10d      	bne.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800a4a4:	4b5a      	ldr	r3, [pc, #360]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a4a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a4aa:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4b6:	4a56      	ldr	r2, [pc, #344]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a4b8:	430b      	orrs	r3, r1
 800a4ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a4be:	e003      	b.n	800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a4c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800a4c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a4d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a4da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	d03f      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800a4e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d81e      	bhi.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x562>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a537 	.word	0x0800a537
 800a4fc:	0800a50d 	.word	0x0800a50d
 800a500:	0800a51b 	.word	0x0800a51b
 800a504:	0800a537 	.word	0x0800a537
 800a508:	0800a537 	.word	0x0800a537
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a50c:	4b40      	ldr	r3, [pc, #256]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a510:	4a3f      	ldr	r2, [pc, #252]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a512:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a516:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a518:	e00e      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a51a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a51e:	332c      	adds	r3, #44	; 0x2c
 800a520:	4618      	mov	r0, r3
 800a522:	f002 f9c5 	bl	800c8b0 <RCCEx_PLL3_Config>
 800a526:	4603      	mov	r3, r0
 800a528:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a52c:	e004      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a52e:	2301      	movs	r3, #1
 800a530:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a534:	e000      	b.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800a536:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a538:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10d      	bne.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800a540:	4b33      	ldr	r3, [pc, #204]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a542:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a546:	f023 0107 	bic.w	r1, r3, #7
 800a54a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	4a2f      	ldr	r2, [pc, #188]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a554:	430b      	orrs	r3, r1
 800a556:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a55c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a560:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800a564:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a56c:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a570:	65bb      	str	r3, [r7, #88]	; 0x58
 800a572:	2300      	movs	r3, #0
 800a574:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a576:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a57a:	460b      	mov	r3, r1
 800a57c:	4313      	orrs	r3, r2
 800a57e:	d04d      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800a580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a588:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a58c:	d028      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800a58e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a592:	d821      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a594:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a598:	d024      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 800a59a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a59e:	d81b      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a5a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5a4:	d00e      	beq.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800a5a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5aa:	d815      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d01b      	beq.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800a5b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5b4:	d110      	bne.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a5b6:	4b16      	ldr	r3, [pc, #88]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5ba:	4a15      	ldr	r2, [pc, #84]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a5bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5c0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a5c2:	e012      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800a5c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a5c8:	332c      	adds	r3, #44	; 0x2c
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f002 f970 	bl	800c8b0 <RCCEx_PLL3_Config>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a5d6:	e008      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a5de:	e004      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a5e0:	bf00      	nop
 800a5e2:	e002      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a5e4:	bf00      	nop
 800a5e6:	e000      	b.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800a5e8:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a5ea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d110      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800a5f2:	4b07      	ldr	r3, [pc, #28]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a5f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a5f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a5fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a604:	4a02      	ldr	r2, [pc, #8]	; (800a610 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800a606:	430b      	orrs	r3, r1
 800a608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a60c:	e006      	b.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x650>
 800a60e:	bf00      	nop
 800a610:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a614:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a618:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a61c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a628:	653b      	str	r3, [r7, #80]	; 0x50
 800a62a:	2300      	movs	r3, #0
 800a62c:	657b      	str	r3, [r7, #84]	; 0x54
 800a62e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a632:	460b      	mov	r3, r1
 800a634:	4313      	orrs	r3, r2
 800a636:	f000 80b5 	beq.w	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a63a:	2300      	movs	r3, #0
 800a63c:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a640:	4b9d      	ldr	r3, [pc, #628]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d113      	bne.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a64e:	4b9a      	ldr	r3, [pc, #616]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a654:	4a98      	ldr	r2, [pc, #608]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a656:	f043 0304 	orr.w	r3, r3, #4
 800a65a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800a65e:	4b96      	ldr	r3, [pc, #600]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a66c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800a670:	2301      	movs	r3, #1
 800a672:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800a676:	4b91      	ldr	r3, [pc, #580]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67a:	4a90      	ldr	r2, [pc, #576]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a67c:	f043 0301 	orr.w	r3, r3, #1
 800a680:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a682:	f7fb fb77 	bl	8005d74 <HAL_GetTick>
 800a686:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a68a:	e00b      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a68c:	f7fb fb72 	bl	8005d74 <HAL_GetTick>
 800a690:	4602      	mov	r2, r0
 800a692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d903      	bls.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a6a2:	e005      	b.n	800a6b0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800a6a4:	4b85      	ldr	r3, [pc, #532]	; (800a8bc <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800a6a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d0ed      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800a6b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d165      	bne.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a6b8:	4b7f      	ldr	r3, [pc, #508]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a6ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800a6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d023      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800a6ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a6d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d01b      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a6de:	4b76      	ldr	r3, [pc, #472]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a6e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6ec:	4b72      	ldr	r3, [pc, #456]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a6ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a6f2:	4a71      	ldr	r2, [pc, #452]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a6f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6fc:	4b6e      	ldr	r3, [pc, #440]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a6fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a702:	4a6d      	ldr	r2, [pc, #436]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a708:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a70c:	4a6a      	ldr	r2, [pc, #424]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d019      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a722:	f7fb fb27 	bl	8005d74 <HAL_GetTick>
 800a726:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a72a:	e00d      	b.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a72c:	f7fb fb22 	bl	8005d74 <HAL_GetTick>
 800a730:	4602      	mov	r2, r0
 800a732:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a736:	1ad2      	subs	r2, r2, r3
 800a738:	f241 3388 	movw	r3, #5000	; 0x1388
 800a73c:	429a      	cmp	r2, r3
 800a73e:	d903      	bls.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800a746:	e006      	b.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a748:	4b5b      	ldr	r3, [pc, #364]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a74a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0ea      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800a756:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10d      	bne.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800a75e:	4b56      	ldr	r3, [pc, #344]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a760:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a764:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a76c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a770:	4a51      	ldr	r2, [pc, #324]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a772:	430b      	orrs	r3, r1
 800a774:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800a778:	e008      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a77a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a77e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800a782:	e003      	b.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a784:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a788:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a78c:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800a790:	2b01      	cmp	r3, #1
 800a792:	d107      	bne.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a794:	4b48      	ldr	r3, [pc, #288]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a79a:	4a47      	ldr	r2, [pc, #284]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a79c:	f023 0304 	bic.w	r3, r3, #4
 800a7a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800a7a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a7b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	d042      	beq.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800a7c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a7c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7cc:	d022      	beq.n	800a814 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800a7ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800a7d2:	d81b      	bhi.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800a7d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7d8:	d011      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x832>
 800a7da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7de:	d815      	bhi.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x840>
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d019      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 800a7e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7e8:	d110      	bne.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800a7ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ee:	3308      	adds	r3, #8
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 ffc5 	bl	800c780 <RCCEx_PLL2_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a7fc:	e00d      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7fe:	4b2e      	ldr	r3, [pc, #184]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a802:	4a2d      	ldr	r2, [pc, #180]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a808:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800a80a:	e006      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a812:	e002      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800a814:	bf00      	nop
 800a816:	e000      	b.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800a818:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a81a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10d      	bne.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800a822:	4b25      	ldr	r3, [pc, #148]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a828:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a82c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a830:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a834:	4a20      	ldr	r2, [pc, #128]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a836:	430b      	orrs	r3, r1
 800a838:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a83c:	e003      	b.n	800a846 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a83e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a842:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a852:	643b      	str	r3, [r7, #64]	; 0x40
 800a854:	2300      	movs	r3, #0
 800a856:	647b      	str	r3, [r7, #68]	; 0x44
 800a858:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a85c:	460b      	mov	r3, r1
 800a85e:	4313      	orrs	r3, r2
 800a860:	d032      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800a862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a866:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a86a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a86e:	d00b      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a870:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a874:	d804      	bhi.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800a876:	2b00      	cmp	r3, #0
 800a878:	d008      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800a87a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87e:	d007      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800a886:	e004      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a888:	bf00      	nop
 800a88a:	e002      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a88c:	bf00      	nop
 800a88e:	e000      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800a890:	bf00      	nop
    }
    if (ret == HAL_OK)
 800a892:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d112      	bne.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800a89a:	4b07      	ldr	r3, [pc, #28]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a89c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8a0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a8a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8ac:	4a02      	ldr	r2, [pc, #8]	; (800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800a8ae:	430b      	orrs	r3, r1
 800a8b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800a8b4:	e008      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800a8b6:	bf00      	nop
 800a8b8:	46020c00 	.word	0x46020c00
 800a8bc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800a8c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800a8c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d0:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a8d4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	d00c      	beq.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800a8e4:	4b98      	ldr	r3, [pc, #608]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a8e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a8ea:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800a8ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a8f6:	4a94      	ldr	r2, [pc, #592]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800a8fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a906:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a90a:	633b      	str	r3, [r7, #48]	; 0x30
 800a90c:	2300      	movs	r3, #0
 800a90e:	637b      	str	r3, [r7, #52]	; 0x34
 800a910:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a914:	460b      	mov	r3, r1
 800a916:	4313      	orrs	r3, r2
 800a918:	d019      	beq.n	800a94e <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800a91a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a91e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a926:	d105      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a928:	4b87      	ldr	r3, [pc, #540]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92c:	4a86      	ldr	r2, [pc, #536]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a92e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a932:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 800a934:	4b84      	ldr	r3, [pc, #528]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a936:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a93a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a93e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a942:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a946:	4a80      	ldr	r2, [pc, #512]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a948:	430b      	orrs	r3, r1
 800a94a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800a94e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a95a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a95c:	2300      	movs	r3, #0
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a960:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a964:	460b      	mov	r3, r1
 800a966:	4313      	orrs	r3, r2
 800a968:	d00c      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800a96a:	4b77      	ldr	r3, [pc, #476]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a970:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a974:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a978:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a97c:	4972      	ldr	r1, [pc, #456]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a97e:	4313      	orrs	r3, r2
 800a980:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800a984:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a990:	623b      	str	r3, [r7, #32]
 800a992:	2300      	movs	r3, #0
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
 800a996:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a99a:	460b      	mov	r3, r1
 800a99c:	4313      	orrs	r3, r2
 800a99e:	d00c      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800a9a0:	4b69      	ldr	r3, [pc, #420]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a9a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a9a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a9aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9b2:	4965      	ldr	r1, [pc, #404]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800a9ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a9c6:	61bb      	str	r3, [r7, #24]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	61fb      	str	r3, [r7, #28]
 800a9cc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	d00c      	beq.n	800a9f0 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800a9d6:	4b5c      	ldr	r3, [pc, #368]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a9d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a9dc:	f023 0218 	bic.w	r2, r3, #24
 800a9e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a9e8:	4957      	ldr	r1, [pc, #348]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a9f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa06:	460b      	mov	r3, r1
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	d032      	beq.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800aa0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa18:	d105      	bne.n	800aa26 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa1a:	4b4b      	ldr	r3, [pc, #300]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aa1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1e:	4a4a      	ldr	r2, [pc, #296]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aa20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa24:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800aa26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa32:	d108      	bne.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aa34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa38:	3308      	adds	r3, #8
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f001 fea0 	bl	800c780 <RCCEx_PLL2_Config>
 800aa40:	4603      	mov	r3, r0
 800aa42:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800aa46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d10d      	bne.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800aa4e:	4b3e      	ldr	r3, [pc, #248]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aa50:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800aa54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa60:	4939      	ldr	r1, [pc, #228]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aa62:	4313      	orrs	r3, r2
 800aa64:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800aa68:	e003      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aa6e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800aa72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7a:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800aa7e:	60bb      	str	r3, [r7, #8]
 800aa80:	2300      	movs	r3, #0
 800aa82:	60fb      	str	r3, [r7, #12]
 800aa84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	d03a      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800aa8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aa9a:	d00e      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xaee>
 800aa9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaa0:	d815      	bhi.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d017      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800aaa6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aaaa:	d110      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaac:	4b26      	ldr	r3, [pc, #152]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab0:	4a25      	ldr	r2, [pc, #148]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab6:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800aab8:	e00e      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800aaba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aabe:	3308      	adds	r3, #8
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 fe5d 	bl	800c780 <RCCEx_PLL2_Config>
 800aac6:	4603      	mov	r3, r0
 800aac8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800aacc:	e004      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800aad4:	e000      	b.n	800aad8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 800aad6:	bf00      	nop
    }
    if (ret == HAL_OK)
 800aad8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10d      	bne.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800aae0:	4b19      	ldr	r3, [pc, #100]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aae6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800aaea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aaee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf2:	4915      	ldr	r1, [pc, #84]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800aafa:	e003      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800ab00:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800ab04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ab10:	603b      	str	r3, [r7, #0]
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	d00c      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800ab20:	4b09      	ldr	r3, [pc, #36]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ab22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800ab26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800ab2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab32:	4905      	ldr	r1, [pc, #20]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800ab34:	4313      	orrs	r3, r2
 800ab36:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800ab3a:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	37e8      	adds	r7, #232	; 0xe8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ab48:	46020c00 	.word	0x46020c00

0800ab4c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b089      	sub	sp, #36	; 0x24
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800ab54:	4bad      	ldr	r3, [pc, #692]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ab56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5c:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800ab5e:	4bab      	ldr	r3, [pc, #684]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ab60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab62:	f003 0303 	and.w	r3, r3, #3
 800ab66:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800ab68:	4ba8      	ldr	r3, [pc, #672]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ab6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6c:	0a1b      	lsrs	r3, r3, #8
 800ab6e:	f003 030f 	and.w	r3, r3, #15
 800ab72:	3301      	adds	r3, #1
 800ab74:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800ab76:	4ba5      	ldr	r3, [pc, #660]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ab78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab7a:	091b      	lsrs	r3, r3, #4
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800ab82:	4ba2      	ldr	r3, [pc, #648]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ab84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab86:	08db      	lsrs	r3, r3, #3
 800ab88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	fb02 f303 	mul.w	r3, r2, r3
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f000 8123 	beq.w	800adec <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d062      	beq.n	800ac72 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b03      	cmp	r3, #3
 800abb0:	f200 8081 	bhi.w	800acb6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d024      	beq.n	800ac04 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d17a      	bne.n	800acb6 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	ee07 3a90 	vmov	s15, r3
 800abc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abca:	eddf 6a91 	vldr	s13, [pc, #580]	; 800ae10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800abce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abd2:	4b8e      	ldr	r3, [pc, #568]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800abd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800abe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800abe6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800ae14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800abea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800abf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800abfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac02:	e08f      	b.n	800ad24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ac04:	4b81      	ldr	r3, [pc, #516]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ac06:	689b      	ldr	r3, [r3, #8]
 800ac08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800ac10:	4b7e      	ldr	r3, [pc, #504]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	0f1b      	lsrs	r3, r3, #28
 800ac16:	f003 030f 	and.w	r3, r3, #15
 800ac1a:	e006      	b.n	800ac2a <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 800ac1c:	4b7b      	ldr	r3, [pc, #492]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ac1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac22:	041b      	lsls	r3, r3, #16
 800ac24:	0f1b      	lsrs	r3, r3, #28
 800ac26:	f003 030f 	and.w	r3, r3, #15
 800ac2a:	4a7b      	ldr	r2, [pc, #492]	; (800ae18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800ac2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac30:	ee07 3a90 	vmov	s15, r3
 800ac34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	ee07 3a90 	vmov	s15, r3
 800ac4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac50:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac54:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800ae14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ac58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac64:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ac68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac70:	e058      	b.n	800ad24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	ee07 3a90 	vmov	s15, r3
 800ac78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac7c:	eddf 6a64 	vldr	s13, [pc, #400]	; 800ae10 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800ac80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac84:	4b61      	ldr	r3, [pc, #388]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ac86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8c:	ee07 3a90 	vmov	s15, r3
 800ac90:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac94:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac98:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800ae14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ac9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800aca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800aca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800acac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acb4:	e036      	b.n	800ad24 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800acb6:	4b55      	ldr	r3, [pc, #340]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d005      	beq.n	800acce <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800acc2:	4b52      	ldr	r3, [pc, #328]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	0f1b      	lsrs	r3, r3, #28
 800acc8:	f003 030f 	and.w	r3, r3, #15
 800accc:	e006      	b.n	800acdc <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800acce:	4b4f      	ldr	r3, [pc, #316]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800acd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800acd4:	041b      	lsls	r3, r3, #16
 800acd6:	0f1b      	lsrs	r3, r3, #28
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	4a4e      	ldr	r2, [pc, #312]	; (800ae18 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800acde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ace2:	ee07 3a90 	vmov	s15, r3
 800ace6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	ee07 3a90 	vmov	s15, r3
 800acfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad02:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad06:	eddf 5a43 	vldr	s11, [pc, #268]	; 800ae14 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800ad0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad16:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800ad1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad22:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800ad24:	4b39      	ldr	r3, [pc, #228]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d017      	beq.n	800ad60 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ad30:	4b36      	ldr	r3, [pc, #216]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ad32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad34:	0a5b      	lsrs	r3, r3, #9
 800ad36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800ad42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad46:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ad4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad56:	ee17 2a90 	vmov	r2, s15
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	e002      	b.n	800ad66 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800ad66:	4b29      	ldr	r3, [pc, #164]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ad68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d017      	beq.n	800ada2 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ad72:	4b26      	ldr	r3, [pc, #152]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800ad74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad76:	0c1b      	lsrs	r3, r3, #16
 800ad78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad7c:	ee07 3a90 	vmov	s15, r3
 800ad80:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800ad84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad88:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800ad8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad98:	ee17 2a90 	vmov	r2, s15
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	605a      	str	r2, [r3, #4]
 800ada0:	e002      	b.n	800ada8 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800ada8:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800adaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d017      	beq.n	800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800adb4:	4b15      	ldr	r3, [pc, #84]	; (800ae0c <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adb8:	0e1b      	lsrs	r3, r3, #24
 800adba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800adc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adca:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800adce:	edd7 6a07 	vldr	s13, [r7, #28]
 800add2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adda:	ee17 2a90 	vmov	r2, s15
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ade2:	e00c      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2200      	movs	r2, #0
 800ade8:	609a      	str	r2, [r3, #8]
}
 800adea:	e008      	b.n	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	609a      	str	r2, [r3, #8]
}
 800adfe:	bf00      	nop
 800ae00:	3724      	adds	r7, #36	; 0x24
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	46020c00 	.word	0x46020c00
 800ae10:	4b742400 	.word	0x4b742400
 800ae14:	46000000 	.word	0x46000000
 800ae18:	0800eb68 	.word	0x0800eb68

0800ae1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b089      	sub	sp, #36	; 0x24
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800ae24:	4bad      	ldr	r3, [pc, #692]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ae26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae2c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800ae2e:	4bab      	ldr	r3, [pc, #684]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800ae38:	4ba8      	ldr	r3, [pc, #672]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	0a1b      	lsrs	r3, r3, #8
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	3301      	adds	r3, #1
 800ae44:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800ae46:	4ba5      	ldr	r3, [pc, #660]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ae48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4a:	091b      	lsrs	r3, r3, #4
 800ae4c:	f003 0301 	and.w	r3, r3, #1
 800ae50:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800ae52:	4ba2      	ldr	r3, [pc, #648]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	08db      	lsrs	r3, r3, #3
 800ae58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae5c:	68fa      	ldr	r2, [r7, #12]
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	f000 8123 	beq.w	800b0bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	2b03      	cmp	r3, #3
 800ae7a:	d062      	beq.n	800af42 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	f200 8081 	bhi.w	800af86 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d024      	beq.n	800aed4 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b02      	cmp	r3, #2
 800ae8e:	d17a      	bne.n	800af86 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae9a:	eddf 6a91 	vldr	s13, [pc, #580]	; 800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800ae9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aea2:	4b8e      	ldr	r3, [pc, #568]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800aeb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aeb6:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800aeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800aec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800aeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aed2:	e08f      	b.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800aed4:	4b81      	ldr	r3, [pc, #516]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d005      	beq.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 800aee0:	4b7e      	ldr	r3, [pc, #504]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	0f1b      	lsrs	r3, r3, #28
 800aee6:	f003 030f 	and.w	r3, r3, #15
 800aeea:	e006      	b.n	800aefa <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 800aeec:	4b7b      	ldr	r3, [pc, #492]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aeee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800aef2:	041b      	lsls	r3, r3, #16
 800aef4:	0f1b      	lsrs	r3, r3, #28
 800aef6:	f003 030f 	and.w	r3, r3, #15
 800aefa:	4a7b      	ldr	r2, [pc, #492]	; (800b0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800aefc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af00:	ee07 3a90 	vmov	s15, r3
 800af04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af20:	ed97 6a02 	vldr	s12, [r7, #8]
 800af24:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800af28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af34:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800af38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af40:	e058      	b.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	ee07 3a90 	vmov	s15, r3
 800af48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4c:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800af50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af54:	4b61      	ldr	r3, [pc, #388]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800af56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af5c:	ee07 3a90 	vmov	s15, r3
 800af60:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800af64:	ed97 6a02 	vldr	s12, [r7, #8]
 800af68:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800af6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800af70:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800af74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af78:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800af7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af84:	e036      	b.n	800aff4 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800af86:	4b55      	ldr	r3, [pc, #340]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d005      	beq.n	800af9e <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800af92:	4b52      	ldr	r3, [pc, #328]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	0f1b      	lsrs	r3, r3, #28
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	e006      	b.n	800afac <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 800af9e:	4b4f      	ldr	r3, [pc, #316]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800afa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	0f1b      	lsrs	r3, r3, #28
 800afa8:	f003 030f 	and.w	r3, r3, #15
 800afac:	4a4e      	ldr	r2, [pc, #312]	; (800b0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 800afae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	ee07 3a90 	vmov	s15, r3
 800afc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	ee07 3a90 	vmov	s15, r3
 800afce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800afd6:	eddf 5a43 	vldr	s11, [pc, #268]	; 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 800afda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800afea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aff2:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800aff4:	4b39      	ldr	r3, [pc, #228]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d017      	beq.n	800b030 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b000:	4b36      	ldr	r3, [pc, #216]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b004:	0a5b      	lsrs	r3, r3, #9
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	ee07 3a90 	vmov	s15, r3
 800b00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800b012:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b016:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b01a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b01e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b026:	ee17 2a90 	vmov	r2, s15
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	601a      	str	r2, [r3, #0]
 800b02e:	e002      	b.n	800b036 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800b036:	4b29      	ldr	r3, [pc, #164]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b03a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d017      	beq.n	800b072 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b042:	4b26      	ldr	r3, [pc, #152]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b046:	0c1b      	lsrs	r3, r3, #16
 800b048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b04c:	ee07 3a90 	vmov	s15, r3
 800b050:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800b054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b058:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b05c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b068:	ee17 2a90 	vmov	r2, s15
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	605a      	str	r2, [r3, #4]
 800b070:	e002      	b.n	800b078 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800b078:	4b18      	ldr	r3, [pc, #96]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d017      	beq.n	800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b084:	4b15      	ldr	r3, [pc, #84]	; (800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800b086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b088:	0e1b      	lsrs	r3, r3, #24
 800b08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800b096:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b09a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800b09e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0aa:	ee17 2a90 	vmov	r2, s15
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b0b2:	e00c      	b.n	800b0ce <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	609a      	str	r2, [r3, #8]
}
 800b0ba:	e008      	b.n	800b0ce <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	609a      	str	r2, [r3, #8]
}
 800b0ce:	bf00      	nop
 800b0d0:	3724      	adds	r7, #36	; 0x24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d8:	4770      	bx	lr
 800b0da:	bf00      	nop
 800b0dc:	46020c00 	.word	0x46020c00
 800b0e0:	4b742400 	.word	0x4b742400
 800b0e4:	46000000 	.word	0x46000000
 800b0e8:	0800eb68 	.word	0x0800eb68

0800b0ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b089      	sub	sp, #36	; 0x24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800b0f4:	4bad      	ldr	r3, [pc, #692]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b0f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800b0fe:	4bab      	ldr	r3, [pc, #684]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b102:	f003 0303 	and.w	r3, r3, #3
 800b106:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800b108:	4ba8      	ldr	r3, [pc, #672]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b10c:	0a1b      	lsrs	r3, r3, #8
 800b10e:	f003 030f 	and.w	r3, r3, #15
 800b112:	3301      	adds	r3, #1
 800b114:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800b116:	4ba5      	ldr	r3, [pc, #660]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b11a:	091b      	lsrs	r3, r3, #4
 800b11c:	f003 0301 	and.w	r3, r3, #1
 800b120:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800b122:	4ba2      	ldr	r3, [pc, #648]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b126:	08db      	lsrs	r3, r3, #3
 800b128:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	fb02 f303 	mul.w	r3, r2, r3
 800b132:	ee07 3a90 	vmov	s15, r3
 800b136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b13a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 8123 	beq.w	800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	2b03      	cmp	r3, #3
 800b14a:	d062      	beq.n	800b212 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	2b03      	cmp	r3, #3
 800b150:	f200 8081 	bhi.w	800b256 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2b01      	cmp	r3, #1
 800b158:	d024      	beq.n	800b1a4 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2b02      	cmp	r3, #2
 800b15e:	d17a      	bne.n	800b256 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	ee07 3a90 	vmov	s15, r3
 800b166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b16a:	eddf 6a91 	vldr	s13, [pc, #580]	; 800b3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b16e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b172:	4b8e      	ldr	r3, [pc, #568]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b17a:	ee07 3a90 	vmov	s15, r3
 800b17e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b182:	ed97 6a02 	vldr	s12, [r7, #8]
 800b186:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b18a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b18e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b196:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b19a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19e:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800b1a2:	e08f      	b.n	800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b1a4:	4b81      	ldr	r3, [pc, #516]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d005      	beq.n	800b1bc <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 800b1b0:	4b7e      	ldr	r3, [pc, #504]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	0f1b      	lsrs	r3, r3, #28
 800b1b6:	f003 030f 	and.w	r3, r3, #15
 800b1ba:	e006      	b.n	800b1ca <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 800b1bc:	4b7b      	ldr	r3, [pc, #492]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b1be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	0f1b      	lsrs	r3, r3, #28
 800b1c6:	f003 030f 	and.w	r3, r3, #15
 800b1ca:	4a7b      	ldr	r2, [pc, #492]	; (800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800b1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	ee07 3a90 	vmov	s15, r3
 800b1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f0:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1f4:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b204:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b20c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b210:	e058      	b.n	800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	ee07 3a90 	vmov	s15, r3
 800b218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b21c:	eddf 6a64 	vldr	s13, [pc, #400]	; 800b3b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800b220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b224:	4b61      	ldr	r3, [pc, #388]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b22c:	ee07 3a90 	vmov	s15, r3
 800b230:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b234:	ed97 6a02 	vldr	s12, [r7, #8]
 800b238:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b240:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800b244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b248:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800b24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b254:	e036      	b.n	800b2c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b256:	4b55      	ldr	r3, [pc, #340]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800b262:	4b52      	ldr	r3, [pc, #328]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	0f1b      	lsrs	r3, r3, #28
 800b268:	f003 030f 	and.w	r3, r3, #15
 800b26c:	e006      	b.n	800b27c <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 800b26e:	4b4f      	ldr	r3, [pc, #316]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b270:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b274:	041b      	lsls	r3, r3, #16
 800b276:	0f1b      	lsrs	r3, r3, #28
 800b278:	f003 030f 	and.w	r3, r3, #15
 800b27c:	4a4e      	ldr	r2, [pc, #312]	; (800b3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 800b27e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	ee07 3a90 	vmov	s15, r3
 800b290:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2a6:	eddf 5a43 	vldr	s11, [pc, #268]	; 800b3b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2c2:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800b2c4:	4b39      	ldr	r3, [pc, #228]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b2c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d017      	beq.n	800b300 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d4:	0a5b      	lsrs	r3, r3, #9
 800b2d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	601a      	str	r2, [r3, #0]
 800b2fe:	e002      	b.n	800b306 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2200      	movs	r2, #0
 800b304:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800b306:	4b29      	ldr	r3, [pc, #164]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d017      	beq.n	800b342 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b312:	4b26      	ldr	r3, [pc, #152]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b316:	0c1b      	lsrs	r3, r3, #16
 800b318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b31c:	ee07 3a90 	vmov	s15, r3
 800b320:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800b324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b328:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b32c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b338:	ee17 2a90 	vmov	r2, s15
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	605a      	str	r2, [r3, #4]
 800b340:	e002      	b.n	800b348 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800b348:	4b18      	ldr	r3, [pc, #96]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d017      	beq.n	800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b354:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800b356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b358:	0e1b      	lsrs	r3, r3, #24
 800b35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b35e:	ee07 3a90 	vmov	s15, r3
 800b362:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800b366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b36a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800b36e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b37a:	ee17 2a90 	vmov	r2, s15
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800b382:	e00c      	b.n	800b39e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	609a      	str	r2, [r3, #8]
}
 800b38a:	e008      	b.n	800b39e <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	609a      	str	r2, [r3, #8]
}
 800b39e:	bf00      	nop
 800b3a0:	3724      	adds	r7, #36	; 0x24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	46020c00 	.word	0x46020c00
 800b3b0:	4b742400 	.word	0x4b742400
 800b3b4:	46000000 	.word	0x46000000
 800b3b8:	0800eb68 	.word	0x0800eb68

0800b3bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b08e      	sub	sp, #56	; 0x38
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800b3c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ca:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800b3ce:	430b      	orrs	r3, r1
 800b3d0:	d145      	bne.n	800b45e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800b3d2:	4ba7      	ldr	r3, [pc, #668]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b3d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3dc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800b3de:	4ba4      	ldr	r3, [pc, #656]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b3e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b3e4:	f003 0302 	and.w	r3, r3, #2
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d108      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3f2:	d104      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800b3f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3f8:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fa:	f001 b9b3 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800b3fe:	4b9c      	ldr	r3, [pc, #624]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b40c:	d114      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800b40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b414:	d110      	bne.n	800b438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b416:	4b96      	ldr	r3, [pc, #600]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b418:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b41c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b424:	d103      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800b426:	23fa      	movs	r3, #250	; 0xfa
 800b428:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b42a:	f001 b99b 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800b42e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800b432:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b434:	f001 b996 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800b438:	4b8d      	ldr	r3, [pc, #564]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b440:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b444:	d107      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b44c:	d103      	bne.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800b44e:	4b89      	ldr	r3, [pc, #548]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800b450:	637b      	str	r3, [r7, #52]	; 0x34
 800b452:	f001 b987 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800b456:	2300      	movs	r3, #0
 800b458:	637b      	str	r3, [r7, #52]	; 0x34
 800b45a:	f001 b983 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b45e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b462:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b466:	430b      	orrs	r3, r1
 800b468:	d151      	bne.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800b46a:	4b81      	ldr	r3, [pc, #516]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b46c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b470:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800b474:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b478:	2b80      	cmp	r3, #128	; 0x80
 800b47a:	d035      	beq.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800b47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b47e:	2b80      	cmp	r3, #128	; 0x80
 800b480:	d841      	bhi.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b484:	2b60      	cmp	r3, #96	; 0x60
 800b486:	d02a      	beq.n	800b4de <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800b488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48a:	2b60      	cmp	r3, #96	; 0x60
 800b48c:	d83b      	bhi.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	2b40      	cmp	r3, #64	; 0x40
 800b492:	d009      	beq.n	800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2b40      	cmp	r3, #64	; 0x40
 800b498:	d835      	bhi.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800b49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00c      	beq.n	800b4ba <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	2b20      	cmp	r3, #32
 800b4a4:	d012      	beq.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800b4a6:	e02e      	b.n	800b506 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff fb4d 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4b6:	f001 b955 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4ba:	f107 0318 	add.w	r3, r7, #24
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff fcac 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4c8:	f001 b94c 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4cc:	f107 030c 	add.w	r3, r7, #12
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7ff fe0b 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4da:	f001 b943 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b4de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b4e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b4e4:	f001 b93e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b4e8:	4b61      	ldr	r3, [pc, #388]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4f4:	d103      	bne.n	800b4fe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800b4f6:	4b60      	ldr	r3, [pc, #384]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b4f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b4fa:	f001 b933 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800b4fe:	2300      	movs	r3, #0
 800b500:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b502:	f001 b92f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800b506:	2300      	movs	r3, #0
 800b508:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b50a:	f001 b92b 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800b50e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b512:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b516:	430b      	orrs	r3, r1
 800b518:	d158      	bne.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800b51a:	4b55      	ldr	r3, [pc, #340]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b51c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b524:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b52c:	d03b      	beq.n	800b5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800b52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b534:	d846      	bhi.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b53c:	d02e      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800b53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b540:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b544:	d83e      	bhi.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b54c:	d00b      	beq.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800b54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b554:	d836      	bhi.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d00d      	beq.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800b55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b562:	d012      	beq.n	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800b564:	e02e      	b.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff faee 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b574:	f001 b8f6 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b578:	f107 0318 	add.w	r3, r7, #24
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff fc4d 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b586:	f001 b8ed 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b58a:	f107 030c 	add.w	r3, r7, #12
 800b58e:	4618      	mov	r0, r3
 800b590:	f7ff fdac 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b598:	f001 b8e4 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800b59c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800b5a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5a2:	f001 b8df 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b5a6:	4b32      	ldr	r3, [pc, #200]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b2:	d103      	bne.n	800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800b5b4:	4b30      	ldr	r3, [pc, #192]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b5b6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b5b8:	f001 b8d4 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5c0:	f001 b8d0 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b5c8:	f001 b8cc 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 800b5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5d0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b5d4:	430b      	orrs	r3, r1
 800b5d6:	d126      	bne.n	800b626 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800b5d8:	4b25      	ldr	r3, [pc, #148]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b5da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b5de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800b5e4:	4b22      	ldr	r3, [pc, #136]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5f0:	d106      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d103      	bne.n	800b600 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800b5f8:	4b1f      	ldr	r3, [pc, #124]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800b5fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b5fc:	f001 b8b2 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800b600:	4b1b      	ldr	r3, [pc, #108]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b60c:	d107      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800b60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b614:	d103      	bne.n	800b61e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800b616:	4b19      	ldr	r3, [pc, #100]	; (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800b618:	637b      	str	r3, [r7, #52]	; 0x34
 800b61a:	f001 b8a3 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	637b      	str	r3, [r7, #52]	; 0x34
 800b622:	f001 b89f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800b626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b62a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800b62e:	430b      	orrs	r3, r1
 800b630:	d16e      	bne.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b632:	4b0f      	ldr	r3, [pc, #60]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800b634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b638:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b63c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800b63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b640:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b644:	d03d      	beq.n	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b64c:	d85c      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b654:	d014      	beq.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b65c:	d854      	bhi.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01f      	beq.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800b664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b66a:	d012      	beq.n	800b692 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b66c:	e04c      	b.n	800b708 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800b66e:	bf00      	nop
 800b670:	46020c00 	.word	0x46020c00
 800b674:	0007a120 	.word	0x0007a120
 800b678:	00f42400 	.word	0x00f42400
 800b67c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b684:	4618      	mov	r0, r3
 800b686:	f7ff fa61 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b68e:	f001 b869 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b692:	f107 0318 	add.w	r3, r7, #24
 800b696:	4618      	mov	r0, r3
 800b698:	f7ff fbc0 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6a0:	f001 b860 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b6a4:	4ba7      	ldr	r3, [pc, #668]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b6ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6b0:	d103      	bne.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800b6b2:	4ba5      	ldr	r3, [pc, #660]	; (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b6b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6b6:	f001 b855 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b6be:	f001 b851 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b6c2:	4ba0      	ldr	r3, [pc, #640]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0320 	and.w	r3, r3, #32
 800b6ca:	2b20      	cmp	r3, #32
 800b6cc:	d118      	bne.n	800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b6ce:	4b9d      	ldr	r3, [pc, #628]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d005      	beq.n	800b6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800b6da:	4b9a      	ldr	r3, [pc, #616]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b6dc:	689b      	ldr	r3, [r3, #8]
 800b6de:	0e1b      	lsrs	r3, r3, #24
 800b6e0:	f003 030f 	and.w	r3, r3, #15
 800b6e4:	e006      	b.n	800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b6e6:	4b97      	ldr	r3, [pc, #604]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b6e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b6ec:	041b      	lsls	r3, r3, #16
 800b6ee:	0e1b      	lsrs	r3, r3, #24
 800b6f0:	f003 030f 	and.w	r3, r3, #15
 800b6f4:	4a95      	ldr	r2, [pc, #596]	; (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b6f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b6fc:	f001 b832 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800b700:	2300      	movs	r3, #0
 800b702:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b704:	f001 b82e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800b70c:	f001 b82a 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b714:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800b718:	430b      	orrs	r3, r1
 800b71a:	d17f      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b71c:	4b89      	ldr	r3, [pc, #548]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b71e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b726:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d165      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800b72e:	4b85      	ldr	r3, [pc, #532]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b734:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800b738:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b740:	d034      	beq.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800b748:	d853      	bhi.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b750:	d00b      	beq.n	800b76a <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800b752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b754:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b758:	d84b      	bhi.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d016      	beq.n	800b78e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b766:	d009      	beq.n	800b77c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800b768:	e043      	b.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b76a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff f9ec 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b776:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b778:	f000 bff4 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b77c:	f107 0318 	add.w	r3, r7, #24
 800b780:	4618      	mov	r0, r3
 800b782:	f7ff fb4b 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b78a:	f000 bfeb 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800b78e:	4b6d      	ldr	r3, [pc, #436]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b79a:	d103      	bne.n	800b7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 800b79c:	4b6a      	ldr	r3, [pc, #424]	; (800b948 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800b79e:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b7a0:	f000 bfe0 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b7a8:	f000 bfdc 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b7ac:	4b65      	ldr	r3, [pc, #404]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f003 0320 	and.w	r3, r3, #32
 800b7b4:	2b20      	cmp	r3, #32
 800b7b6:	d118      	bne.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b7b8:	4b62      	ldr	r3, [pc, #392]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d005      	beq.n	800b7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800b7c4:	4b5f      	ldr	r3, [pc, #380]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b7c6:	689b      	ldr	r3, [r3, #8]
 800b7c8:	0e1b      	lsrs	r3, r3, #24
 800b7ca:	f003 030f 	and.w	r3, r3, #15
 800b7ce:	e006      	b.n	800b7de <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b7d0:	4b5c      	ldr	r3, [pc, #368]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b7d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7d6:	041b      	lsls	r3, r3, #16
 800b7d8:	0e1b      	lsrs	r3, r3, #24
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	4a5b      	ldr	r2, [pc, #364]	; (800b94c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800b7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7e4:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800b7e6:	f000 bfbd 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b7ee:	f000 bfb9 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800b7f6:	f000 bfb5 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800b7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b800:	d108      	bne.n	800b814 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff f9a0 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800b80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80e:	637b      	str	r3, [r7, #52]	; 0x34
 800b810:	f000 bfa8 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	637b      	str	r3, [r7, #52]	; 0x34
 800b818:	f000 bfa4 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800b81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b820:	1e51      	subs	r1, r2, #1
 800b822:	430b      	orrs	r3, r1
 800b824:	d136      	bne.n	800b894 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800b826:	4b47      	ldr	r3, [pc, #284]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b834:	2b00      	cmp	r3, #0
 800b836:	d104      	bne.n	800b842 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800b838:	f7fe fb1a 	bl	8009e70 <HAL_RCC_GetPCLK2Freq>
 800b83c:	6378      	str	r0, [r7, #52]	; 0x34
 800b83e:	f000 bf91 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	2b01      	cmp	r3, #1
 800b846:	d104      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b848:	f7fe f9dc 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800b84c:	6378      	str	r0, [r7, #52]	; 0x34
 800b84e:	f000 bf89 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800b852:	4b3c      	ldr	r3, [pc, #240]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b85a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b85e:	d106      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	2b02      	cmp	r3, #2
 800b864:	d103      	bne.n	800b86e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800b866:	4b3a      	ldr	r3, [pc, #232]	; (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b868:	637b      	str	r3, [r7, #52]	; 0x34
 800b86a:	f000 bf7b 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800b86e:	4b35      	ldr	r3, [pc, #212]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b874:	f003 0302 	and.w	r3, r3, #2
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d107      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	2b03      	cmp	r3, #3
 800b880:	d104      	bne.n	800b88c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 800b882:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b886:	637b      	str	r3, [r7, #52]	; 0x34
 800b888:	f000 bf6c 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	637b      	str	r3, [r7, #52]	; 0x34
 800b890:	f000 bf68 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800b894:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b898:	1e91      	subs	r1, r2, #2
 800b89a:	430b      	orrs	r3, r1
 800b89c:	d136      	bne.n	800b90c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800b89e:	4b29      	ldr	r3, [pc, #164]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b8a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8a4:	f003 030c 	and.w	r3, r3, #12
 800b8a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d104      	bne.n	800b8ba <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b8b0:	f7fe faca 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800b8b4:	6378      	str	r0, [r7, #52]	; 0x34
 800b8b6:	f000 bf55 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800b8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	d104      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b8c0:	f7fe f9a0 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800b8c4:	6378      	str	r0, [r7, #52]	; 0x34
 800b8c6:	f000 bf4d 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800b8ca:	4b1e      	ldr	r3, [pc, #120]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d6:	d106      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8da:	2b08      	cmp	r3, #8
 800b8dc:	d103      	bne.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800b8de:	4b1c      	ldr	r3, [pc, #112]	; (800b950 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800b8e0:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e2:	f000 bf3f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800b8e6:	4b17      	ldr	r3, [pc, #92]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b8e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d107      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	2b0c      	cmp	r3, #12
 800b8f8:	d104      	bne.n	800b904 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800b8fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b900:	f000 bf30 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	637b      	str	r3, [r7, #52]	; 0x34
 800b908:	f000 bf2c 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800b90c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b910:	1f11      	subs	r1, r2, #4
 800b912:	430b      	orrs	r3, r1
 800b914:	d13f      	bne.n	800b996 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800b916:	4b0b      	ldr	r3, [pc, #44]	; (800b944 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800b918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b91c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b920:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800b922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b924:	2b00      	cmp	r3, #0
 800b926:	d104      	bne.n	800b932 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b928:	f7fe fa8e 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800b92c:	6378      	str	r0, [r7, #52]	; 0x34
 800b92e:	f000 bf19 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	2b10      	cmp	r3, #16
 800b936:	d10d      	bne.n	800b954 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b938:	f7fe f964 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800b93c:	6378      	str	r0, [r7, #52]	; 0x34
 800b93e:	f000 bf11 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800b942:	bf00      	nop
 800b944:	46020c00 	.word	0x46020c00
 800b948:	02dc6c00 	.word	0x02dc6c00
 800b94c:	0800eb68 	.word	0x0800eb68
 800b950:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800b954:	4ba6      	ldr	r3, [pc, #664]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b960:	d106      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	2b20      	cmp	r3, #32
 800b966:	d103      	bne.n	800b970 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800b968:	4ba2      	ldr	r3, [pc, #648]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b96a:	637b      	str	r3, [r7, #52]	; 0x34
 800b96c:	f000 befa 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800b970:	4b9f      	ldr	r3, [pc, #636]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b976:	f003 0302 	and.w	r3, r3, #2
 800b97a:	2b02      	cmp	r3, #2
 800b97c:	d107      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b980:	2b30      	cmp	r3, #48	; 0x30
 800b982:	d104      	bne.n	800b98e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 800b984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b988:	637b      	str	r3, [r7, #52]	; 0x34
 800b98a:	f000 beeb 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800b98e:	2300      	movs	r3, #0
 800b990:	637b      	str	r3, [r7, #52]	; 0x34
 800b992:	f000 bee7 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800b996:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b99a:	f1a2 0108 	sub.w	r1, r2, #8
 800b99e:	430b      	orrs	r3, r1
 800b9a0:	d136      	bne.n	800ba10 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800b9a2:	4b93      	ldr	r3, [pc, #588]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b9a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b9a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b9ac:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d104      	bne.n	800b9be <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800b9b4:	f7fe fa48 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800b9b8:	6378      	str	r0, [r7, #52]	; 0x34
 800b9ba:	f000 bed3 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800b9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c0:	2b40      	cmp	r3, #64	; 0x40
 800b9c2:	d104      	bne.n	800b9ce <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800b9c4:	f7fe f91e 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800b9c8:	6378      	str	r0, [r7, #52]	; 0x34
 800b9ca:	f000 becb 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800b9ce:	4b88      	ldr	r3, [pc, #544]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9da:	d106      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 800b9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9de:	2b80      	cmp	r3, #128	; 0x80
 800b9e0:	d103      	bne.n	800b9ea <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800b9e2:	4b84      	ldr	r3, [pc, #528]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800b9e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b9e6:	f000 bebd 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800b9ea:	4b81      	ldr	r3, [pc, #516]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800b9ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800b9f0:	f003 0302 	and.w	r3, r3, #2
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d107      	bne.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	2bc0      	cmp	r3, #192	; 0xc0
 800b9fc:	d104      	bne.n	800ba08 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800b9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba02:	637b      	str	r3, [r7, #52]	; 0x34
 800ba04:	f000 beae 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba0c:	f000 beaa 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800ba10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba14:	f1a2 0110 	sub.w	r1, r2, #16
 800ba18:	430b      	orrs	r3, r1
 800ba1a:	d139      	bne.n	800ba90 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800ba1c:	4b74      	ldr	r3, [pc, #464]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ba1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba26:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d104      	bne.n	800ba38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ba2e:	f7fe fa0b 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800ba32:	6378      	str	r0, [r7, #52]	; 0x34
 800ba34:	f000 be96 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800ba38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba3e:	d104      	bne.n	800ba4a <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ba40:	f7fe f8e0 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800ba44:	6378      	str	r0, [r7, #52]	; 0x34
 800ba46:	f000 be8d 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800ba4a:	4b69      	ldr	r3, [pc, #420]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba56:	d107      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800ba58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba5e:	d103      	bne.n	800ba68 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800ba60:	4b64      	ldr	r3, [pc, #400]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800ba62:	637b      	str	r3, [r7, #52]	; 0x34
 800ba64:	f000 be7e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800ba68:	4b61      	ldr	r3, [pc, #388]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ba6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800ba6e:	f003 0302 	and.w	r3, r3, #2
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	d108      	bne.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800ba76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba7c:	d104      	bne.n	800ba88 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 800ba7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba82:	637b      	str	r3, [r7, #52]	; 0x34
 800ba84:	f000 be6e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	637b      	str	r3, [r7, #52]	; 0x34
 800ba8c:	f000 be6a 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800ba90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba94:	f1a2 0120 	sub.w	r1, r2, #32
 800ba98:	430b      	orrs	r3, r1
 800ba9a:	d158      	bne.n	800bb4e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800ba9c:	4b54      	ldr	r3, [pc, #336]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800ba9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800baa2:	f003 0307 	and.w	r3, r3, #7
 800baa6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800baa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d104      	bne.n	800bab8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800baae:	f7fe f9f3 	bl	8009e98 <HAL_RCC_GetPCLK3Freq>
 800bab2:	6378      	str	r0, [r7, #52]	; 0x34
 800bab4:	f000 be56 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	2b01      	cmp	r3, #1
 800babc:	d104      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800babe:	f7fe f8a1 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800bac2:	6378      	str	r0, [r7, #52]	; 0x34
 800bac4:	f000 be4e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800bac8:	4b49      	ldr	r3, [pc, #292]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bad4:	d106      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800bad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d103      	bne.n	800bae4 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 800badc:	4b45      	ldr	r3, [pc, #276]	; (800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800bade:	637b      	str	r3, [r7, #52]	; 0x34
 800bae0:	f000 be40 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800bae4:	4b42      	ldr	r3, [pc, #264]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d107      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d104      	bne.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800baf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34
 800bafe:	f000 be31 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800bb02:	4b3b      	ldr	r3, [pc, #236]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f003 0320 	and.w	r3, r3, #32
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d11b      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d118      	bne.n	800bb46 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bb14:	4b36      	ldr	r3, [pc, #216]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb16:	689b      	ldr	r3, [r3, #8]
 800bb18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d005      	beq.n	800bb2c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800bb20:	4b33      	ldr	r3, [pc, #204]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	0e1b      	lsrs	r3, r3, #24
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	e006      	b.n	800bb3a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 800bb2c:	4b30      	ldr	r3, [pc, #192]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bb32:	041b      	lsls	r3, r3, #16
 800bb34:	0e1b      	lsrs	r3, r3, #24
 800bb36:	f003 030f 	and.w	r3, r3, #15
 800bb3a:	4a2f      	ldr	r2, [pc, #188]	; (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bb3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb40:	637b      	str	r3, [r7, #52]	; 0x34
 800bb42:	f000 be0f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800bb46:	2300      	movs	r3, #0
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
 800bb4a:	f000 be0b 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800bb4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb52:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bb56:	430b      	orrs	r3, r1
 800bb58:	d172      	bne.n	800bc40 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800bb5a:	4b25      	ldr	r3, [pc, #148]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bb5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bb60:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bb64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800bb66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb6c:	d104      	bne.n	800bb78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800bb6e:	f7fe f849 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800bb72:	6378      	str	r0, [r7, #52]	; 0x34
 800bb74:	f000 bdf6 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800bb78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb7e:	d108      	bne.n	800bb92 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb80:	f107 0318 	add.w	r3, r7, #24
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7ff f949 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb8e:	f000 bde9 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800bb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d104      	bne.n	800bba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800bb98:	f7fe f93c 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 800bb9c:	6378      	str	r0, [r7, #52]	; 0x34
 800bb9e:	f000 bde1 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800bba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800bba8:	d128      	bne.n	800bbfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bbaa:	4b11      	ldr	r3, [pc, #68]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0320 	and.w	r3, r3, #32
 800bbb2:	2b20      	cmp	r3, #32
 800bbb4:	d118      	bne.n	800bbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bbb6:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d005      	beq.n	800bbce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800bbc2:	4b0b      	ldr	r3, [pc, #44]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	0e1b      	lsrs	r3, r3, #24
 800bbc8:	f003 030f 	and.w	r3, r3, #15
 800bbcc:	e006      	b.n	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800bbce:	4b08      	ldr	r3, [pc, #32]	; (800bbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800bbd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bbd4:	041b      	lsls	r3, r3, #16
 800bbd6:	0e1b      	lsrs	r3, r3, #24
 800bbd8:	f003 030f 	and.w	r3, r3, #15
 800bbdc:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800bbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe2:	637b      	str	r3, [r7, #52]	; 0x34
 800bbe4:	f000 bdbe 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	637b      	str	r3, [r7, #52]	; 0x34
 800bbec:	f000 bdba 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800bbf0:	46020c00 	.word	0x46020c00
 800bbf4:	00f42400 	.word	0x00f42400
 800bbf8:	0800eb68 	.word	0x0800eb68
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800bbfc:	4baf      	ldr	r3, [pc, #700]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc08:	d107      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc10:	d103      	bne.n	800bc1a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800bc12:	4bab      	ldr	r3, [pc, #684]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800bc14:	637b      	str	r3, [r7, #52]	; 0x34
 800bc16:	f000 bda5 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800bc1a:	4ba8      	ldr	r3, [pc, #672]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc26:	d107      	bne.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc2e:	d103      	bne.n	800bc38 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800bc30:	4ba3      	ldr	r3, [pc, #652]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800bc32:	637b      	str	r3, [r7, #52]	; 0x34
 800bc34:	f000 bd96 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc3c:	f000 bd92 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800bc40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc44:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	d158      	bne.n	800bcfe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800bc4c:	4b9b      	ldr	r3, [pc, #620]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bc4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bc52:	f003 0307 	and.w	r3, r3, #7
 800bc56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5a:	2b04      	cmp	r3, #4
 800bc5c:	d84b      	bhi.n	800bcf6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800bc5e:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bc9d 	.word	0x0800bc9d
 800bc68:	0800bc79 	.word	0x0800bc79
 800bc6c:	0800bc8b 	.word	0x0800bc8b
 800bc70:	0800bca7 	.word	0x0800bca7
 800bc74:	0800bcb1 	.word	0x0800bcb1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7fe ff65 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bc82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc86:	f000 bd6d 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc8a:	f107 030c 	add.w	r3, r7, #12
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7ff fa2c 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bc98:	f000 bd64 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800bc9c:	f7fe f8ba 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 800bca0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bca2:	f000 bd5f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bca6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bcaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcac:	f000 bd5a 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bcb0:	4b82      	ldr	r3, [pc, #520]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d118      	bne.n	800bcee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bcbc:	4b7f      	ldr	r3, [pc, #508]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d005      	beq.n	800bcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 800bcc8:	4b7c      	ldr	r3, [pc, #496]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	0e1b      	lsrs	r3, r3, #24
 800bcce:	f003 030f 	and.w	r3, r3, #15
 800bcd2:	e006      	b.n	800bce2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800bcd4:	4b79      	ldr	r3, [pc, #484]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bcd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bcda:	041b      	lsls	r3, r3, #16
 800bcdc:	0e1b      	lsrs	r3, r3, #24
 800bcde:	f003 030f 	and.w	r3, r3, #15
 800bce2:	4a78      	ldr	r2, [pc, #480]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800bce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bce8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bcea:	f000 bd3b 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcf2:	f000 bd37 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bcfa:	f000 bd33 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800bcfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd02:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800bd06:	430b      	orrs	r3, r1
 800bd08:	d167      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800bd0a:	4b6c      	ldr	r3, [pc, #432]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bd0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bd10:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bd14:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd1c:	d036      	beq.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bd24:	d855      	bhi.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800bd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd2c:	d029      	beq.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800bd2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bd34:	d84d      	bhi.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd3c:	d013      	beq.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800bd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd44:	d845      	bhi.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800bd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d015      	beq.n	800bd78 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd52:	d13e      	bne.n	800bdd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f7fe fef7 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd62:	f000 bcff 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd66:	f107 030c 	add.w	r3, r7, #12
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff f9be 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd74:	f000 bcf6 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800bd78:	f7fe f84c 	bl	8009e14 <HAL_RCC_GetHCLKFreq>
 800bd7c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bd7e:	f000 bcf1 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800bd82:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bd86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bd88:	f000 bcec 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bd8c:	4b4b      	ldr	r3, [pc, #300]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0320 	and.w	r3, r3, #32
 800bd94:	2b20      	cmp	r3, #32
 800bd96:	d118      	bne.n	800bdca <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bd98:	4b48      	ldr	r3, [pc, #288]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800bda4:	4b45      	ldr	r3, [pc, #276]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	0e1b      	lsrs	r3, r3, #24
 800bdaa:	f003 030f 	and.w	r3, r3, #15
 800bdae:	e006      	b.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800bdb0:	4b42      	ldr	r3, [pc, #264]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bdb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bdb6:	041b      	lsls	r3, r3, #16
 800bdb8:	0e1b      	lsrs	r3, r3, #24
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	4a41      	ldr	r2, [pc, #260]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800bdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bdc6:	f000 bccd 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdce:	f000 bcc9 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bdd6:	f000 bcc5 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800bdda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdde:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800bde2:	430b      	orrs	r3, r1
 800bde4:	d14c      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800bde6:	4b35      	ldr	r3, [pc, #212]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800bde8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bdf0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800bdf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d104      	bne.n	800be02 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800bdf8:	f7fe f826 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800bdfc:	6378      	str	r0, [r7, #52]	; 0x34
 800bdfe:	f000 bcb1 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800be02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be08:	d104      	bne.n	800be14 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800be0a:	f7fd fefb 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800be0e:	6378      	str	r0, [r7, #52]	; 0x34
 800be10:	f000 bca8 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800be14:	4b29      	ldr	r3, [pc, #164]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be20:	d107      	bne.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 800be22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be28:	d103      	bne.n	800be32 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 800be2a:	4b25      	ldr	r3, [pc, #148]	; (800bec0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800be2c:	637b      	str	r3, [r7, #52]	; 0x34
 800be2e:	f000 bc99 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800be32:	4b22      	ldr	r3, [pc, #136]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0320 	and.w	r3, r3, #32
 800be3a:	2b20      	cmp	r3, #32
 800be3c:	d11c      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800be44:	d118      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800be46:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be48:	689b      	ldr	r3, [r3, #8]
 800be4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d005      	beq.n	800be5e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800be52:	4b1a      	ldr	r3, [pc, #104]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	0e1b      	lsrs	r3, r3, #24
 800be58:	f003 030f 	and.w	r3, r3, #15
 800be5c:	e006      	b.n	800be6c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800be5e:	4b17      	ldr	r3, [pc, #92]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800be64:	041b      	lsls	r3, r3, #16
 800be66:	0e1b      	lsrs	r3, r3, #24
 800be68:	f003 030f 	and.w	r3, r3, #15
 800be6c:	4a15      	ldr	r2, [pc, #84]	; (800bec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800be6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be72:	637b      	str	r3, [r7, #52]	; 0x34
 800be74:	f000 bc76 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800be78:	2300      	movs	r3, #0
 800be7a:	637b      	str	r3, [r7, #52]	; 0x34
 800be7c:	f000 bc72 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800be80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be84:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800be88:	430b      	orrs	r3, r1
 800be8a:	d153      	bne.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800be8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800be96:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800be98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d104      	bne.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800be9e:	f7fd ffd3 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800bea2:	6378      	str	r0, [r7, #52]	; 0x34
 800bea4:	f000 bc5e 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800bea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beae:	d10b      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800beb0:	f7fd fea8 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800beb4:	6378      	str	r0, [r7, #52]	; 0x34
 800beb6:	f000 bc55 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800beba:	bf00      	nop
 800bebc:	46020c00 	.word	0x46020c00
 800bec0:	00f42400 	.word	0x00f42400
 800bec4:	0800eb68 	.word	0x0800eb68
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800bec8:	4ba1      	ldr	r3, [pc, #644]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bed4:	d107      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bedc:	d103      	bne.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 800bede:	4b9d      	ldr	r3, [pc, #628]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800bee0:	637b      	str	r3, [r7, #52]	; 0x34
 800bee2:	f000 bc3f 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800bee6:	4b9a      	ldr	r3, [pc, #616]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 0320 	and.w	r3, r3, #32
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d11c      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bef8:	d118      	bne.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800befa:	4b95      	ldr	r3, [pc, #596]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800befc:	689b      	ldr	r3, [r3, #8]
 800befe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d005      	beq.n	800bf12 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 800bf06:	4b92      	ldr	r3, [pc, #584]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	0e1b      	lsrs	r3, r3, #24
 800bf0c:	f003 030f 	and.w	r3, r3, #15
 800bf10:	e006      	b.n	800bf20 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800bf12:	4b8f      	ldr	r3, [pc, #572]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bf14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf18:	041b      	lsls	r3, r3, #16
 800bf1a:	0e1b      	lsrs	r3, r3, #24
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	4a8d      	ldr	r2, [pc, #564]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800bf22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf26:	637b      	str	r3, [r7, #52]	; 0x34
 800bf28:	f000 bc1c 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	637b      	str	r3, [r7, #52]	; 0x34
 800bf30:	f000 bc18 	b.w	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800bf34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf38:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	d151      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800bf40:	4b83      	ldr	r3, [pc, #524]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bf42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800bf46:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bf4a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	2bc0      	cmp	r3, #192	; 0xc0
 800bf50:	d024      	beq.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	2bc0      	cmp	r3, #192	; 0xc0
 800bf56:	d842      	bhi.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800bf58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d00d      	beq.n	800bf7a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	2b80      	cmp	r3, #128	; 0x80
 800bf62:	d83c      	bhi.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d003      	beq.n	800bf72 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 800bf6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6c:	2b40      	cmp	r3, #64	; 0x40
 800bf6e:	d011      	beq.n	800bf94 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 800bf70:	e035      	b.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800bf72:	f7fd ff91 	bl	8009e98 <HAL_RCC_GetPCLK3Freq>
 800bf76:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bf78:	e3f4      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800bf7a:	4b75      	ldr	r3, [pc, #468]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bf82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf86:	d102      	bne.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 800bf88:	4b72      	ldr	r3, [pc, #456]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800bf8a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bf8c:	e3ea      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bf92:	e3e7      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800bf94:	f7fd fe36 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800bf98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800bf9a:	e3e3      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800bf9c:	4b6c      	ldr	r3, [pc, #432]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 0320 	and.w	r3, r3, #32
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d117      	bne.n	800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800bfa8:	4b69      	ldr	r3, [pc, #420]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d005      	beq.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800bfb4:	4b66      	ldr	r3, [pc, #408]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	0e1b      	lsrs	r3, r3, #24
 800bfba:	f003 030f 	and.w	r3, r3, #15
 800bfbe:	e006      	b.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 800bfc0:	4b63      	ldr	r3, [pc, #396]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bfc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	0e1b      	lsrs	r3, r3, #24
 800bfca:	f003 030f 	and.w	r3, r3, #15
 800bfce:	4a62      	ldr	r2, [pc, #392]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800bfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800bfd6:	e3c5      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfdc:	e3c2      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800bfe2:	e3bf      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800bfe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe8:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800bfec:	430b      	orrs	r3, r1
 800bfee:	d147      	bne.n	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800bff0:	4b57      	ldr	r3, [pc, #348]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800bff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bff6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bffa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800bffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d103      	bne.n	800c00a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c002:	f7fd ff21 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800c006:	6378      	str	r0, [r7, #52]	; 0x34
 800c008:	e3ac      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800c00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c010:	d103      	bne.n	800c01a <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800c012:	f7fd fdf7 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800c016:	6378      	str	r0, [r7, #52]	; 0x34
 800c018:	e3a4      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800c01a:	4b4d      	ldr	r3, [pc, #308]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c026:	d106      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 800c028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c02e:	d102      	bne.n	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 800c030:	4b48      	ldr	r3, [pc, #288]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c032:	637b      	str	r3, [r7, #52]	; 0x34
 800c034:	e396      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800c036:	4b46      	ldr	r3, [pc, #280]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0320 	and.w	r3, r3, #32
 800c03e:	2b20      	cmp	r3, #32
 800c040:	d11b      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 800c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c044:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c048:	d117      	bne.n	800c07a <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c04a:	4b41      	ldr	r3, [pc, #260]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c052:	2b00      	cmp	r3, #0
 800c054:	d005      	beq.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800c056:	4b3e      	ldr	r3, [pc, #248]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	0e1b      	lsrs	r3, r3, #24
 800c05c:	f003 030f 	and.w	r3, r3, #15
 800c060:	e006      	b.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800c062:	4b3b      	ldr	r3, [pc, #236]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c068:	041b      	lsls	r3, r3, #16
 800c06a:	0e1b      	lsrs	r3, r3, #24
 800c06c:	f003 030f 	and.w	r3, r3, #15
 800c070:	4a39      	ldr	r2, [pc, #228]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c076:	637b      	str	r3, [r7, #52]	; 0x34
 800c078:	e374      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
 800c07e:	e371      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800c080:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c084:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c088:	430b      	orrs	r3, r1
 800c08a:	d16a      	bne.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800c08c:	4b30      	ldr	r3, [pc, #192]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c08e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c096:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800c098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d120      	bne.n	800c0e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c09e:	4b2c      	ldr	r3, [pc, #176]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f003 0320 	and.w	r3, r3, #32
 800c0a6:	2b20      	cmp	r3, #32
 800c0a8:	d117      	bne.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c0aa:	4b29      	ldr	r3, [pc, #164]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d005      	beq.n	800c0c2 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800c0b6:	4b26      	ldr	r3, [pc, #152]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	0e1b      	lsrs	r3, r3, #24
 800c0bc:	f003 030f 	and.w	r3, r3, #15
 800c0c0:	e006      	b.n	800c0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800c0c2:	4b23      	ldr	r3, [pc, #140]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c0c8:	041b      	lsls	r3, r3, #16
 800c0ca:	0e1b      	lsrs	r3, r3, #24
 800c0cc:	f003 030f 	and.w	r3, r3, #15
 800c0d0:	4a21      	ldr	r2, [pc, #132]	; (800c158 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800c0d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c0d8:	e344      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800c0de:	e341      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800c0e0:	4b1b      	ldr	r3, [pc, #108]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0ee:	d112      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0f6:	d10e      	bne.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c0f8:	4b15      	ldr	r3, [pc, #84]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c0fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c0fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c106:	d102      	bne.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 800c108:	23fa      	movs	r3, #250	; 0xfa
 800c10a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c10c:	e32a      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c10e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c112:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c114:	e326      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800c116:	4b0e      	ldr	r3, [pc, #56]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c11e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c122:	d106      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 800c124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c126:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c12a:	d102      	bne.n	800c132 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 800c12c:	4b09      	ldr	r3, [pc, #36]	; (800c154 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800c12e:	637b      	str	r3, [r7, #52]	; 0x34
 800c130:	e318      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800c132:	4b07      	ldr	r3, [pc, #28]	; (800c150 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800c134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b02      	cmp	r3, #2
 800c13e:	d10d      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800c140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c146:	d109      	bne.n	800c15c <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 800c148:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34
 800c14e:	e309      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c150:	46020c00 	.word	0x46020c00
 800c154:	00f42400 	.word	0x00f42400
 800c158:	0800eb68 	.word	0x0800eb68
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	637b      	str	r3, [r7, #52]	; 0x34
 800c160:	e300      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800c162:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c166:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c16a:	430b      	orrs	r3, r1
 800c16c:	d164      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800c16e:	4ba2      	ldr	r3, [pc, #648]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c178:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d120      	bne.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c180:	4b9d      	ldr	r3, [pc, #628]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f003 0320 	and.w	r3, r3, #32
 800c188:	2b20      	cmp	r3, #32
 800c18a:	d117      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c18c:	4b9a      	ldr	r3, [pc, #616]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d005      	beq.n	800c1a4 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 800c198:	4b97      	ldr	r3, [pc, #604]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	0e1b      	lsrs	r3, r3, #24
 800c19e:	f003 030f 	and.w	r3, r3, #15
 800c1a2:	e006      	b.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800c1a4:	4b94      	ldr	r3, [pc, #592]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c1a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	0e1b      	lsrs	r3, r3, #24
 800c1ae:	f003 030f 	and.w	r3, r3, #15
 800c1b2:	4a92      	ldr	r2, [pc, #584]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800c1b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1b8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ba:	e2d3      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c0:	e2d0      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800c1c2:	4b8d      	ldr	r3, [pc, #564]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c1c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1d0:	d112      	bne.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1d8:	d10e      	bne.n	800c1f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1da:	4b87      	ldr	r3, [pc, #540]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c1dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c1e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c1e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1e8:	d102      	bne.n	800c1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 800c1ea:	23fa      	movs	r3, #250	; 0xfa
 800c1ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1ee:	e2b9      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c1f0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c1f4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c1f6:	e2b5      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800c1f8:	4b7f      	ldr	r3, [pc, #508]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c204:	d106      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c20c:	d102      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 800c20e:	4b7c      	ldr	r3, [pc, #496]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800c210:	637b      	str	r3, [r7, #52]	; 0x34
 800c212:	e2a7      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800c214:	4b78      	ldr	r3, [pc, #480]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c216:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c21a:	f003 0302 	and.w	r3, r3, #2
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d107      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c228:	d103      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 800c22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c22e:	637b      	str	r3, [r7, #52]	; 0x34
 800c230:	e298      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	637b      	str	r3, [r7, #52]	; 0x34
 800c236:	e295      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800c238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c23c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c240:	430b      	orrs	r3, r1
 800c242:	d147      	bne.n	800c2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800c244:	4b6c      	ldr	r3, [pc, #432]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c24a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c24e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800c250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c252:	2b00      	cmp	r3, #0
 800c254:	d103      	bne.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800c256:	f7fd fdf7 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800c25a:	6378      	str	r0, [r7, #52]	; 0x34
 800c25c:	e282      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800c25e:	4b66      	ldr	r3, [pc, #408]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c26c:	d112      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c274:	d10e      	bne.n	800c294 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c276:	4b60      	ldr	r3, [pc, #384]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c27c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c284:	d102      	bne.n	800c28c <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800c286:	23fa      	movs	r3, #250	; 0xfa
 800c288:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c28a:	e26b      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c28c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c290:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c292:	e267      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800c294:	4b58      	ldr	r3, [pc, #352]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c29c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2a0:	d106      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c2a8:	d102      	bne.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 800c2aa:	4b55      	ldr	r3, [pc, #340]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800c2ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c2ae:	e259      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800c2b0:	4b51      	ldr	r3, [pc, #324]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c2b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c2b6:	f003 0302 	and.w	r3, r3, #2
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d107      	bne.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c2c4:	d103      	bne.n	800c2ce <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800c2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ca:	637b      	str	r3, [r7, #52]	; 0x34
 800c2cc:	e24a      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2d2:	e247      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800c2d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2d8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	d12d      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800c2e0:	4b45      	ldr	r3, [pc, #276]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c2e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2e6:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800c2ea:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800c2ec:	4b42      	ldr	r3, [pc, #264]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2f8:	d105      	bne.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d102      	bne.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 800c300:	4b3f      	ldr	r3, [pc, #252]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800c302:	637b      	str	r3, [r7, #52]	; 0x34
 800c304:	e22e      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c30c:	d107      	bne.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c312:	4618      	mov	r0, r3
 800c314:	f7fe fc1a 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800c318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31a:	637b      	str	r3, [r7, #52]	; 0x34
 800c31c:	e222      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c324:	d107      	bne.n	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c326:	f107 0318 	add.w	r3, r7, #24
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fd76 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	637b      	str	r3, [r7, #52]	; 0x34
 800c334:	e216      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800c336:	2300      	movs	r3, #0
 800c338:	637b      	str	r3, [r7, #52]	; 0x34
 800c33a:	e213      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800c33c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c340:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800c344:	430b      	orrs	r3, r1
 800c346:	d15d      	bne.n	800c404 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800c348:	4b2b      	ldr	r3, [pc, #172]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c34a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c34e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c352:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c35a:	d028      	beq.n	800c3ae <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800c35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c35e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c362:	d845      	bhi.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800c364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c36a:	d013      	beq.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800c36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c36e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c372:	d83d      	bhi.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	2b00      	cmp	r3, #0
 800c378:	d004      	beq.n	800c384 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800c37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c380:	d004      	beq.n	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800c382:	e035      	b.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800c384:	f7fd fd74 	bl	8009e70 <HAL_RCC_GetPCLK2Freq>
 800c388:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c38a:	e1eb      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c38c:	f7fd fc3a 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800c390:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c392:	e1e7      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c394:	4b18      	ldr	r3, [pc, #96]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c39c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3a0:	d102      	bne.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800c3a2:	4b17      	ldr	r3, [pc, #92]	; (800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800c3a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3a6:	e1dd      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3ac:	e1da      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0320 	and.w	r3, r3, #32
 800c3b6:	2b20      	cmp	r3, #32
 800c3b8:	d117      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c3ba:	4b0f      	ldr	r3, [pc, #60]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d005      	beq.n	800c3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	0e1b      	lsrs	r3, r3, #24
 800c3cc:	f003 030f 	and.w	r3, r3, #15
 800c3d0:	e006      	b.n	800c3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800c3d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c3d8:	041b      	lsls	r3, r3, #16
 800c3da:	0e1b      	lsrs	r3, r3, #24
 800c3dc:	f003 030f 	and.w	r3, r3, #15
 800c3e0:	4a06      	ldr	r2, [pc, #24]	; (800c3fc <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800c3e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c3e8:	e1bc      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3ee:	e1b9      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c3f4:	e1b6      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c3f6:	bf00      	nop
 800c3f8:	46020c00 	.word	0x46020c00
 800c3fc:	0800eb68 	.word	0x0800eb68
 800c400:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800c404:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c408:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800c40c:	430b      	orrs	r3, r1
 800c40e:	d156      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800c410:	4ba5      	ldr	r3, [pc, #660]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c416:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c41a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c422:	d028      	beq.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800c424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c426:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c42a:	d845      	bhi.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c432:	d013      	beq.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c43a:	d83d      	bhi.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d004      	beq.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c448:	d004      	beq.n	800c454 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800c44a:	e035      	b.n	800c4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800c44c:	f7fd fcfc 	bl	8009e48 <HAL_RCC_GetPCLK1Freq>
 800c450:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c452:	e187      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c454:	f7fd fbd6 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800c458:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c45a:	e183      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c45c:	4b92      	ldr	r3, [pc, #584]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c468:	d102      	bne.n	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800c46a:	4b90      	ldr	r3, [pc, #576]	; (800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c46e:	e179      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c470:	2300      	movs	r3, #0
 800c472:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c474:	e176      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c476:	4b8c      	ldr	r3, [pc, #560]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f003 0320 	and.w	r3, r3, #32
 800c47e:	2b20      	cmp	r3, #32
 800c480:	d117      	bne.n	800c4b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c482:	4b89      	ldr	r3, [pc, #548]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d005      	beq.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800c48e:	4b86      	ldr	r3, [pc, #536]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c490:	689b      	ldr	r3, [r3, #8]
 800c492:	0e1b      	lsrs	r3, r3, #24
 800c494:	f003 030f 	and.w	r3, r3, #15
 800c498:	e006      	b.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800c49a:	4b83      	ldr	r3, [pc, #524]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c49c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c4a0:	041b      	lsls	r3, r3, #16
 800c4a2:	0e1b      	lsrs	r3, r3, #24
 800c4a4:	f003 030f 	and.w	r3, r3, #15
 800c4a8:	4a81      	ldr	r2, [pc, #516]	; (800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800c4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c4b0:	e158      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4b6:	e155      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c4bc:	e152      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800c4be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4c2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800c4c6:	430b      	orrs	r3, r1
 800c4c8:	d177      	bne.n	800c5ba <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800c4ca:	4b77      	ldr	r3, [pc, #476]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c4cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c4d0:	f003 0318 	and.w	r3, r3, #24
 800c4d4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d8:	2b18      	cmp	r3, #24
 800c4da:	d86b      	bhi.n	800c5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800c4dc:	a201      	add	r2, pc, #4	; (adr r2, 800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800c4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4e2:	bf00      	nop
 800c4e4:	0800c549 	.word	0x0800c549
 800c4e8:	0800c5b5 	.word	0x0800c5b5
 800c4ec:	0800c5b5 	.word	0x0800c5b5
 800c4f0:	0800c5b5 	.word	0x0800c5b5
 800c4f4:	0800c5b5 	.word	0x0800c5b5
 800c4f8:	0800c5b5 	.word	0x0800c5b5
 800c4fc:	0800c5b5 	.word	0x0800c5b5
 800c500:	0800c5b5 	.word	0x0800c5b5
 800c504:	0800c551 	.word	0x0800c551
 800c508:	0800c5b5 	.word	0x0800c5b5
 800c50c:	0800c5b5 	.word	0x0800c5b5
 800c510:	0800c5b5 	.word	0x0800c5b5
 800c514:	0800c5b5 	.word	0x0800c5b5
 800c518:	0800c5b5 	.word	0x0800c5b5
 800c51c:	0800c5b5 	.word	0x0800c5b5
 800c520:	0800c5b5 	.word	0x0800c5b5
 800c524:	0800c559 	.word	0x0800c559
 800c528:	0800c5b5 	.word	0x0800c5b5
 800c52c:	0800c5b5 	.word	0x0800c5b5
 800c530:	0800c5b5 	.word	0x0800c5b5
 800c534:	0800c5b5 	.word	0x0800c5b5
 800c538:	0800c5b5 	.word	0x0800c5b5
 800c53c:	0800c5b5 	.word	0x0800c5b5
 800c540:	0800c5b5 	.word	0x0800c5b5
 800c544:	0800c573 	.word	0x0800c573
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800c548:	f7fd fca6 	bl	8009e98 <HAL_RCC_GetPCLK3Freq>
 800c54c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c54e:	e109      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c550:	f7fd fb58 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800c554:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c556:	e105      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c558:	4b53      	ldr	r3, [pc, #332]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c564:	d102      	bne.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800c566:	4b51      	ldr	r3, [pc, #324]	; (800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800c568:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c56a:	e0fb      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c570:	e0f8      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c572:	4b4d      	ldr	r3, [pc, #308]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 0320 	and.w	r3, r3, #32
 800c57a:	2b20      	cmp	r3, #32
 800c57c:	d117      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c57e:	4b4a      	ldr	r3, [pc, #296]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d005      	beq.n	800c596 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800c58a:	4b47      	ldr	r3, [pc, #284]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c58c:	689b      	ldr	r3, [r3, #8]
 800c58e:	0e1b      	lsrs	r3, r3, #24
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	e006      	b.n	800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800c596:	4b44      	ldr	r3, [pc, #272]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c598:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c59c:	041b      	lsls	r3, r3, #16
 800c59e:	0e1b      	lsrs	r3, r3, #24
 800c5a0:	f003 030f 	and.w	r3, r3, #15
 800c5a4:	4a42      	ldr	r2, [pc, #264]	; (800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800c5a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c5ac:	e0da      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c5b2:	e0d7      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c5b8:	e0d4      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800c5ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5be:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800c5c2:	430b      	orrs	r3, r1
 800c5c4:	d155      	bne.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800c5c6:	4b38      	ldr	r3, [pc, #224]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c5c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c5cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c5d0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5d8:	d013      	beq.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c5e0:	d844      	bhi.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800c5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5e8:	d013      	beq.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5f0:	d83c      	bhi.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800c5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d014      	beq.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800c5f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5fe:	d014      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800c600:	e034      	b.n	800c66c <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c602:	f107 0318 	add.w	r3, r7, #24
 800c606:	4618      	mov	r0, r3
 800c608:	f7fe fc08 	bl	800ae1c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800c60c:	69fb      	ldr	r3, [r7, #28]
 800c60e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c610:	e0a8      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c616:	4618      	mov	r0, r3
 800c618:	f7fe fa98 	bl	800ab4c <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800c61c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c620:	e0a0      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800c622:	f7fd faef 	bl	8009c04 <HAL_RCC_GetSysClockFreq>
 800c626:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800c628:	e09c      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800c62a:	4b1f      	ldr	r3, [pc, #124]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 0320 	and.w	r3, r3, #32
 800c632:	2b20      	cmp	r3, #32
 800c634:	d117      	bne.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800c636:	4b1c      	ldr	r3, [pc, #112]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c638:	689b      	ldr	r3, [r3, #8]
 800c63a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d005      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800c642:	4b19      	ldr	r3, [pc, #100]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	0e1b      	lsrs	r3, r3, #24
 800c648:	f003 030f 	and.w	r3, r3, #15
 800c64c:	e006      	b.n	800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800c64e:	4b16      	ldr	r3, [pc, #88]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c654:	041b      	lsls	r3, r3, #16
 800c656:	0e1b      	lsrs	r3, r3, #24
 800c658:	f003 030f 	and.w	r3, r3, #15
 800c65c:	4a14      	ldr	r2, [pc, #80]	; (800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800c65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800c664:	e07e      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800c666:	2300      	movs	r3, #0
 800c668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c66a:	e07b      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800c66c:	2300      	movs	r3, #0
 800c66e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800c670:	e078      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800c672:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c676:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800c67a:	430b      	orrs	r3, r1
 800c67c:	d138      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800c67e:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c680:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800c684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c688:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800c68a:	4b07      	ldr	r3, [pc, #28]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800c68c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b02      	cmp	r3, #2
 800c696:	d10d      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d10a      	bne.n	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800c69e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c6a4:	e05e      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800c6a6:	bf00      	nop
 800c6a8:	46020c00 	.word	0x46020c00
 800c6ac:	00f42400 	.word	0x00f42400
 800c6b0:	0800eb68 	.word	0x0800eb68
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800c6b4:	4b2e      	ldr	r3, [pc, #184]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c6b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6c2:	d112      	bne.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6ca:	d10e      	bne.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6cc:	4b28      	ldr	r3, [pc, #160]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c6ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800c6d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6da:	d102      	bne.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800c6dc:	23fa      	movs	r3, #250	; 0xfa
 800c6de:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6e0:	e040      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800c6e2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800c6e6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800c6e8:	e03c      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	637b      	str	r3, [r7, #52]	; 0x34
 800c6ee:	e039      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800c6f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c6f8:	430b      	orrs	r3, r1
 800c6fa:	d131      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800c6fc:	4b1c      	ldr	r3, [pc, #112]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c6fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800c702:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c706:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800c708:	4b19      	ldr	r3, [pc, #100]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c710:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c714:	d105      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800c716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800c71c:	4b15      	ldr	r3, [pc, #84]	; (800c774 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800c71e:	637b      	str	r3, [r7, #52]	; 0x34
 800c720:	e020      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800c722:	4b13      	ldr	r3, [pc, #76]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c72a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c72e:	d106      	bne.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800c730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c736:	d102      	bne.n	800c73e <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800c738:	4b0f      	ldr	r3, [pc, #60]	; (800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34
 800c73c:	e012      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800c73e:	4b0c      	ldr	r3, [pc, #48]	; (800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c74a:	d106      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800c74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c752:	d102      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800c754:	4b09      	ldr	r3, [pc, #36]	; (800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800c756:	637b      	str	r3, [r7, #52]	; 0x34
 800c758:	e004      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	637b      	str	r3, [r7, #52]	; 0x34
 800c75e:	e001      	b.n	800c764 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800c760:	2300      	movs	r3, #0
 800c762:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800c764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c766:	4618      	mov	r0, r3
 800c768:	3738      	adds	r7, #56	; 0x38
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	46020c00 	.word	0x46020c00
 800c774:	02dc6c00 	.word	0x02dc6c00
 800c778:	016e3600 	.word	0x016e3600
 800c77c:	00f42400 	.word	0x00f42400

0800c780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800c788:	4b47      	ldr	r3, [pc, #284]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a46      	ldr	r2, [pc, #280]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c78e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c792:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c794:	f7f9 faee 	bl	8005d74 <HAL_GetTick>
 800c798:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c79a:	e008      	b.n	800c7ae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c79c:	f7f9 faea 	bl	8005d74 <HAL_GetTick>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d901      	bls.n	800c7ae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e077      	b.n	800c89e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c7ae:	4b3e      	ldr	r3, [pc, #248]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d1f0      	bne.n	800c79c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800c7ba:	4b3b      	ldr	r3, [pc, #236]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7be:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c7c2:	f023 0303 	bic.w	r3, r3, #3
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	6811      	ldr	r1, [r2, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	6852      	ldr	r2, [r2, #4]
 800c7ce:	3a01      	subs	r2, #1
 800c7d0:	0212      	lsls	r2, r2, #8
 800c7d2:	430a      	orrs	r2, r1
 800c7d4:	4934      	ldr	r1, [pc, #208]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	62cb      	str	r3, [r1, #44]	; 0x2c
 800c7da:	4b33      	ldr	r3, [pc, #204]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c7dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c7de:	4b33      	ldr	r3, [pc, #204]	; (800c8ac <RCCEx_PLL2_Config+0x12c>)
 800c7e0:	4013      	ands	r3, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	6892      	ldr	r2, [r2, #8]
 800c7e6:	3a01      	subs	r2, #1
 800c7e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	68d2      	ldr	r2, [r2, #12]
 800c7f0:	3a01      	subs	r2, #1
 800c7f2:	0252      	lsls	r2, r2, #9
 800c7f4:	b292      	uxth	r2, r2
 800c7f6:	4311      	orrs	r1, r2
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	6912      	ldr	r2, [r2, #16]
 800c7fc:	3a01      	subs	r2, #1
 800c7fe:	0412      	lsls	r2, r2, #16
 800c800:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c804:	4311      	orrs	r1, r2
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	6952      	ldr	r2, [r2, #20]
 800c80a:	3a01      	subs	r2, #1
 800c80c:	0612      	lsls	r2, r2, #24
 800c80e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c812:	430a      	orrs	r2, r1
 800c814:	4924      	ldr	r1, [pc, #144]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c816:	4313      	orrs	r3, r2
 800c818:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800c81a:	4b23      	ldr	r3, [pc, #140]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81e:	f023 020c 	bic.w	r2, r3, #12
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	4920      	ldr	r1, [pc, #128]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c828:	4313      	orrs	r3, r2
 800c82a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800c82c:	4b1e      	ldr	r3, [pc, #120]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c82e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	491c      	ldr	r1, [pc, #112]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c836:	4313      	orrs	r3, r2
 800c838:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800c83a:	4b1b      	ldr	r3, [pc, #108]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83e:	4a1a      	ldr	r2, [pc, #104]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c840:	f023 0310 	bic.w	r3, r3, #16
 800c844:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c846:	4b18      	ldr	r3, [pc, #96]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c84e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	69d2      	ldr	r2, [r2, #28]
 800c856:	00d2      	lsls	r2, r2, #3
 800c858:	4913      	ldr	r1, [pc, #76]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c85a:	4313      	orrs	r3, r2
 800c85c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800c85e:	4b12      	ldr	r3, [pc, #72]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c862:	4a11      	ldr	r2, [pc, #68]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c864:	f043 0310 	orr.w	r3, r3, #16
 800c868:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a0e      	ldr	r2, [pc, #56]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c870:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c874:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c876:	f7f9 fa7d 	bl	8005d74 <HAL_GetTick>
 800c87a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c87c:	e008      	b.n	800c890 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c87e:	f7f9 fa79 	bl	8005d74 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d901      	bls.n	800c890 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e006      	b.n	800c89e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c890:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <RCCEx_PLL2_Config+0x128>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0f0      	beq.n	800c87e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800c89c:	2300      	movs	r3, #0

}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	46020c00 	.word	0x46020c00
 800c8ac:	80800000 	.word	0x80800000

0800c8b0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800c8b8:	4b47      	ldr	r3, [pc, #284]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a46      	ldr	r2, [pc, #280]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c8be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8c2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c8c4:	f7f9 fa56 	bl	8005d74 <HAL_GetTick>
 800c8c8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8ca:	e008      	b.n	800c8de <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c8cc:	f7f9 fa52 	bl	8005d74 <HAL_GetTick>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d901      	bls.n	800c8de <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800c8da:	2303      	movs	r3, #3
 800c8dc:	e077      	b.n	800c9ce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c8de:	4b3e      	ldr	r3, [pc, #248]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d1f0      	bne.n	800c8cc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800c8ea:	4b3b      	ldr	r3, [pc, #236]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c8f2:	f023 0303 	bic.w	r3, r3, #3
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	6811      	ldr	r1, [r2, #0]
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6852      	ldr	r2, [r2, #4]
 800c8fe:	3a01      	subs	r2, #1
 800c900:	0212      	lsls	r2, r2, #8
 800c902:	430a      	orrs	r2, r1
 800c904:	4934      	ldr	r1, [pc, #208]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c906:	4313      	orrs	r3, r2
 800c908:	630b      	str	r3, [r1, #48]	; 0x30
 800c90a:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c90e:	4b33      	ldr	r3, [pc, #204]	; (800c9dc <RCCEx_PLL3_Config+0x12c>)
 800c910:	4013      	ands	r3, r2
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	6892      	ldr	r2, [r2, #8]
 800c916:	3a01      	subs	r2, #1
 800c918:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	68d2      	ldr	r2, [r2, #12]
 800c920:	3a01      	subs	r2, #1
 800c922:	0252      	lsls	r2, r2, #9
 800c924:	b292      	uxth	r2, r2
 800c926:	4311      	orrs	r1, r2
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6912      	ldr	r2, [r2, #16]
 800c92c:	3a01      	subs	r2, #1
 800c92e:	0412      	lsls	r2, r2, #16
 800c930:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c934:	4311      	orrs	r1, r2
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	6952      	ldr	r2, [r2, #20]
 800c93a:	3a01      	subs	r2, #1
 800c93c:	0612      	lsls	r2, r2, #24
 800c93e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c942:	430a      	orrs	r2, r1
 800c944:	4924      	ldr	r1, [pc, #144]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c946:	4313      	orrs	r3, r2
 800c948:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800c94a:	4b23      	ldr	r3, [pc, #140]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c94e:	f023 020c 	bic.w	r2, r3, #12
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	4920      	ldr	r1, [pc, #128]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c958:	4313      	orrs	r3, r2
 800c95a:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800c95c:	4b1e      	ldr	r3, [pc, #120]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c95e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a1b      	ldr	r3, [r3, #32]
 800c964:	491c      	ldr	r1, [pc, #112]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c966:	4313      	orrs	r3, r2
 800c968:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800c96a:	4b1b      	ldr	r3, [pc, #108]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c96c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c96e:	4a1a      	ldr	r2, [pc, #104]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c970:	f023 0310 	bic.w	r3, r3, #16
 800c974:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c976:	4b18      	ldr	r3, [pc, #96]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c97a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c97e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	69d2      	ldr	r2, [r2, #28]
 800c986:	00d2      	lsls	r2, r2, #3
 800c988:	4913      	ldr	r1, [pc, #76]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c98a:	4313      	orrs	r3, r2
 800c98c:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800c98e:	4b12      	ldr	r3, [pc, #72]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c992:	4a11      	ldr	r2, [pc, #68]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c994:	f043 0310 	orr.w	r3, r3, #16
 800c998:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800c99a:	4b0f      	ldr	r3, [pc, #60]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a0e      	ldr	r2, [pc, #56]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c9a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9a4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9a6:	f7f9 f9e5 	bl	8005d74 <HAL_GetTick>
 800c9aa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9ac:	e008      	b.n	800c9c0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c9ae:	f7f9 f9e1 	bl	8005d74 <HAL_GetTick>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	2b02      	cmp	r3, #2
 800c9ba:	d901      	bls.n	800c9c0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e006      	b.n	800c9ce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c9c0:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <RCCEx_PLL3_Config+0x128>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0f0      	beq.n	800c9ae <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800c9cc:	2300      	movs	r3, #0
}
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	3710      	adds	r7, #16
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	46020c00 	.word	0x46020c00
 800c9dc:	80800000 	.word	0x80800000

0800c9e0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d101      	bne.n	800c9f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e0fb      	b.n	800cbea <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a7f      	ldr	r2, [pc, #508]	; (800cbf4 <HAL_SPI_Init+0x214>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d004      	beq.n	800ca06 <HAL_SPI_Init+0x26>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a7d      	ldr	r2, [pc, #500]	; (800cbf8 <HAL_SPI_Init+0x218>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	e000      	b.n	800ca08 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800ca06:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a78      	ldr	r2, [pc, #480]	; (800cbf4 <HAL_SPI_Init+0x214>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d004      	beq.n	800ca22 <HAL_SPI_Init+0x42>
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a76      	ldr	r2, [pc, #472]	; (800cbf8 <HAL_SPI_Init+0x218>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d105      	bne.n	800ca2e <HAL_SPI_Init+0x4e>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	2b0f      	cmp	r3, #15
 800ca28:	d901      	bls.n	800ca2e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e0dd      	b.n	800cbea <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f8ec 	bl	800cc0c <SPI_GetPacketSize>
 800ca34:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a6e      	ldr	r2, [pc, #440]	; (800cbf4 <HAL_SPI_Init+0x214>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d004      	beq.n	800ca4a <HAL_SPI_Init+0x6a>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	4a6c      	ldr	r2, [pc, #432]	; (800cbf8 <HAL_SPI_Init+0x218>)
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d102      	bne.n	800ca50 <HAL_SPI_Init+0x70>
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2b08      	cmp	r3, #8
 800ca4e:	d816      	bhi.n	800ca7e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ca54:	4a69      	ldr	r2, [pc, #420]	; (800cbfc <HAL_SPI_Init+0x21c>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d00e      	beq.n	800ca78 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a68      	ldr	r2, [pc, #416]	; (800cc00 <HAL_SPI_Init+0x220>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d009      	beq.n	800ca78 <HAL_SPI_Init+0x98>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a66      	ldr	r2, [pc, #408]	; (800cc04 <HAL_SPI_Init+0x224>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d004      	beq.n	800ca78 <HAL_SPI_Init+0x98>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a65      	ldr	r2, [pc, #404]	; (800cc08 <HAL_SPI_Init+0x228>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d104      	bne.n	800ca82 <HAL_SPI_Init+0xa2>
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b10      	cmp	r3, #16
 800ca7c:	d901      	bls.n	800ca82 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800ca7e:	2301      	movs	r3, #1
 800ca80:	e0b3      	b.n	800cbea <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f7f5 f83e 	bl	8001b18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2202      	movs	r2, #2
 800caa0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f022 0201 	bic.w	r2, r2, #1
 800cab2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800cabe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cac8:	d119      	bne.n	800cafe <HAL_SPI_Init+0x11e>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cad2:	d103      	bne.n	800cadc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d008      	beq.n	800caee <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d10c      	bne.n	800cafe <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800cae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caec:	d107      	bne.n	800cafe <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	681a      	ldr	r2, [r3, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cafc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d00f      	beq.n	800cb2a <HAL_SPI_Init+0x14a>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	2b06      	cmp	r3, #6
 800cb10:	d90b      	bls.n	800cb2a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	430a      	orrs	r2, r1
 800cb26:	601a      	str	r2, [r3, #0]
 800cb28:	e007      	b.n	800cb3a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	681a      	ldr	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	69da      	ldr	r2, [r3, #28]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	431a      	orrs	r2, r3
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	431a      	orrs	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb4c:	ea42 0103 	orr.w	r1, r2, r3
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	68da      	ldr	r2, [r3, #12]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	430a      	orrs	r2, r1
 800cb5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb64:	431a      	orrs	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	431a      	orrs	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	691b      	ldr	r3, [r3, #16]
 800cb76:	431a      	orrs	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	431a      	orrs	r2, r3
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	431a      	orrs	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	431a      	orrs	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb8e:	431a      	orrs	r2, r3
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	431a      	orrs	r2, r3
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba0:	431a      	orrs	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cba6:	ea42 0103 	orr.w	r1, r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	430a      	orrs	r2, r1
 800cbb4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00a      	beq.n	800cbd8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68db      	ldr	r3, [r3, #12]
 800cbc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	430a      	orrs	r2, r1
 800cbd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	46002000 	.word	0x46002000
 800cbf8:	56002000 	.word	0x56002000
 800cbfc:	40013000 	.word	0x40013000
 800cc00:	50013000 	.word	0x50013000
 800cc04:	40003800 	.word	0x40003800
 800cc08:	50003800 	.word	0x50003800

0800cc0c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b085      	sub	sp, #20
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc18:	095b      	lsrs	r3, r3, #5
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	3301      	adds	r3, #1
 800cc24:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	3307      	adds	r3, #7
 800cc2a:	08db      	lsrs	r3, r3, #3
 800cc2c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	fb02 f303 	mul.w	r3, r2, r3
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800cc42:	b480      	push	{r7}
 800cc44:	b083      	sub	sp, #12
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d12e      	bne.n	800ccb6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d101      	bne.n	800cc66 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800cc62:	2302      	movs	r3, #2
 800cc64:	e028      	b.n	800ccb8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2202      	movs	r2, #2
 800cc72:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f022 0201 	bic.w	r2, r2, #1
 800cc84:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800cc92:	ea42 0103 	orr.w	r1, r2, r3
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	689a      	ldr	r2, [r3, #8]
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2200      	movs	r2, #0
 800ccae:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e000      	b.n	800ccb8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
  }
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	e042      	b.n	800cd5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d106      	bne.n	800ccee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f7f4 ffa5 	bl	8001c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2224      	movs	r2, #36	; 0x24
 800ccf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	681a      	ldr	r2, [r3, #0]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f022 0201 	bic.w	r2, r2, #1
 800cd04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f000 f8ca 	bl	800cea0 <UART_SetConfig>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d101      	bne.n	800cd16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e022      	b.n	800cd5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa60 	bl	800d1e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	685a      	ldr	r2, [r3, #4]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689a      	ldr	r2, [r3, #8]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f042 0201 	orr.w	r2, r2, #1
 800cd52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 fae7 	bl	800d328 <UART_CheckIdleState>
 800cd5a:	4603      	mov	r3, r0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08a      	sub	sp, #40	; 0x28
 800cd68:	af02      	add	r7, sp, #8
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	4613      	mov	r3, r2
 800cd72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd7a:	2b20      	cmp	r3, #32
 800cd7c:	f040 808b 	bne.w	800ce96 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <HAL_UART_Transmit+0x28>
 800cd86:	88fb      	ldrh	r3, [r7, #6]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d101      	bne.n	800cd90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e083      	b.n	800ce98 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd9a:	2b80      	cmp	r3, #128	; 0x80
 800cd9c:	d107      	bne.n	800cdae <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	689a      	ldr	r2, [r3, #8]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdac:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2221      	movs	r2, #33	; 0x21
 800cdba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cdbe:	f7f8 ffd9 	bl	8005d74 <HAL_GetTick>
 800cdc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	88fa      	ldrh	r2, [r7, #6]
 800cdc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	88fa      	ldrh	r2, [r7, #6]
 800cdd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	689b      	ldr	r3, [r3, #8]
 800cdd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cddc:	d108      	bne.n	800cdf0 <HAL_UART_Transmit+0x8c>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	691b      	ldr	r3, [r3, #16]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d104      	bne.n	800cdf0 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cde6:	2300      	movs	r3, #0
 800cde8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	61bb      	str	r3, [r7, #24]
 800cdee:	e003      	b.n	800cdf8 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cdf8:	e030      	b.n	800ce5c <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	9300      	str	r3, [sp, #0]
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	2200      	movs	r2, #0
 800ce02:	2180      	movs	r1, #128	; 0x80
 800ce04:	68f8      	ldr	r0, [r7, #12]
 800ce06:	f000 fb39 	bl	800d47c <UART_WaitOnFlagUntilTimeout>
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d005      	beq.n	800ce1c <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2220      	movs	r2, #32
 800ce14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	e03d      	b.n	800ce98 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800ce1c:	69fb      	ldr	r3, [r7, #28]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10b      	bne.n	800ce3a <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ce22:	69bb      	ldr	r3, [r7, #24]
 800ce24:	881b      	ldrh	r3, [r3, #0]
 800ce26:	461a      	mov	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ce30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	3302      	adds	r3, #2
 800ce36:	61bb      	str	r3, [r7, #24]
 800ce38:	e007      	b.n	800ce4a <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ce3a:	69fb      	ldr	r3, [r7, #28]
 800ce3c:	781a      	ldrb	r2, [r3, #0]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	3301      	adds	r3, #1
 800ce48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29a      	uxth	r2, r3
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d1c8      	bne.n	800cdfa <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	9300      	str	r3, [sp, #0]
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	2140      	movs	r1, #64	; 0x40
 800ce72:	68f8      	ldr	r0, [r7, #12]
 800ce74:	f000 fb02 	bl	800d47c <UART_WaitOnFlagUntilTimeout>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d005      	beq.n	800ce8a <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2220      	movs	r2, #32
 800ce82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e006      	b.n	800ce98 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	2220      	movs	r2, #32
 800ce8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800ce92:	2300      	movs	r3, #0
 800ce94:	e000      	b.n	800ce98 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800ce96:	2302      	movs	r3, #2
  }
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3720      	adds	r7, #32
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cea4:	b094      	sub	sp, #80	; 0x50
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	4b7e      	ldr	r3, [pc, #504]	; (800d0b0 <UART_SetConfig+0x210>)
 800ceb6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ceb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceba:	689a      	ldr	r2, [r3, #8]
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	691b      	ldr	r3, [r3, #16]
 800cec0:	431a      	orrs	r2, r3
 800cec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	431a      	orrs	r2, r3
 800cec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceca:	69db      	ldr	r3, [r3, #28]
 800cecc:	4313      	orrs	r3, r2
 800cece:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4977      	ldr	r1, [pc, #476]	; (800d0b4 <UART_SetConfig+0x214>)
 800ced8:	4019      	ands	r1, r3
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee0:	430b      	orrs	r3, r1
 800cee2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ceee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef0:	68d9      	ldr	r1, [r3, #12]
 800cef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef4:	681a      	ldr	r2, [r3, #0]
 800cef6:	ea40 0301 	orr.w	r3, r0, r1
 800cefa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	4b6a      	ldr	r3, [pc, #424]	; (800d0b0 <UART_SetConfig+0x210>)
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d009      	beq.n	800cf20 <UART_SetConfig+0x80>
 800cf0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	4b69      	ldr	r3, [pc, #420]	; (800d0b8 <UART_SetConfig+0x218>)
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d004      	beq.n	800cf20 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800cf2a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf34:	430b      	orrs	r3, r1
 800cf36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3e:	f023 000f 	bic.w	r0, r3, #15
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	ea40 0301 	orr.w	r3, r0, r1
 800cf4e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	4b59      	ldr	r3, [pc, #356]	; (800d0bc <UART_SetConfig+0x21c>)
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d102      	bne.n	800cf60 <UART_SetConfig+0xc0>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf5e:	e029      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	4b56      	ldr	r3, [pc, #344]	; (800d0c0 <UART_SetConfig+0x220>)
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d102      	bne.n	800cf70 <UART_SetConfig+0xd0>
 800cf6a:	2302      	movs	r3, #2
 800cf6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf6e:	e021      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cf70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	4b53      	ldr	r3, [pc, #332]	; (800d0c4 <UART_SetConfig+0x224>)
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d102      	bne.n	800cf80 <UART_SetConfig+0xe0>
 800cf7a:	2304      	movs	r3, #4
 800cf7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf7e:	e019      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	4b50      	ldr	r3, [pc, #320]	; (800d0c8 <UART_SetConfig+0x228>)
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d102      	bne.n	800cf90 <UART_SetConfig+0xf0>
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf8e:	e011      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	4b4d      	ldr	r3, [pc, #308]	; (800d0cc <UART_SetConfig+0x22c>)
 800cf96:	429a      	cmp	r2, r3
 800cf98:	d102      	bne.n	800cfa0 <UART_SetConfig+0x100>
 800cf9a:	2310      	movs	r3, #16
 800cf9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf9e:	e009      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	4b42      	ldr	r3, [pc, #264]	; (800d0b0 <UART_SetConfig+0x210>)
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d102      	bne.n	800cfb0 <UART_SetConfig+0x110>
 800cfaa:	2320      	movs	r3, #32
 800cfac:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfae:	e001      	b.n	800cfb4 <UART_SetConfig+0x114>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	681a      	ldr	r2, [r3, #0]
 800cfb8:	4b3d      	ldr	r3, [pc, #244]	; (800d0b0 <UART_SetConfig+0x210>)
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d005      	beq.n	800cfca <UART_SetConfig+0x12a>
 800cfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	4b3d      	ldr	r3, [pc, #244]	; (800d0b8 <UART_SetConfig+0x218>)
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	f040 8085 	bne.w	800d0d4 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cfca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfcc:	2200      	movs	r2, #0
 800cfce:	623b      	str	r3, [r7, #32]
 800cfd0:	627a      	str	r2, [r7, #36]	; 0x24
 800cfd2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cfd6:	f7fe f9f1 	bl	800b3bc <HAL_RCCEx_GetPeriphCLKFreq>
 800cfda:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800cfdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 80e8 	beq.w	800d1b4 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfe8:	4a39      	ldr	r2, [pc, #228]	; (800d0d0 <UART_SetConfig+0x230>)
 800cfea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfee:	461a      	mov	r2, r3
 800cff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cff2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cff6:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	685a      	ldr	r2, [r3, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d004:	429a      	cmp	r2, r3
 800d006:	d305      	bcc.n	800d014 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d00e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d010:	429a      	cmp	r2, r3
 800d012:	d903      	bls.n	800d01c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d01a:	e048      	b.n	800d0ae <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d01e:	2200      	movs	r2, #0
 800d020:	61bb      	str	r3, [r7, #24]
 800d022:	61fa      	str	r2, [r7, #28]
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	4a29      	ldr	r2, [pc, #164]	; (800d0d0 <UART_SetConfig+0x230>)
 800d02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	2200      	movs	r2, #0
 800d032:	613b      	str	r3, [r7, #16]
 800d034:	617a      	str	r2, [r7, #20]
 800d036:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d03a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d03e:	f7f3 f923 	bl	8000288 <__aeabi_uldivmod>
 800d042:	4602      	mov	r2, r0
 800d044:	460b      	mov	r3, r1
 800d046:	4610      	mov	r0, r2
 800d048:	4619      	mov	r1, r3
 800d04a:	f04f 0200 	mov.w	r2, #0
 800d04e:	f04f 0300 	mov.w	r3, #0
 800d052:	020b      	lsls	r3, r1, #8
 800d054:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d058:	0202      	lsls	r2, r0, #8
 800d05a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d05c:	6849      	ldr	r1, [r1, #4]
 800d05e:	0849      	lsrs	r1, r1, #1
 800d060:	2000      	movs	r0, #0
 800d062:	460c      	mov	r4, r1
 800d064:	4605      	mov	r5, r0
 800d066:	eb12 0804 	adds.w	r8, r2, r4
 800d06a:	eb43 0905 	adc.w	r9, r3, r5
 800d06e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	60bb      	str	r3, [r7, #8]
 800d076:	60fa      	str	r2, [r7, #12]
 800d078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d07c:	4640      	mov	r0, r8
 800d07e:	4649      	mov	r1, r9
 800d080:	f7f3 f902 	bl	8000288 <__aeabi_uldivmod>
 800d084:	4602      	mov	r2, r0
 800d086:	460b      	mov	r3, r1
 800d088:	4613      	mov	r3, r2
 800d08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d092:	d308      	bcc.n	800d0a6 <UART_SetConfig+0x206>
 800d094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d09a:	d204      	bcs.n	800d0a6 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800d09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0a2:	60da      	str	r2, [r3, #12]
 800d0a4:	e003      	b.n	800d0ae <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800d0ac:	e082      	b.n	800d1b4 <UART_SetConfig+0x314>
 800d0ae:	e081      	b.n	800d1b4 <UART_SetConfig+0x314>
 800d0b0:	46002400 	.word	0x46002400
 800d0b4:	cfff69f3 	.word	0xcfff69f3
 800d0b8:	56002400 	.word	0x56002400
 800d0bc:	40013800 	.word	0x40013800
 800d0c0:	40004400 	.word	0x40004400
 800d0c4:	40004800 	.word	0x40004800
 800d0c8:	40004c00 	.word	0x40004c00
 800d0cc:	40005000 	.word	0x40005000
 800d0d0:	080243a8 	.word	0x080243a8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	69db      	ldr	r3, [r3, #28]
 800d0d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d0dc:	d13c      	bne.n	800d158 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	603b      	str	r3, [r7, #0]
 800d0e4:	607a      	str	r2, [r7, #4]
 800d0e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d0ea:	f7fe f967 	bl	800b3bc <HAL_RCCEx_GetPeriphCLKFreq>
 800d0ee:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d05e      	beq.n	800d1b4 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fa:	4a39      	ldr	r2, [pc, #228]	; (800d1e0 <UART_SetConfig+0x340>)
 800d0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d100:	461a      	mov	r2, r3
 800d102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d104:	fbb3 f3f2 	udiv	r3, r3, r2
 800d108:	005a      	lsls	r2, r3, #1
 800d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	085b      	lsrs	r3, r3, #1
 800d110:	441a      	add	r2, r3
 800d112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	fbb2 f3f3 	udiv	r3, r2, r3
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11e:	2b0f      	cmp	r3, #15
 800d120:	d916      	bls.n	800d150 <UART_SetConfig+0x2b0>
 800d122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d128:	d212      	bcs.n	800d150 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d12c:	b29b      	uxth	r3, r3
 800d12e:	f023 030f 	bic.w	r3, r3, #15
 800d132:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d136:	085b      	lsrs	r3, r3, #1
 800d138:	b29b      	uxth	r3, r3
 800d13a:	f003 0307 	and.w	r3, r3, #7
 800d13e:	b29a      	uxth	r2, r3
 800d140:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d142:	4313      	orrs	r3, r2
 800d144:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d14c:	60da      	str	r2, [r3, #12]
 800d14e:	e031      	b.n	800d1b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d156:	e02d      	b.n	800d1b4 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d15a:	2200      	movs	r2, #0
 800d15c:	469a      	mov	sl, r3
 800d15e:	4693      	mov	fp, r2
 800d160:	4650      	mov	r0, sl
 800d162:	4659      	mov	r1, fp
 800d164:	f7fe f92a 	bl	800b3bc <HAL_RCCEx_GetPeriphCLKFreq>
 800d168:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800d16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d021      	beq.n	800d1b4 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	4a1a      	ldr	r2, [pc, #104]	; (800d1e0 <UART_SetConfig+0x340>)
 800d176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d17a:	461a      	mov	r2, r3
 800d17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d17e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	441a      	add	r2, r3
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d192:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d196:	2b0f      	cmp	r3, #15
 800d198:	d909      	bls.n	800d1ae <UART_SetConfig+0x30e>
 800d19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a0:	d205      	bcs.n	800d1ae <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a4:	b29a      	uxth	r2, r3
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	60da      	str	r2, [r3, #12]
 800d1ac:	e002      	b.n	800d1b4 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d1d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3750      	adds	r7, #80	; 0x50
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1de:	bf00      	nop
 800d1e0:	080243a8 	.word	0x080243a8

0800d1e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1e4:	b480      	push	{r7}
 800d1e6:	b083      	sub	sp, #12
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f0:	f003 0301 	and.w	r3, r3, #1
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00a      	beq.n	800d20e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	430a      	orrs	r2, r1
 800d20c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d212:	f003 0302 	and.w	r3, r3, #2
 800d216:	2b00      	cmp	r3, #0
 800d218:	d00a      	beq.n	800d230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	430a      	orrs	r2, r1
 800d22e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d234:	f003 0304 	and.w	r3, r3, #4
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d00a      	beq.n	800d252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	430a      	orrs	r2, r1
 800d250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d256:	f003 0308 	and.w	r3, r3, #8
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d00a      	beq.n	800d274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	430a      	orrs	r2, r1
 800d272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d278:	f003 0310 	and.w	r3, r3, #16
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d00a      	beq.n	800d296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	430a      	orrs	r2, r1
 800d294:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	689b      	ldr	r3, [r3, #8]
 800d2a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	430a      	orrs	r2, r1
 800d2b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d01a      	beq.n	800d2fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2e2:	d10a      	bne.n	800d2fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	430a      	orrs	r2, r1
 800d2f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d302:	2b00      	cmp	r3, #0
 800d304:	d00a      	beq.n	800d31c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	430a      	orrs	r2, r1
 800d31a:	605a      	str	r2, [r3, #4]
  }
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b098      	sub	sp, #96	; 0x60
 800d32c:	af02      	add	r7, sp, #8
 800d32e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d338:	f7f8 fd1c 	bl	8005d74 <HAL_GetTick>
 800d33c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 0308 	and.w	r3, r3, #8
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d12f      	bne.n	800d3ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d34c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d350:	9300      	str	r3, [sp, #0]
 800d352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d354:	2200      	movs	r2, #0
 800d356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f88e 	bl	800d47c <UART_WaitOnFlagUntilTimeout>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d022      	beq.n	800d3ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d36e:	e853 3f00 	ldrex	r3, [r3]
 800d372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d376:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d37a:	653b      	str	r3, [r7, #80]	; 0x50
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	461a      	mov	r2, r3
 800d382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d384:	647b      	str	r3, [r7, #68]	; 0x44
 800d386:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d38c:	e841 2300 	strex	r3, r2, [r1]
 800d390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1e6      	bne.n	800d366 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2220      	movs	r2, #32
 800d39c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e063      	b.n	800d474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0304 	and.w	r3, r3, #4
 800d3b6:	2b04      	cmp	r3, #4
 800d3b8:	d149      	bne.n	800d44e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3be:	9300      	str	r3, [sp, #0]
 800d3c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 f857 	bl	800d47c <UART_WaitOnFlagUntilTimeout>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d03c      	beq.n	800d44e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	e853 3f00 	ldrex	r3, [r3]
 800d3e0:	623b      	str	r3, [r7, #32]
   return(result);
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d3e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3f2:	633b      	str	r3, [r7, #48]	; 0x30
 800d3f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fa:	e841 2300 	strex	r3, r2, [r1]
 800d3fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d402:	2b00      	cmp	r3, #0
 800d404:	d1e6      	bne.n	800d3d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	3308      	adds	r3, #8
 800d40c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	e853 3f00 	ldrex	r3, [r3]
 800d414:	60fb      	str	r3, [r7, #12]
   return(result);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f023 0301 	bic.w	r3, r3, #1
 800d41c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	3308      	adds	r3, #8
 800d424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d426:	61fa      	str	r2, [r7, #28]
 800d428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d42a:	69b9      	ldr	r1, [r7, #24]
 800d42c:	69fa      	ldr	r2, [r7, #28]
 800d42e:	e841 2300 	strex	r3, r2, [r1]
 800d432:	617b      	str	r3, [r7, #20]
   return(result);
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d1e5      	bne.n	800d406 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d44a:	2303      	movs	r3, #3
 800d44c:	e012      	b.n	800d474 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2220      	movs	r2, #32
 800d452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2220      	movs	r2, #32
 800d45a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d472:	2300      	movs	r3, #0
}
 800d474:	4618      	mov	r0, r3
 800d476:	3758      	adds	r7, #88	; 0x58
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	4613      	mov	r3, r2
 800d48a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d48c:	e049      	b.n	800d522 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d494:	d045      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d496:	f7f8 fc6d 	bl	8005d74 <HAL_GetTick>
 800d49a:	4602      	mov	r2, r0
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	69ba      	ldr	r2, [r7, #24]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d302      	bcc.n	800d4ac <UART_WaitOnFlagUntilTimeout+0x30>
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d101      	bne.n	800d4b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e048      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f003 0304 	and.w	r3, r3, #4
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d031      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	f003 0308 	and.w	r3, r3, #8
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d110      	bne.n	800d4ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2208      	movs	r2, #8
 800d4d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 f838 	bl	800d54a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2208      	movs	r2, #8
 800d4de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e029      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4fc:	d111      	bne.n	800d522 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f81e 	bl	800d54a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2220      	movs	r2, #32
 800d512:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e00f      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	69da      	ldr	r2, [r3, #28]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	4013      	ands	r3, r2
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	bf0c      	ite	eq
 800d532:	2301      	moveq	r3, #1
 800d534:	2300      	movne	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d0a6      	beq.n	800d48e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b095      	sub	sp, #84	; 0x54
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	e853 3f00 	ldrex	r3, [r3]
 800d55e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d566:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	461a      	mov	r2, r3
 800d56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d570:	643b      	str	r3, [r7, #64]	; 0x40
 800d572:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d576:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d578:	e841 2300 	strex	r3, r2, [r1]
 800d57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1e6      	bne.n	800d552 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	3308      	adds	r3, #8
 800d58a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	e853 3f00 	ldrex	r3, [r3]
 800d592:	61fb      	str	r3, [r7, #28]
   return(result);
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d59a:	f023 0301 	bic.w	r3, r3, #1
 800d59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3308      	adds	r3, #8
 800d5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d5a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d5aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d5b0:	e841 2300 	strex	r3, r2, [r1]
 800d5b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d1e3      	bne.n	800d584 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d118      	bne.n	800d5f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	e853 3f00 	ldrex	r3, [r3]
 800d5d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	f023 0310 	bic.w	r3, r3, #16
 800d5d8:	647b      	str	r3, [r7, #68]	; 0x44
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5e2:	61bb      	str	r3, [r7, #24]
 800d5e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e6:	6979      	ldr	r1, [r7, #20]
 800d5e8:	69ba      	ldr	r2, [r7, #24]
 800d5ea:	e841 2300 	strex	r3, r2, [r1]
 800d5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1e6      	bne.n	800d5c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2220      	movs	r2, #32
 800d5fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2200      	movs	r2, #0
 800d602:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d60a:	bf00      	nop
 800d60c:	3754      	adds	r7, #84	; 0x54
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d616:	b480      	push	{r7}
 800d618:	b085      	sub	sp, #20
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d624:	2b01      	cmp	r3, #1
 800d626:	d101      	bne.n	800d62c <HAL_UARTEx_DisableFifoMode+0x16>
 800d628:	2302      	movs	r3, #2
 800d62a:	e027      	b.n	800d67c <HAL_UARTEx_DisableFifoMode+0x66>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2224      	movs	r2, #36	; 0x24
 800d638:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f022 0201 	bic.w	r2, r2, #1
 800d652:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d65a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2220      	movs	r2, #32
 800d66e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	2200      	movs	r2, #0
 800d676:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3714      	adds	r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d101      	bne.n	800d6a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d69c:	2302      	movs	r3, #2
 800d69e:	e02d      	b.n	800d6fc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2224      	movs	r2, #36	; 0x24
 800d6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	681a      	ldr	r2, [r3, #0]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f022 0201 	bic.w	r2, r2, #1
 800d6c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	683a      	ldr	r2, [r7, #0]
 800d6d8:	430a      	orrs	r2, r1
 800d6da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f84f 	bl	800d780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2220      	movs	r2, #32
 800d6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3710      	adds	r7, #16
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d714:	2b01      	cmp	r3, #1
 800d716:	d101      	bne.n	800d71c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d718:	2302      	movs	r3, #2
 800d71a:	e02d      	b.n	800d778 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2224      	movs	r2, #36	; 0x24
 800d728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f022 0201 	bic.w	r2, r2, #1
 800d742:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	683a      	ldr	r2, [r7, #0]
 800d754:	430a      	orrs	r2, r1
 800d756:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f811 	bl	800d780 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	68fa      	ldr	r2, [r7, #12]
 800d764:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2220      	movs	r2, #32
 800d76a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3710      	adds	r7, #16
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d108      	bne.n	800d7a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d7a0:	e031      	b.n	800d806 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d7a2:	2308      	movs	r3, #8
 800d7a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d7a6:	2308      	movs	r3, #8
 800d7a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	689b      	ldr	r3, [r3, #8]
 800d7b0:	0e5b      	lsrs	r3, r3, #25
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	0f5b      	lsrs	r3, r3, #29
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0307 	and.w	r3, r3, #7
 800d7c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7ca:	7bbb      	ldrb	r3, [r7, #14]
 800d7cc:	7b3a      	ldrb	r2, [r7, #12]
 800d7ce:	4911      	ldr	r1, [pc, #68]	; (800d814 <UARTEx_SetNbDataToProcess+0x94>)
 800d7d0:	5c8a      	ldrb	r2, [r1, r2]
 800d7d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d7d6:	7b3a      	ldrb	r2, [r7, #12]
 800d7d8:	490f      	ldr	r1, [pc, #60]	; (800d818 <UARTEx_SetNbDataToProcess+0x98>)
 800d7da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d7dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7e8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ea:	7b7a      	ldrb	r2, [r7, #13]
 800d7ec:	4909      	ldr	r1, [pc, #36]	; (800d814 <UARTEx_SetNbDataToProcess+0x94>)
 800d7ee:	5c8a      	ldrb	r2, [r1, r2]
 800d7f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7f4:	7b7a      	ldrb	r2, [r7, #13]
 800d7f6:	4908      	ldr	r1, [pc, #32]	; (800d818 <UARTEx_SetNbDataToProcess+0x98>)
 800d7f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7fa:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d806:	bf00      	nop
 800d808:	3714      	adds	r7, #20
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	080243c0 	.word	0x080243c0
 800d818:	080243c8 	.word	0x080243c8

0800d81c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f043 0202 	orr.w	r2, r3, #2
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	021b      	lsls	r3, r3, #8
 800d83c:	431a      	orrs	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f023 0202 	bic.w	r2, r3, #2
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	601a      	str	r2, [r3, #0]
}
 800d84e:	bf00      	nop
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800d85a:	b480      	push	{r7}
 800d85c:	b08b      	sub	sp, #44	; 0x2c
 800d85e:	af00      	add	r7, sp, #0
 800d860:	60f8      	str	r0, [r7, #12]
 800d862:	60b9      	str	r1, [r7, #8]
 800d864:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681a      	ldr	r2, [r3, #0]
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	fa93 f3a3 	rbit	r3, r3
 800d874:	613b      	str	r3, [r7, #16]
  return result;
 800d876:	693b      	ldr	r3, [r7, #16]
 800d878:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d101      	bne.n	800d884 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800d880:	2320      	movs	r3, #32
 800d882:	e003      	b.n	800d88c <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	fab3 f383 	clz	r3, r3
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	2103      	movs	r1, #3
 800d890:	fa01 f303 	lsl.w	r3, r1, r3
 800d894:	43db      	mvns	r3, r3
 800d896:	401a      	ands	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	fa93 f3a3 	rbit	r3, r3
 800d8a2:	61fb      	str	r3, [r7, #28]
  return result;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d101      	bne.n	800d8b2 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800d8ae:	2320      	movs	r3, #32
 800d8b0:	e003      	b.n	800d8ba <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	fab3 f383 	clz	r3, r3
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	6879      	ldr	r1, [r7, #4]
 800d8be:	fa01 f303 	lsl.w	r3, r1, r3
 800d8c2:	431a      	orrs	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	601a      	str	r2, [r3, #0]
}
 800d8c8:	bf00      	nop
 800d8ca:	372c      	adds	r7, #44	; 0x2c
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b085      	sub	sp, #20
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	685a      	ldr	r2, [r3, #4]
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	43db      	mvns	r3, r3
 800d8e8:	401a      	ands	r2, r3
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	fb01 f303 	mul.w	r3, r1, r3
 800d8f2:	431a      	orrs	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	605a      	str	r2, [r3, #4]
}
 800d8f8:	bf00      	nop
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr

0800d904 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d904:	b480      	push	{r7}
 800d906:	b08b      	sub	sp, #44	; 0x2c
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	689a      	ldr	r2, [r3, #8]
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	fa93 f3a3 	rbit	r3, r3
 800d91e:	613b      	str	r3, [r7, #16]
  return result;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d924:	69bb      	ldr	r3, [r7, #24]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d101      	bne.n	800d92e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800d92a:	2320      	movs	r3, #32
 800d92c:	e003      	b.n	800d936 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800d92e:	69bb      	ldr	r3, [r7, #24]
 800d930:	fab3 f383 	clz	r3, r3
 800d934:	b2db      	uxtb	r3, r3
 800d936:	005b      	lsls	r3, r3, #1
 800d938:	2103      	movs	r1, #3
 800d93a:	fa01 f303 	lsl.w	r3, r1, r3
 800d93e:	43db      	mvns	r3, r3
 800d940:	401a      	ands	r2, r3
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	fa93 f3a3 	rbit	r3, r3
 800d94c:	61fb      	str	r3, [r7, #28]
  return result;
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d954:	2b00      	cmp	r3, #0
 800d956:	d101      	bne.n	800d95c <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800d958:	2320      	movs	r3, #32
 800d95a:	e003      	b.n	800d964 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800d95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95e:	fab3 f383 	clz	r3, r3
 800d962:	b2db      	uxtb	r3, r3
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	fa01 f303 	lsl.w	r3, r1, r3
 800d96c:	431a      	orrs	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800d972:	bf00      	nop
 800d974:	372c      	adds	r7, #44	; 0x2c
 800d976:	46bd      	mov	sp, r7
 800d978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97c:	4770      	bx	lr

0800d97e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d97e:	b480      	push	{r7}
 800d980:	b08b      	sub	sp, #44	; 0x2c
 800d982:	af00      	add	r7, sp, #0
 800d984:	60f8      	str	r0, [r7, #12]
 800d986:	60b9      	str	r1, [r7, #8]
 800d988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	68da      	ldr	r2, [r3, #12]
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	fa93 f3a3 	rbit	r3, r3
 800d998:	613b      	str	r3, [r7, #16]
  return result;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	e003      	b.n	800d9b0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	fab3 f383 	clz	r3, r3
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	005b      	lsls	r3, r3, #1
 800d9b2:	2103      	movs	r1, #3
 800d9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9b8:	43db      	mvns	r3, r3
 800d9ba:	401a      	ands	r2, r3
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d9c0:	6a3b      	ldr	r3, [r7, #32]
 800d9c2:	fa93 f3a3 	rbit	r3, r3
 800d9c6:	61fb      	str	r3, [r7, #28]
  return result;
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800d9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d101      	bne.n	800d9d6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800d9d2:	2320      	movs	r3, #32
 800d9d4:	e003      	b.n	800d9de <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d8:	fab3 f383 	clz	r3, r3
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	005b      	lsls	r3, r3, #1
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	60da      	str	r2, [r3, #12]
}
 800d9ec:	bf00      	nop
 800d9ee:	372c      	adds	r7, #44	; 0x2c
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b08b      	sub	sp, #44	; 0x2c
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	6a1a      	ldr	r2, [r3, #32]
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da0c:	697b      	ldr	r3, [r7, #20]
 800da0e:	fa93 f3a3 	rbit	r3, r3
 800da12:	613b      	str	r3, [r7, #16]
  return result;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800da18:	69bb      	ldr	r3, [r7, #24]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d101      	bne.n	800da22 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800da1e:	2320      	movs	r3, #32
 800da20:	e003      	b.n	800da2a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	fab3 f383 	clz	r3, r3
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	210f      	movs	r1, #15
 800da2e:	fa01 f303 	lsl.w	r3, r1, r3
 800da32:	43db      	mvns	r3, r3
 800da34:	401a      	ands	r2, r3
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da3a:	6a3b      	ldr	r3, [r7, #32]
 800da3c:	fa93 f3a3 	rbit	r3, r3
 800da40:	61fb      	str	r3, [r7, #28]
  return result;
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800da4c:	2320      	movs	r3, #32
 800da4e:	e003      	b.n	800da58 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800da50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da52:	fab3 f383 	clz	r3, r3
 800da56:	b2db      	uxtb	r3, r3
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	6879      	ldr	r1, [r7, #4]
 800da5c:	fa01 f303 	lsl.w	r3, r1, r3
 800da60:	431a      	orrs	r2, r3
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800da66:	bf00      	nop
 800da68:	372c      	adds	r7, #44	; 0x2c
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800da72:	b480      	push	{r7}
 800da74:	b08b      	sub	sp, #44	; 0x2c
 800da76:	af00      	add	r7, sp, #0
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	0a1b      	lsrs	r3, r3, #8
 800da86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	fa93 f3a3 	rbit	r3, r3
 800da8e:	613b      	str	r3, [r7, #16]
  return result;
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800da94:	69bb      	ldr	r3, [r7, #24]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d101      	bne.n	800da9e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800da9a:	2320      	movs	r3, #32
 800da9c:	e003      	b.n	800daa6 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	fab3 f383 	clz	r3, r3
 800daa4:	b2db      	uxtb	r3, r3
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	210f      	movs	r1, #15
 800daaa:	fa01 f303 	lsl.w	r3, r1, r3
 800daae:	43db      	mvns	r3, r3
 800dab0:	401a      	ands	r2, r3
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	0a1b      	lsrs	r3, r3, #8
 800dab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dab8:	6a3b      	ldr	r3, [r7, #32]
 800daba:	fa93 f3a3 	rbit	r3, r3
 800dabe:	61fb      	str	r3, [r7, #28]
  return result;
 800dac0:	69fb      	ldr	r3, [r7, #28]
 800dac2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d101      	bne.n	800dace <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800daca:	2320      	movs	r3, #32
 800dacc:	e003      	b.n	800dad6 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	fab3 f383 	clz	r3, r3
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	6879      	ldr	r1, [r7, #4]
 800dada:	fa01 f303 	lsl.w	r3, r1, r3
 800dade:	431a      	orrs	r2, r3
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800dae4:	bf00      	nop
 800dae6:	372c      	adds	r7, #44	; 0x2c
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b08a      	sub	sp, #40	; 0x28
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	fa93 f3a3 	rbit	r3, r3
 800db06:	617b      	str	r3, [r7, #20]
  return result;
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800db0c:	69fb      	ldr	r3, [r7, #28]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <LL_GPIO_Init+0x26>
    return 32U;
 800db12:	2320      	movs	r3, #32
 800db14:	e003      	b.n	800db1e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	fab3 f383 	clz	r3, r3
 800db1c:	b2db      	uxtb	r3, r3
 800db1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800db20:	e058      	b.n	800dbd4 <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	2101      	movs	r1, #1
 800db28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2a:	fa01 f303 	lsl.w	r3, r1, r3
 800db2e:	4013      	ands	r3, r2
 800db30:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800db32:	6a3b      	ldr	r3, [r7, #32]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d04a      	beq.n	800dbce <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d003      	beq.n	800db48 <LL_GPIO_Init+0x58>
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	2b02      	cmp	r3, #2
 800db46:	d10e      	bne.n	800db66 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	461a      	mov	r2, r3
 800db4e:	6a39      	ldr	r1, [r7, #32]
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff fed7 	bl	800d904 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	6819      	ldr	r1, [r3, #0]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	461a      	mov	r2, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7ff feb7 	bl	800d8d4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	461a      	mov	r2, r3
 800db6c:	6a39      	ldr	r1, [r7, #32]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f7ff ff05 	bl	800d97e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	2b02      	cmp	r3, #2
 800db7a:	d121      	bne.n	800dbc0 <LL_GPIO_Init+0xd0>
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	fa93 f3a3 	rbit	r3, r3
 800db86:	60bb      	str	r3, [r7, #8]
  return result;
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d101      	bne.n	800db96 <LL_GPIO_Init+0xa6>
    return 32U;
 800db92:	2320      	movs	r3, #32
 800db94:	e003      	b.n	800db9e <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	fab3 f383 	clz	r3, r3
 800db9c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800db9e:	2b07      	cmp	r3, #7
 800dba0:	d807      	bhi.n	800dbb2 <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	461a      	mov	r2, r3
 800dba8:	6a39      	ldr	r1, [r7, #32]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f7ff ff24 	bl	800d9f8 <LL_GPIO_SetAFPin_0_7>
 800dbb0:	e006      	b.n	800dbc0 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	695b      	ldr	r3, [r3, #20]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	6a39      	ldr	r1, [r7, #32]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff59 	bl	800da72 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	6a39      	ldr	r1, [r7, #32]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f7ff fe46 	bl	800d85a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	fa22 f303 	lsr.w	r3, r2, r3
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d19f      	bne.n	800db22 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3728      	adds	r7, #40	; 0x28
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbec:	b084      	sub	sp, #16
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
 800dbf6:	f107 001c 	add.w	r0, r7, #28
 800dbfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 fa68 	bl	800e0e0 <USB_CoreReset>
 800dc10:	4603      	mov	r3, r0
 800dc12:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800dc14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d106      	bne.n	800dc28 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	639a      	str	r2, [r3, #56]	; 0x38
 800dc26:	e005      	b.n	800dc34 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc40:	b004      	add	sp, #16
 800dc42:	4770      	bx	lr

0800dc44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b083      	sub	sp, #12
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f023 0201 	bic.w	r2, r3, #1
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	370c      	adds	r7, #12
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	6078      	str	r0, [r7, #4]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dc72:	2300      	movs	r3, #0
 800dc74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dc82:	78fb      	ldrb	r3, [r7, #3]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d115      	bne.n	800dcb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68db      	ldr	r3, [r3, #12]
 800dc8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dc94:	2001      	movs	r0, #1
 800dc96:	f7f8 f879 	bl	8005d8c <HAL_Delay>
      ms++;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fa0f 	bl	800e0c4 <USB_GetMode>
 800dca6:	4603      	mov	r3, r0
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d01e      	beq.n	800dcea <USB_SetCurrentMode+0x84>
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2b31      	cmp	r3, #49	; 0x31
 800dcb0:	d9f0      	bls.n	800dc94 <USB_SetCurrentMode+0x2e>
 800dcb2:	e01a      	b.n	800dcea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dcb4:	78fb      	ldrb	r3, [r7, #3]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d115      	bne.n	800dce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	68db      	ldr	r3, [r3, #12]
 800dcbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dcc6:	2001      	movs	r0, #1
 800dcc8:	f7f8 f860 	bl	8005d8c <HAL_Delay>
      ms++;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 f9f6 	bl	800e0c4 <USB_GetMode>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <USB_SetCurrentMode+0x84>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b31      	cmp	r3, #49	; 0x31
 800dce2:	d9f0      	bls.n	800dcc6 <USB_SetCurrentMode+0x60>
 800dce4:	e001      	b.n	800dcea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	e005      	b.n	800dcf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2b32      	cmp	r3, #50	; 0x32
 800dcee:	d101      	bne.n	800dcf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e000      	b.n	800dcf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dcf4:	2300      	movs	r3, #0
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
	...

0800dd00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dd00:	b084      	sub	sp, #16
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b086      	sub	sp, #24
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
 800dd0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dd0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dd12:	2300      	movs	r3, #0
 800dd14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]
 800dd1e:	e009      	b.n	800dd34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dd20:	687a      	ldr	r2, [r7, #4]
 800dd22:	693b      	ldr	r3, [r7, #16]
 800dd24:	3340      	adds	r3, #64	; 0x40
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	3301      	adds	r3, #1
 800dd32:	613b      	str	r3, [r7, #16]
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	2b0e      	cmp	r3, #14
 800dd38:	d9f2      	bls.n	800dd20 <USB_DevInit+0x20>
  /* Disable USB PHY pulldown resistors */
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dd3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d11c      	bne.n	800dd7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	68fa      	ldr	r2, [r7, #12]
 800dd4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd4e:	f043 0302 	orr.w	r3, r3, #2
 800dd52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	e005      	b.n	800dd86 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	2300      	movs	r3, #0
 800dd90:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dd92:	2103      	movs	r1, #3
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 f95b 	bl	800e050 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dd9a:	2110      	movs	r1, #16
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	f000 f8f3 	bl	800df88 <USB_FlushTxFifo>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d001      	beq.n	800ddac <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f000 f91f 	bl	800dff0 <USB_FlushRxFifo>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d001      	beq.n	800ddbc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddce:	461a      	mov	r2, r3
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddda:	461a      	mov	r2, r3
 800dddc:	2300      	movs	r3, #0
 800ddde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dde0:	2300      	movs	r3, #0
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	e043      	b.n	800de6e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	015a      	lsls	r2, r3, #5
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	4413      	add	r3, r2
 800ddee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ddf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddfc:	d118      	bne.n	800de30 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	2b00      	cmp	r3, #0
 800de02:	d10a      	bne.n	800de1a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	015a      	lsls	r2, r3, #5
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	4413      	add	r3, r2
 800de0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de10:	461a      	mov	r2, r3
 800de12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de16:	6013      	str	r3, [r2, #0]
 800de18:	e013      	b.n	800de42 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	015a      	lsls	r2, r3, #5
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	4413      	add	r3, r2
 800de22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de26:	461a      	mov	r2, r3
 800de28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800de2c:	6013      	str	r3, [r2, #0]
 800de2e:	e008      	b.n	800de42 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	015a      	lsls	r2, r3, #5
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	4413      	add	r3, r2
 800de38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de3c:	461a      	mov	r2, r3
 800de3e:	2300      	movs	r3, #0
 800de40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	015a      	lsls	r2, r3, #5
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	4413      	add	r3, r2
 800de4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de4e:	461a      	mov	r2, r3
 800de50:	2300      	movs	r3, #0
 800de52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	015a      	lsls	r2, r3, #5
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	4413      	add	r3, r2
 800de5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de60:	461a      	mov	r2, r3
 800de62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de68:	693b      	ldr	r3, [r7, #16]
 800de6a:	3301      	adds	r3, #1
 800de6c:	613b      	str	r3, [r7, #16]
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	693a      	ldr	r2, [r7, #16]
 800de72:	429a      	cmp	r2, r3
 800de74:	d3b7      	bcc.n	800dde6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de76:	2300      	movs	r3, #0
 800de78:	613b      	str	r3, [r7, #16]
 800de7a:	e043      	b.n	800df04 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	015a      	lsls	r2, r3, #5
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4413      	add	r3, r2
 800de84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800de8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800de92:	d118      	bne.n	800dec6 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d10a      	bne.n	800deb0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	015a      	lsls	r2, r3, #5
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	4413      	add	r3, r2
 800dea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dea6:	461a      	mov	r2, r3
 800dea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800deac:	6013      	str	r3, [r2, #0]
 800deae:	e013      	b.n	800ded8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	015a      	lsls	r2, r3, #5
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	4413      	add	r3, r2
 800deb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debc:	461a      	mov	r2, r3
 800debe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	e008      	b.n	800ded8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	015a      	lsls	r2, r3, #5
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	4413      	add	r3, r2
 800dece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded2:	461a      	mov	r2, r3
 800ded4:	2300      	movs	r3, #0
 800ded6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	015a      	lsls	r2, r3, #5
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	4413      	add	r3, r2
 800dee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee4:	461a      	mov	r2, r3
 800dee6:	2300      	movs	r3, #0
 800dee8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800deea:	693b      	ldr	r3, [r7, #16]
 800deec:	015a      	lsls	r2, r3, #5
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	4413      	add	r3, r2
 800def2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800def6:	461a      	mov	r2, r3
 800def8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800defc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	3301      	adds	r3, #1
 800df02:	613b      	str	r3, [r7, #16]
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d3b7      	bcc.n	800de7c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df12:	691b      	ldr	r3, [r3, #16]
 800df14:	68fa      	ldr	r2, [r7, #12]
 800df16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800df1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800df1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800df2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800df2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df30:	2b00      	cmp	r3, #0
 800df32:	d105      	bne.n	800df40 <USB_DevInit+0x240>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	699b      	ldr	r3, [r3, #24]
 800df38:	f043 0210 	orr.w	r2, r3, #16
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	699a      	ldr	r2, [r3, #24]
 800df44:	4b0f      	ldr	r3, [pc, #60]	; (800df84 <USB_DevInit+0x284>)
 800df46:	4313      	orrs	r3, r2
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800df4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d005      	beq.n	800df5e <USB_DevInit+0x25e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	f043 0208 	orr.w	r2, r3, #8
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800df5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df60:	2b01      	cmp	r3, #1
 800df62:	d107      	bne.n	800df74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	699b      	ldr	r3, [r3, #24]
 800df68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800df6c:	f043 0304 	orr.w	r3, r3, #4
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800df74:	7dfb      	ldrb	r3, [r7, #23]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3718      	adds	r7, #24
 800df7a:	46bd      	mov	sp, r7
 800df7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df80:	b004      	add	sp, #16
 800df82:	4770      	bx	lr
 800df84:	803c3800 	.word	0x803c3800

0800df88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800df88:	b480      	push	{r7}
 800df8a:	b085      	sub	sp, #20
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800df92:	2300      	movs	r3, #0
 800df94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3301      	adds	r3, #1
 800df9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	4a13      	ldr	r2, [pc, #76]	; (800dfec <USB_FlushTxFifo+0x64>)
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d901      	bls.n	800dfa8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	e01b      	b.n	800dfe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	daf2      	bge.n	800df96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	019b      	lsls	r3, r3, #6
 800dfb8:	f043 0220 	orr.w	r2, r3, #32
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	4a08      	ldr	r2, [pc, #32]	; (800dfec <USB_FlushTxFifo+0x64>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d901      	bls.n	800dfd2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e006      	b.n	800dfe0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	691b      	ldr	r3, [r3, #16]
 800dfd6:	f003 0320 	and.w	r3, r3, #32
 800dfda:	2b20      	cmp	r3, #32
 800dfdc:	d0f0      	beq.n	800dfc0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3714      	adds	r7, #20
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr
 800dfec:	00030d40 	.word	0x00030d40

0800dff0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dff8:	2300      	movs	r3, #0
 800dffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3301      	adds	r3, #1
 800e000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	4a11      	ldr	r2, [pc, #68]	; (800e04c <USB_FlushRxFifo+0x5c>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d901      	bls.n	800e00e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e00a:	2303      	movs	r3, #3
 800e00c:	e018      	b.n	800e040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	daf2      	bge.n	800dffc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e016:	2300      	movs	r3, #0
 800e018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2210      	movs	r2, #16
 800e01e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	3301      	adds	r3, #1
 800e024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	4a08      	ldr	r2, [pc, #32]	; (800e04c <USB_FlushRxFifo+0x5c>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d901      	bls.n	800e032 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e02e:	2303      	movs	r3, #3
 800e030:	e006      	b.n	800e040 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	691b      	ldr	r3, [r3, #16]
 800e036:	f003 0310 	and.w	r3, r3, #16
 800e03a:	2b10      	cmp	r3, #16
 800e03c:	d0f0      	beq.n	800e020 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	00030d40 	.word	0x00030d40

0800e050 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	460b      	mov	r3, r1
 800e05a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	78fb      	ldrb	r3, [r7, #3]
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e070:	4313      	orrs	r3, r2
 800e072:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e074:	2300      	movs	r3, #0
}
 800e076:	4618      	mov	r0, r3
 800e078:	3714      	adds	r7, #20
 800e07a:	46bd      	mov	sp, r7
 800e07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e080:	4770      	bx	lr

0800e082 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e082:	b480      	push	{r7}
 800e084:	b085      	sub	sp, #20
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e09c:	f023 0303 	bic.w	r3, r3, #3
 800e0a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e0b0:	f043 0302 	orr.w	r3, r3, #2
 800e0b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e0b6:	2300      	movs	r3, #0
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b083      	sub	sp, #12
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	695b      	ldr	r3, [r3, #20]
 800e0d0:	f003 0301 	and.w	r3, r3, #1
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b085      	sub	sp, #20
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4a13      	ldr	r2, [pc, #76]	; (800e144 <USB_CoreReset+0x64>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d901      	bls.n	800e0fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e0fa:	2303      	movs	r3, #3
 800e0fc:	e01b      	b.n	800e136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	691b      	ldr	r3, [r3, #16]
 800e102:	2b00      	cmp	r3, #0
 800e104:	daf2      	bge.n	800e0ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e106:	2300      	movs	r3, #0
 800e108:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	691b      	ldr	r3, [r3, #16]
 800e10e:	f043 0201 	orr.w	r2, r3, #1
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	3301      	adds	r3, #1
 800e11a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	4a09      	ldr	r2, [pc, #36]	; (800e144 <USB_CoreReset+0x64>)
 800e120:	4293      	cmp	r3, r2
 800e122:	d901      	bls.n	800e128 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e124:	2303      	movs	r3, #3
 800e126:	e006      	b.n	800e136 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	f003 0301 	and.w	r3, r3, #1
 800e130:	2b01      	cmp	r3, #1
 800e132:	d0f0      	beq.n	800e116 <USB_CoreReset+0x36>

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3714      	adds	r7, #20
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	00030d40 	.word	0x00030d40

0800e148 <__errno>:
 800e148:	4b01      	ldr	r3, [pc, #4]	; (800e150 <__errno+0x8>)
 800e14a:	6818      	ldr	r0, [r3, #0]
 800e14c:	4770      	bx	lr
 800e14e:	bf00      	nop
 800e150:	2000004c 	.word	0x2000004c

0800e154 <__libc_init_array>:
 800e154:	b570      	push	{r4, r5, r6, lr}
 800e156:	4d0d      	ldr	r5, [pc, #52]	; (800e18c <__libc_init_array+0x38>)
 800e158:	2600      	movs	r6, #0
 800e15a:	4c0d      	ldr	r4, [pc, #52]	; (800e190 <__libc_init_array+0x3c>)
 800e15c:	1b64      	subs	r4, r4, r5
 800e15e:	10a4      	asrs	r4, r4, #2
 800e160:	42a6      	cmp	r6, r4
 800e162:	d109      	bne.n	800e178 <__libc_init_array+0x24>
 800e164:	4d0b      	ldr	r5, [pc, #44]	; (800e194 <__libc_init_array+0x40>)
 800e166:	2600      	movs	r6, #0
 800e168:	4c0b      	ldr	r4, [pc, #44]	; (800e198 <__libc_init_array+0x44>)
 800e16a:	f000 fc9d 	bl	800eaa8 <_init>
 800e16e:	1b64      	subs	r4, r4, r5
 800e170:	10a4      	asrs	r4, r4, #2
 800e172:	42a6      	cmp	r6, r4
 800e174:	d105      	bne.n	800e182 <__libc_init_array+0x2e>
 800e176:	bd70      	pop	{r4, r5, r6, pc}
 800e178:	f855 3b04 	ldr.w	r3, [r5], #4
 800e17c:	3601      	adds	r6, #1
 800e17e:	4798      	blx	r3
 800e180:	e7ee      	b.n	800e160 <__libc_init_array+0xc>
 800e182:	f855 3b04 	ldr.w	r3, [r5], #4
 800e186:	3601      	adds	r6, #1
 800e188:	4798      	blx	r3
 800e18a:	e7f2      	b.n	800e172 <__libc_init_array+0x1e>
 800e18c:	0802440c 	.word	0x0802440c
 800e190:	0802440c 	.word	0x0802440c
 800e194:	0802440c 	.word	0x0802440c
 800e198:	08024410 	.word	0x08024410

0800e19c <memcpy>:
 800e19c:	440a      	add	r2, r1
 800e19e:	1e43      	subs	r3, r0, #1
 800e1a0:	4291      	cmp	r1, r2
 800e1a2:	d100      	bne.n	800e1a6 <memcpy+0xa>
 800e1a4:	4770      	bx	lr
 800e1a6:	b510      	push	{r4, lr}
 800e1a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1ac:	4291      	cmp	r1, r2
 800e1ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1b2:	d1f9      	bne.n	800e1a8 <memcpy+0xc>
 800e1b4:	bd10      	pop	{r4, pc}

0800e1b6 <memset>:
 800e1b6:	4402      	add	r2, r0
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d100      	bne.n	800e1c0 <memset+0xa>
 800e1be:	4770      	bx	lr
 800e1c0:	f803 1b01 	strb.w	r1, [r3], #1
 800e1c4:	e7f9      	b.n	800e1ba <memset+0x4>
	...

0800e1c8 <siprintf>:
 800e1c8:	b40e      	push	{r1, r2, r3}
 800e1ca:	b500      	push	{lr}
 800e1cc:	b09c      	sub	sp, #112	; 0x70
 800e1ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1d2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1d4:	9002      	str	r0, [sp, #8]
 800e1d6:	9006      	str	r0, [sp, #24]
 800e1d8:	9107      	str	r1, [sp, #28]
 800e1da:	9104      	str	r1, [sp, #16]
 800e1dc:	4808      	ldr	r0, [pc, #32]	; (800e200 <siprintf+0x38>)
 800e1de:	4909      	ldr	r1, [pc, #36]	; (800e204 <siprintf+0x3c>)
 800e1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e4:	9105      	str	r1, [sp, #20]
 800e1e6:	a902      	add	r1, sp, #8
 800e1e8:	6800      	ldr	r0, [r0, #0]
 800e1ea:	9301      	str	r3, [sp, #4]
 800e1ec:	f000 f868 	bl	800e2c0 <_svfiprintf_r>
 800e1f0:	9b02      	ldr	r3, [sp, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	701a      	strb	r2, [r3, #0]
 800e1f6:	b01c      	add	sp, #112	; 0x70
 800e1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1fc:	b003      	add	sp, #12
 800e1fe:	4770      	bx	lr
 800e200:	2000004c 	.word	0x2000004c
 800e204:	ffff0208 	.word	0xffff0208

0800e208 <__ssputs_r>:
 800e208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e20c:	688e      	ldr	r6, [r1, #8]
 800e20e:	4682      	mov	sl, r0
 800e210:	460c      	mov	r4, r1
 800e212:	4690      	mov	r8, r2
 800e214:	429e      	cmp	r6, r3
 800e216:	461f      	mov	r7, r3
 800e218:	d838      	bhi.n	800e28c <__ssputs_r+0x84>
 800e21a:	898a      	ldrh	r2, [r1, #12]
 800e21c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e220:	d032      	beq.n	800e288 <__ssputs_r+0x80>
 800e222:	6825      	ldr	r5, [r4, #0]
 800e224:	3301      	adds	r3, #1
 800e226:	6909      	ldr	r1, [r1, #16]
 800e228:	eba5 0901 	sub.w	r9, r5, r1
 800e22c:	6965      	ldr	r5, [r4, #20]
 800e22e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e232:	444b      	add	r3, r9
 800e234:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e238:	106d      	asrs	r5, r5, #1
 800e23a:	429d      	cmp	r5, r3
 800e23c:	bf38      	it	cc
 800e23e:	461d      	movcc	r5, r3
 800e240:	0553      	lsls	r3, r2, #21
 800e242:	d531      	bpl.n	800e2a8 <__ssputs_r+0xa0>
 800e244:	4629      	mov	r1, r5
 800e246:	f000 fb65 	bl	800e914 <_malloc_r>
 800e24a:	4606      	mov	r6, r0
 800e24c:	b950      	cbnz	r0, 800e264 <__ssputs_r+0x5c>
 800e24e:	230c      	movs	r3, #12
 800e250:	f04f 30ff 	mov.w	r0, #4294967295
 800e254:	f8ca 3000 	str.w	r3, [sl]
 800e258:	89a3      	ldrh	r3, [r4, #12]
 800e25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e264:	464a      	mov	r2, r9
 800e266:	6921      	ldr	r1, [r4, #16]
 800e268:	f7ff ff98 	bl	800e19c <memcpy>
 800e26c:	89a3      	ldrh	r3, [r4, #12]
 800e26e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e276:	81a3      	strh	r3, [r4, #12]
 800e278:	6126      	str	r6, [r4, #16]
 800e27a:	444e      	add	r6, r9
 800e27c:	6165      	str	r5, [r4, #20]
 800e27e:	eba5 0509 	sub.w	r5, r5, r9
 800e282:	6026      	str	r6, [r4, #0]
 800e284:	463e      	mov	r6, r7
 800e286:	60a5      	str	r5, [r4, #8]
 800e288:	42be      	cmp	r6, r7
 800e28a:	d900      	bls.n	800e28e <__ssputs_r+0x86>
 800e28c:	463e      	mov	r6, r7
 800e28e:	4632      	mov	r2, r6
 800e290:	4641      	mov	r1, r8
 800e292:	6820      	ldr	r0, [r4, #0]
 800e294:	f000 fab8 	bl	800e808 <memmove>
 800e298:	68a3      	ldr	r3, [r4, #8]
 800e29a:	2000      	movs	r0, #0
 800e29c:	1b9b      	subs	r3, r3, r6
 800e29e:	60a3      	str	r3, [r4, #8]
 800e2a0:	6823      	ldr	r3, [r4, #0]
 800e2a2:	4433      	add	r3, r6
 800e2a4:	6023      	str	r3, [r4, #0]
 800e2a6:	e7db      	b.n	800e260 <__ssputs_r+0x58>
 800e2a8:	462a      	mov	r2, r5
 800e2aa:	f000 fba7 	bl	800e9fc <_realloc_r>
 800e2ae:	4606      	mov	r6, r0
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	d1e1      	bne.n	800e278 <__ssputs_r+0x70>
 800e2b4:	6921      	ldr	r1, [r4, #16]
 800e2b6:	4650      	mov	r0, sl
 800e2b8:	f000 fac0 	bl	800e83c <_free_r>
 800e2bc:	e7c7      	b.n	800e24e <__ssputs_r+0x46>
	...

0800e2c0 <_svfiprintf_r>:
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	4698      	mov	r8, r3
 800e2c6:	898b      	ldrh	r3, [r1, #12]
 800e2c8:	b09d      	sub	sp, #116	; 0x74
 800e2ca:	4607      	mov	r7, r0
 800e2cc:	061b      	lsls	r3, r3, #24
 800e2ce:	460d      	mov	r5, r1
 800e2d0:	4614      	mov	r4, r2
 800e2d2:	d50e      	bpl.n	800e2f2 <_svfiprintf_r+0x32>
 800e2d4:	690b      	ldr	r3, [r1, #16]
 800e2d6:	b963      	cbnz	r3, 800e2f2 <_svfiprintf_r+0x32>
 800e2d8:	2140      	movs	r1, #64	; 0x40
 800e2da:	f000 fb1b 	bl	800e914 <_malloc_r>
 800e2de:	6028      	str	r0, [r5, #0]
 800e2e0:	6128      	str	r0, [r5, #16]
 800e2e2:	b920      	cbnz	r0, 800e2ee <_svfiprintf_r+0x2e>
 800e2e4:	230c      	movs	r3, #12
 800e2e6:	603b      	str	r3, [r7, #0]
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	e0d1      	b.n	800e492 <_svfiprintf_r+0x1d2>
 800e2ee:	2340      	movs	r3, #64	; 0x40
 800e2f0:	616b      	str	r3, [r5, #20]
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2f8:	f04f 0901 	mov.w	r9, #1
 800e2fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e4ac <_svfiprintf_r+0x1ec>
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	2320      	movs	r3, #32
 800e304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e308:	2330      	movs	r3, #48	; 0x30
 800e30a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e30e:	4623      	mov	r3, r4
 800e310:	469a      	mov	sl, r3
 800e312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e316:	b10a      	cbz	r2, 800e31c <_svfiprintf_r+0x5c>
 800e318:	2a25      	cmp	r2, #37	; 0x25
 800e31a:	d1f9      	bne.n	800e310 <_svfiprintf_r+0x50>
 800e31c:	ebba 0b04 	subs.w	fp, sl, r4
 800e320:	d00b      	beq.n	800e33a <_svfiprintf_r+0x7a>
 800e322:	465b      	mov	r3, fp
 800e324:	4622      	mov	r2, r4
 800e326:	4629      	mov	r1, r5
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ff6d 	bl	800e208 <__ssputs_r>
 800e32e:	3001      	adds	r0, #1
 800e330:	f000 80aa 	beq.w	800e488 <_svfiprintf_r+0x1c8>
 800e334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e336:	445a      	add	r2, fp
 800e338:	9209      	str	r2, [sp, #36]	; 0x24
 800e33a:	f89a 3000 	ldrb.w	r3, [sl]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	f000 80a2 	beq.w	800e488 <_svfiprintf_r+0x1c8>
 800e344:	2300      	movs	r3, #0
 800e346:	f04f 32ff 	mov.w	r2, #4294967295
 800e34a:	f10a 0a01 	add.w	sl, sl, #1
 800e34e:	9304      	str	r3, [sp, #16]
 800e350:	9307      	str	r3, [sp, #28]
 800e352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e356:	931a      	str	r3, [sp, #104]	; 0x68
 800e358:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35c:	4654      	mov	r4, sl
 800e35e:	2205      	movs	r2, #5
 800e360:	4852      	ldr	r0, [pc, #328]	; (800e4ac <_svfiprintf_r+0x1ec>)
 800e362:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e366:	f000 fa41 	bl	800e7ec <memchr>
 800e36a:	9a04      	ldr	r2, [sp, #16]
 800e36c:	b9d8      	cbnz	r0, 800e3a6 <_svfiprintf_r+0xe6>
 800e36e:	06d0      	lsls	r0, r2, #27
 800e370:	bf44      	itt	mi
 800e372:	2320      	movmi	r3, #32
 800e374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e378:	0711      	lsls	r1, r2, #28
 800e37a:	bf44      	itt	mi
 800e37c:	232b      	movmi	r3, #43	; 0x2b
 800e37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e382:	f89a 3000 	ldrb.w	r3, [sl]
 800e386:	2b2a      	cmp	r3, #42	; 0x2a
 800e388:	d015      	beq.n	800e3b6 <_svfiprintf_r+0xf6>
 800e38a:	9a07      	ldr	r2, [sp, #28]
 800e38c:	4654      	mov	r4, sl
 800e38e:	2000      	movs	r0, #0
 800e390:	f04f 0c0a 	mov.w	ip, #10
 800e394:	4621      	mov	r1, r4
 800e396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e39a:	3b30      	subs	r3, #48	; 0x30
 800e39c:	2b09      	cmp	r3, #9
 800e39e:	d94e      	bls.n	800e43e <_svfiprintf_r+0x17e>
 800e3a0:	b1b0      	cbz	r0, 800e3d0 <_svfiprintf_r+0x110>
 800e3a2:	9207      	str	r2, [sp, #28]
 800e3a4:	e014      	b.n	800e3d0 <_svfiprintf_r+0x110>
 800e3a6:	eba0 0308 	sub.w	r3, r0, r8
 800e3aa:	46a2      	mov	sl, r4
 800e3ac:	fa09 f303 	lsl.w	r3, r9, r3
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	e7d2      	b.n	800e35c <_svfiprintf_r+0x9c>
 800e3b6:	9b03      	ldr	r3, [sp, #12]
 800e3b8:	1d19      	adds	r1, r3, #4
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	9103      	str	r1, [sp, #12]
 800e3c0:	bfbb      	ittet	lt
 800e3c2:	425b      	neglt	r3, r3
 800e3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800e3c8:	9307      	strge	r3, [sp, #28]
 800e3ca:	9307      	strlt	r3, [sp, #28]
 800e3cc:	bfb8      	it	lt
 800e3ce:	9204      	strlt	r2, [sp, #16]
 800e3d0:	7823      	ldrb	r3, [r4, #0]
 800e3d2:	2b2e      	cmp	r3, #46	; 0x2e
 800e3d4:	d10c      	bne.n	800e3f0 <_svfiprintf_r+0x130>
 800e3d6:	7863      	ldrb	r3, [r4, #1]
 800e3d8:	2b2a      	cmp	r3, #42	; 0x2a
 800e3da:	d135      	bne.n	800e448 <_svfiprintf_r+0x188>
 800e3dc:	9b03      	ldr	r3, [sp, #12]
 800e3de:	3402      	adds	r4, #2
 800e3e0:	1d1a      	adds	r2, r3, #4
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	9203      	str	r2, [sp, #12]
 800e3e8:	bfb8      	it	lt
 800e3ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3ee:	9305      	str	r3, [sp, #20]
 800e3f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4bc <_svfiprintf_r+0x1fc>
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	7821      	ldrb	r1, [r4, #0]
 800e3f8:	4650      	mov	r0, sl
 800e3fa:	f000 f9f7 	bl	800e7ec <memchr>
 800e3fe:	b140      	cbz	r0, 800e412 <_svfiprintf_r+0x152>
 800e400:	2340      	movs	r3, #64	; 0x40
 800e402:	eba0 000a 	sub.w	r0, r0, sl
 800e406:	3401      	adds	r4, #1
 800e408:	fa03 f000 	lsl.w	r0, r3, r0
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	4303      	orrs	r3, r0
 800e410:	9304      	str	r3, [sp, #16]
 800e412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e416:	2206      	movs	r2, #6
 800e418:	4825      	ldr	r0, [pc, #148]	; (800e4b0 <_svfiprintf_r+0x1f0>)
 800e41a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e41e:	f000 f9e5 	bl	800e7ec <memchr>
 800e422:	2800      	cmp	r0, #0
 800e424:	d038      	beq.n	800e498 <_svfiprintf_r+0x1d8>
 800e426:	4b23      	ldr	r3, [pc, #140]	; (800e4b4 <_svfiprintf_r+0x1f4>)
 800e428:	bb1b      	cbnz	r3, 800e472 <_svfiprintf_r+0x1b2>
 800e42a:	9b03      	ldr	r3, [sp, #12]
 800e42c:	3307      	adds	r3, #7
 800e42e:	f023 0307 	bic.w	r3, r3, #7
 800e432:	3308      	adds	r3, #8
 800e434:	9303      	str	r3, [sp, #12]
 800e436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e438:	4433      	add	r3, r6
 800e43a:	9309      	str	r3, [sp, #36]	; 0x24
 800e43c:	e767      	b.n	800e30e <_svfiprintf_r+0x4e>
 800e43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e442:	460c      	mov	r4, r1
 800e444:	2001      	movs	r0, #1
 800e446:	e7a5      	b.n	800e394 <_svfiprintf_r+0xd4>
 800e448:	2300      	movs	r3, #0
 800e44a:	3401      	adds	r4, #1
 800e44c:	f04f 0c0a 	mov.w	ip, #10
 800e450:	4619      	mov	r1, r3
 800e452:	9305      	str	r3, [sp, #20]
 800e454:	4620      	mov	r0, r4
 800e456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e45a:	3a30      	subs	r2, #48	; 0x30
 800e45c:	2a09      	cmp	r2, #9
 800e45e:	d903      	bls.n	800e468 <_svfiprintf_r+0x1a8>
 800e460:	2b00      	cmp	r3, #0
 800e462:	d0c5      	beq.n	800e3f0 <_svfiprintf_r+0x130>
 800e464:	9105      	str	r1, [sp, #20]
 800e466:	e7c3      	b.n	800e3f0 <_svfiprintf_r+0x130>
 800e468:	fb0c 2101 	mla	r1, ip, r1, r2
 800e46c:	4604      	mov	r4, r0
 800e46e:	2301      	movs	r3, #1
 800e470:	e7f0      	b.n	800e454 <_svfiprintf_r+0x194>
 800e472:	ab03      	add	r3, sp, #12
 800e474:	462a      	mov	r2, r5
 800e476:	a904      	add	r1, sp, #16
 800e478:	4638      	mov	r0, r7
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	4b0e      	ldr	r3, [pc, #56]	; (800e4b8 <_svfiprintf_r+0x1f8>)
 800e47e:	e000      	b.n	800e482 <_svfiprintf_r+0x1c2>
 800e480:	bf00      	nop
 800e482:	1c42      	adds	r2, r0, #1
 800e484:	4606      	mov	r6, r0
 800e486:	d1d6      	bne.n	800e436 <_svfiprintf_r+0x176>
 800e488:	89ab      	ldrh	r3, [r5, #12]
 800e48a:	065b      	lsls	r3, r3, #25
 800e48c:	f53f af2c 	bmi.w	800e2e8 <_svfiprintf_r+0x28>
 800e490:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e492:	b01d      	add	sp, #116	; 0x74
 800e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e498:	ab03      	add	r3, sp, #12
 800e49a:	462a      	mov	r2, r5
 800e49c:	a904      	add	r1, sp, #16
 800e49e:	4638      	mov	r0, r7
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	4b05      	ldr	r3, [pc, #20]	; (800e4b8 <_svfiprintf_r+0x1f8>)
 800e4a4:	f000 f87c 	bl	800e5a0 <_printf_i>
 800e4a8:	e7eb      	b.n	800e482 <_svfiprintf_r+0x1c2>
 800e4aa:	bf00      	nop
 800e4ac:	080243d0 	.word	0x080243d0
 800e4b0:	080243da 	.word	0x080243da
 800e4b4:	00000000 	.word	0x00000000
 800e4b8:	0800e209 	.word	0x0800e209
 800e4bc:	080243d6 	.word	0x080243d6

0800e4c0 <_printf_common>:
 800e4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4c4:	4616      	mov	r6, r2
 800e4c6:	4699      	mov	r9, r3
 800e4c8:	688a      	ldr	r2, [r1, #8]
 800e4ca:	4607      	mov	r7, r0
 800e4cc:	690b      	ldr	r3, [r1, #16]
 800e4ce:	460c      	mov	r4, r1
 800e4d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e4d4:	4293      	cmp	r3, r2
 800e4d6:	bfb8      	it	lt
 800e4d8:	4613      	movlt	r3, r2
 800e4da:	6033      	str	r3, [r6, #0]
 800e4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e4e0:	b10a      	cbz	r2, 800e4e6 <_printf_common+0x26>
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	6033      	str	r3, [r6, #0]
 800e4e6:	6823      	ldr	r3, [r4, #0]
 800e4e8:	0699      	lsls	r1, r3, #26
 800e4ea:	bf42      	ittt	mi
 800e4ec:	6833      	ldrmi	r3, [r6, #0]
 800e4ee:	3302      	addmi	r3, #2
 800e4f0:	6033      	strmi	r3, [r6, #0]
 800e4f2:	6825      	ldr	r5, [r4, #0]
 800e4f4:	f015 0506 	ands.w	r5, r5, #6
 800e4f8:	d106      	bne.n	800e508 <_printf_common+0x48>
 800e4fa:	f104 0a19 	add.w	sl, r4, #25
 800e4fe:	68e3      	ldr	r3, [r4, #12]
 800e500:	6832      	ldr	r2, [r6, #0]
 800e502:	1a9b      	subs	r3, r3, r2
 800e504:	42ab      	cmp	r3, r5
 800e506:	dc29      	bgt.n	800e55c <_printf_common+0x9c>
 800e508:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e50c:	1e13      	subs	r3, r2, #0
 800e50e:	6822      	ldr	r2, [r4, #0]
 800e510:	bf18      	it	ne
 800e512:	2301      	movne	r3, #1
 800e514:	0692      	lsls	r2, r2, #26
 800e516:	d42e      	bmi.n	800e576 <_printf_common+0xb6>
 800e518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e51c:	4649      	mov	r1, r9
 800e51e:	4638      	mov	r0, r7
 800e520:	47c0      	blx	r8
 800e522:	3001      	adds	r0, #1
 800e524:	d021      	beq.n	800e56a <_printf_common+0xaa>
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	341a      	adds	r4, #26
 800e52a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800e52e:	f003 0306 	and.w	r3, r3, #6
 800e532:	6832      	ldr	r2, [r6, #0]
 800e534:	2600      	movs	r6, #0
 800e536:	2b04      	cmp	r3, #4
 800e538:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e53c:	bf08      	it	eq
 800e53e:	1aad      	subeq	r5, r5, r2
 800e540:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e544:	bf14      	ite	ne
 800e546:	2500      	movne	r5, #0
 800e548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e54c:	4293      	cmp	r3, r2
 800e54e:	bfc4      	itt	gt
 800e550:	1a9b      	subgt	r3, r3, r2
 800e552:	18ed      	addgt	r5, r5, r3
 800e554:	42b5      	cmp	r5, r6
 800e556:	d11a      	bne.n	800e58e <_printf_common+0xce>
 800e558:	2000      	movs	r0, #0
 800e55a:	e008      	b.n	800e56e <_printf_common+0xae>
 800e55c:	2301      	movs	r3, #1
 800e55e:	4652      	mov	r2, sl
 800e560:	4649      	mov	r1, r9
 800e562:	4638      	mov	r0, r7
 800e564:	47c0      	blx	r8
 800e566:	3001      	adds	r0, #1
 800e568:	d103      	bne.n	800e572 <_printf_common+0xb2>
 800e56a:	f04f 30ff 	mov.w	r0, #4294967295
 800e56e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e572:	3501      	adds	r5, #1
 800e574:	e7c3      	b.n	800e4fe <_printf_common+0x3e>
 800e576:	18e1      	adds	r1, r4, r3
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	2030      	movs	r0, #48	; 0x30
 800e57c:	3302      	adds	r3, #2
 800e57e:	4422      	add	r2, r4
 800e580:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e584:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e588:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e58c:	e7c4      	b.n	800e518 <_printf_common+0x58>
 800e58e:	2301      	movs	r3, #1
 800e590:	4622      	mov	r2, r4
 800e592:	4649      	mov	r1, r9
 800e594:	4638      	mov	r0, r7
 800e596:	47c0      	blx	r8
 800e598:	3001      	adds	r0, #1
 800e59a:	d0e6      	beq.n	800e56a <_printf_common+0xaa>
 800e59c:	3601      	adds	r6, #1
 800e59e:	e7d9      	b.n	800e554 <_printf_common+0x94>

0800e5a0 <_printf_i>:
 800e5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5a4:	7e0f      	ldrb	r7, [r1, #24]
 800e5a6:	4691      	mov	r9, r2
 800e5a8:	4680      	mov	r8, r0
 800e5aa:	460c      	mov	r4, r1
 800e5ac:	2f78      	cmp	r7, #120	; 0x78
 800e5ae:	469a      	mov	sl, r3
 800e5b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e5b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e5b6:	d807      	bhi.n	800e5c8 <_printf_i+0x28>
 800e5b8:	2f62      	cmp	r7, #98	; 0x62
 800e5ba:	d80a      	bhi.n	800e5d2 <_printf_i+0x32>
 800e5bc:	2f00      	cmp	r7, #0
 800e5be:	f000 80d8 	beq.w	800e772 <_printf_i+0x1d2>
 800e5c2:	2f58      	cmp	r7, #88	; 0x58
 800e5c4:	f000 80a3 	beq.w	800e70e <_printf_i+0x16e>
 800e5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e5d0:	e03a      	b.n	800e648 <_printf_i+0xa8>
 800e5d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e5d6:	2b15      	cmp	r3, #21
 800e5d8:	d8f6      	bhi.n	800e5c8 <_printf_i+0x28>
 800e5da:	a101      	add	r1, pc, #4	; (adr r1, 800e5e0 <_printf_i+0x40>)
 800e5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e5e0:	0800e639 	.word	0x0800e639
 800e5e4:	0800e64d 	.word	0x0800e64d
 800e5e8:	0800e5c9 	.word	0x0800e5c9
 800e5ec:	0800e5c9 	.word	0x0800e5c9
 800e5f0:	0800e5c9 	.word	0x0800e5c9
 800e5f4:	0800e5c9 	.word	0x0800e5c9
 800e5f8:	0800e64d 	.word	0x0800e64d
 800e5fc:	0800e5c9 	.word	0x0800e5c9
 800e600:	0800e5c9 	.word	0x0800e5c9
 800e604:	0800e5c9 	.word	0x0800e5c9
 800e608:	0800e5c9 	.word	0x0800e5c9
 800e60c:	0800e759 	.word	0x0800e759
 800e610:	0800e67d 	.word	0x0800e67d
 800e614:	0800e73b 	.word	0x0800e73b
 800e618:	0800e5c9 	.word	0x0800e5c9
 800e61c:	0800e5c9 	.word	0x0800e5c9
 800e620:	0800e77b 	.word	0x0800e77b
 800e624:	0800e5c9 	.word	0x0800e5c9
 800e628:	0800e67d 	.word	0x0800e67d
 800e62c:	0800e5c9 	.word	0x0800e5c9
 800e630:	0800e5c9 	.word	0x0800e5c9
 800e634:	0800e743 	.word	0x0800e743
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	602a      	str	r2, [r5, #0]
 800e640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e644:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e648:	2301      	movs	r3, #1
 800e64a:	e0a3      	b.n	800e794 <_printf_i+0x1f4>
 800e64c:	6820      	ldr	r0, [r4, #0]
 800e64e:	6829      	ldr	r1, [r5, #0]
 800e650:	0606      	lsls	r6, r0, #24
 800e652:	f101 0304 	add.w	r3, r1, #4
 800e656:	d50a      	bpl.n	800e66e <_printf_i+0xce>
 800e658:	680e      	ldr	r6, [r1, #0]
 800e65a:	602b      	str	r3, [r5, #0]
 800e65c:	2e00      	cmp	r6, #0
 800e65e:	da03      	bge.n	800e668 <_printf_i+0xc8>
 800e660:	232d      	movs	r3, #45	; 0x2d
 800e662:	4276      	negs	r6, r6
 800e664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e668:	485e      	ldr	r0, [pc, #376]	; (800e7e4 <_printf_i+0x244>)
 800e66a:	230a      	movs	r3, #10
 800e66c:	e019      	b.n	800e6a2 <_printf_i+0x102>
 800e66e:	680e      	ldr	r6, [r1, #0]
 800e670:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e674:	602b      	str	r3, [r5, #0]
 800e676:	bf18      	it	ne
 800e678:	b236      	sxthne	r6, r6
 800e67a:	e7ef      	b.n	800e65c <_printf_i+0xbc>
 800e67c:	682b      	ldr	r3, [r5, #0]
 800e67e:	6820      	ldr	r0, [r4, #0]
 800e680:	1d19      	adds	r1, r3, #4
 800e682:	6029      	str	r1, [r5, #0]
 800e684:	0601      	lsls	r1, r0, #24
 800e686:	d501      	bpl.n	800e68c <_printf_i+0xec>
 800e688:	681e      	ldr	r6, [r3, #0]
 800e68a:	e002      	b.n	800e692 <_printf_i+0xf2>
 800e68c:	0646      	lsls	r6, r0, #25
 800e68e:	d5fb      	bpl.n	800e688 <_printf_i+0xe8>
 800e690:	881e      	ldrh	r6, [r3, #0]
 800e692:	2f6f      	cmp	r7, #111	; 0x6f
 800e694:	4853      	ldr	r0, [pc, #332]	; (800e7e4 <_printf_i+0x244>)
 800e696:	bf0c      	ite	eq
 800e698:	2308      	moveq	r3, #8
 800e69a:	230a      	movne	r3, #10
 800e69c:	2100      	movs	r1, #0
 800e69e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6a2:	6865      	ldr	r5, [r4, #4]
 800e6a4:	2d00      	cmp	r5, #0
 800e6a6:	60a5      	str	r5, [r4, #8]
 800e6a8:	bfa2      	ittt	ge
 800e6aa:	6821      	ldrge	r1, [r4, #0]
 800e6ac:	f021 0104 	bicge.w	r1, r1, #4
 800e6b0:	6021      	strge	r1, [r4, #0]
 800e6b2:	b90e      	cbnz	r6, 800e6b8 <_printf_i+0x118>
 800e6b4:	2d00      	cmp	r5, #0
 800e6b6:	d04d      	beq.n	800e754 <_printf_i+0x1b4>
 800e6b8:	4615      	mov	r5, r2
 800e6ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800e6be:	fb03 6711 	mls	r7, r3, r1, r6
 800e6c2:	5dc7      	ldrb	r7, [r0, r7]
 800e6c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e6c8:	4637      	mov	r7, r6
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	42bb      	cmp	r3, r7
 800e6ce:	d9f4      	bls.n	800e6ba <_printf_i+0x11a>
 800e6d0:	2b08      	cmp	r3, #8
 800e6d2:	d10b      	bne.n	800e6ec <_printf_i+0x14c>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	07de      	lsls	r6, r3, #31
 800e6d8:	d508      	bpl.n	800e6ec <_printf_i+0x14c>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	6861      	ldr	r1, [r4, #4]
 800e6de:	4299      	cmp	r1, r3
 800e6e0:	bfde      	ittt	le
 800e6e2:	2330      	movle	r3, #48	; 0x30
 800e6e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e6e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e6ec:	1b52      	subs	r2, r2, r5
 800e6ee:	6122      	str	r2, [r4, #16]
 800e6f0:	464b      	mov	r3, r9
 800e6f2:	aa03      	add	r2, sp, #12
 800e6f4:	4621      	mov	r1, r4
 800e6f6:	4640      	mov	r0, r8
 800e6f8:	f8cd a000 	str.w	sl, [sp]
 800e6fc:	f7ff fee0 	bl	800e4c0 <_printf_common>
 800e700:	3001      	adds	r0, #1
 800e702:	d14c      	bne.n	800e79e <_printf_i+0x1fe>
 800e704:	f04f 30ff 	mov.w	r0, #4294967295
 800e708:	b004      	add	sp, #16
 800e70a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e70e:	4835      	ldr	r0, [pc, #212]	; (800e7e4 <_printf_i+0x244>)
 800e710:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e714:	6829      	ldr	r1, [r5, #0]
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	f851 6b04 	ldr.w	r6, [r1], #4
 800e71c:	6029      	str	r1, [r5, #0]
 800e71e:	061d      	lsls	r5, r3, #24
 800e720:	d514      	bpl.n	800e74c <_printf_i+0x1ac>
 800e722:	07df      	lsls	r7, r3, #31
 800e724:	bf44      	itt	mi
 800e726:	f043 0320 	orrmi.w	r3, r3, #32
 800e72a:	6023      	strmi	r3, [r4, #0]
 800e72c:	b91e      	cbnz	r6, 800e736 <_printf_i+0x196>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	f023 0320 	bic.w	r3, r3, #32
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	2310      	movs	r3, #16
 800e738:	e7b0      	b.n	800e69c <_printf_i+0xfc>
 800e73a:	6823      	ldr	r3, [r4, #0]
 800e73c:	f043 0320 	orr.w	r3, r3, #32
 800e740:	6023      	str	r3, [r4, #0]
 800e742:	2378      	movs	r3, #120	; 0x78
 800e744:	4828      	ldr	r0, [pc, #160]	; (800e7e8 <_printf_i+0x248>)
 800e746:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e74a:	e7e3      	b.n	800e714 <_printf_i+0x174>
 800e74c:	0659      	lsls	r1, r3, #25
 800e74e:	bf48      	it	mi
 800e750:	b2b6      	uxthmi	r6, r6
 800e752:	e7e6      	b.n	800e722 <_printf_i+0x182>
 800e754:	4615      	mov	r5, r2
 800e756:	e7bb      	b.n	800e6d0 <_printf_i+0x130>
 800e758:	682b      	ldr	r3, [r5, #0]
 800e75a:	6826      	ldr	r6, [r4, #0]
 800e75c:	1d18      	adds	r0, r3, #4
 800e75e:	6961      	ldr	r1, [r4, #20]
 800e760:	6028      	str	r0, [r5, #0]
 800e762:	0635      	lsls	r5, r6, #24
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	d501      	bpl.n	800e76c <_printf_i+0x1cc>
 800e768:	6019      	str	r1, [r3, #0]
 800e76a:	e002      	b.n	800e772 <_printf_i+0x1d2>
 800e76c:	0670      	lsls	r0, r6, #25
 800e76e:	d5fb      	bpl.n	800e768 <_printf_i+0x1c8>
 800e770:	8019      	strh	r1, [r3, #0]
 800e772:	2300      	movs	r3, #0
 800e774:	4615      	mov	r5, r2
 800e776:	6123      	str	r3, [r4, #16]
 800e778:	e7ba      	b.n	800e6f0 <_printf_i+0x150>
 800e77a:	682b      	ldr	r3, [r5, #0]
 800e77c:	2100      	movs	r1, #0
 800e77e:	1d1a      	adds	r2, r3, #4
 800e780:	602a      	str	r2, [r5, #0]
 800e782:	681d      	ldr	r5, [r3, #0]
 800e784:	6862      	ldr	r2, [r4, #4]
 800e786:	4628      	mov	r0, r5
 800e788:	f000 f830 	bl	800e7ec <memchr>
 800e78c:	b108      	cbz	r0, 800e792 <_printf_i+0x1f2>
 800e78e:	1b40      	subs	r0, r0, r5
 800e790:	6060      	str	r0, [r4, #4]
 800e792:	6863      	ldr	r3, [r4, #4]
 800e794:	6123      	str	r3, [r4, #16]
 800e796:	2300      	movs	r3, #0
 800e798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e79c:	e7a8      	b.n	800e6f0 <_printf_i+0x150>
 800e79e:	6923      	ldr	r3, [r4, #16]
 800e7a0:	462a      	mov	r2, r5
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	47d0      	blx	sl
 800e7a8:	3001      	adds	r0, #1
 800e7aa:	d0ab      	beq.n	800e704 <_printf_i+0x164>
 800e7ac:	6823      	ldr	r3, [r4, #0]
 800e7ae:	079b      	lsls	r3, r3, #30
 800e7b0:	d413      	bmi.n	800e7da <_printf_i+0x23a>
 800e7b2:	68e0      	ldr	r0, [r4, #12]
 800e7b4:	9b03      	ldr	r3, [sp, #12]
 800e7b6:	4298      	cmp	r0, r3
 800e7b8:	bfb8      	it	lt
 800e7ba:	4618      	movlt	r0, r3
 800e7bc:	e7a4      	b.n	800e708 <_printf_i+0x168>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	4632      	mov	r2, r6
 800e7c2:	4649      	mov	r1, r9
 800e7c4:	4640      	mov	r0, r8
 800e7c6:	47d0      	blx	sl
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d09b      	beq.n	800e704 <_printf_i+0x164>
 800e7cc:	3501      	adds	r5, #1
 800e7ce:	68e3      	ldr	r3, [r4, #12]
 800e7d0:	9903      	ldr	r1, [sp, #12]
 800e7d2:	1a5b      	subs	r3, r3, r1
 800e7d4:	42ab      	cmp	r3, r5
 800e7d6:	dcf2      	bgt.n	800e7be <_printf_i+0x21e>
 800e7d8:	e7eb      	b.n	800e7b2 <_printf_i+0x212>
 800e7da:	2500      	movs	r5, #0
 800e7dc:	f104 0619 	add.w	r6, r4, #25
 800e7e0:	e7f5      	b.n	800e7ce <_printf_i+0x22e>
 800e7e2:	bf00      	nop
 800e7e4:	080243e1 	.word	0x080243e1
 800e7e8:	080243f2 	.word	0x080243f2

0800e7ec <memchr>:
 800e7ec:	b2c9      	uxtb	r1, r1
 800e7ee:	4402      	add	r2, r0
 800e7f0:	b510      	push	{r4, lr}
 800e7f2:	4290      	cmp	r0, r2
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	d101      	bne.n	800e7fc <memchr+0x10>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e003      	b.n	800e804 <memchr+0x18>
 800e7fc:	781c      	ldrb	r4, [r3, #0]
 800e7fe:	3001      	adds	r0, #1
 800e800:	428c      	cmp	r4, r1
 800e802:	d1f6      	bne.n	800e7f2 <memchr+0x6>
 800e804:	4618      	mov	r0, r3
 800e806:	bd10      	pop	{r4, pc}

0800e808 <memmove>:
 800e808:	4288      	cmp	r0, r1
 800e80a:	b510      	push	{r4, lr}
 800e80c:	eb01 0402 	add.w	r4, r1, r2
 800e810:	d902      	bls.n	800e818 <memmove+0x10>
 800e812:	4284      	cmp	r4, r0
 800e814:	4623      	mov	r3, r4
 800e816:	d807      	bhi.n	800e828 <memmove+0x20>
 800e818:	1e43      	subs	r3, r0, #1
 800e81a:	42a1      	cmp	r1, r4
 800e81c:	d008      	beq.n	800e830 <memmove+0x28>
 800e81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e822:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e826:	e7f8      	b.n	800e81a <memmove+0x12>
 800e828:	4402      	add	r2, r0
 800e82a:	4601      	mov	r1, r0
 800e82c:	428a      	cmp	r2, r1
 800e82e:	d100      	bne.n	800e832 <memmove+0x2a>
 800e830:	bd10      	pop	{r4, pc}
 800e832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e83a:	e7f7      	b.n	800e82c <memmove+0x24>

0800e83c <_free_r>:
 800e83c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e83e:	2900      	cmp	r1, #0
 800e840:	d043      	beq.n	800e8ca <_free_r+0x8e>
 800e842:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e846:	1f0c      	subs	r4, r1, #4
 800e848:	9001      	str	r0, [sp, #4]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	bfb8      	it	lt
 800e84e:	18e4      	addlt	r4, r4, r3
 800e850:	f000 f914 	bl	800ea7c <__malloc_lock>
 800e854:	4a1e      	ldr	r2, [pc, #120]	; (800e8d0 <_free_r+0x94>)
 800e856:	9801      	ldr	r0, [sp, #4]
 800e858:	6813      	ldr	r3, [r2, #0]
 800e85a:	b933      	cbnz	r3, 800e86a <_free_r+0x2e>
 800e85c:	6063      	str	r3, [r4, #4]
 800e85e:	6014      	str	r4, [r2, #0]
 800e860:	b003      	add	sp, #12
 800e862:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e866:	f000 b90f 	b.w	800ea88 <__malloc_unlock>
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	d908      	bls.n	800e880 <_free_r+0x44>
 800e86e:	6825      	ldr	r5, [r4, #0]
 800e870:	1961      	adds	r1, r4, r5
 800e872:	428b      	cmp	r3, r1
 800e874:	bf01      	itttt	eq
 800e876:	6819      	ldreq	r1, [r3, #0]
 800e878:	685b      	ldreq	r3, [r3, #4]
 800e87a:	1949      	addeq	r1, r1, r5
 800e87c:	6021      	streq	r1, [r4, #0]
 800e87e:	e7ed      	b.n	800e85c <_free_r+0x20>
 800e880:	461a      	mov	r2, r3
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	b10b      	cbz	r3, 800e88a <_free_r+0x4e>
 800e886:	42a3      	cmp	r3, r4
 800e888:	d9fa      	bls.n	800e880 <_free_r+0x44>
 800e88a:	6811      	ldr	r1, [r2, #0]
 800e88c:	1855      	adds	r5, r2, r1
 800e88e:	42a5      	cmp	r5, r4
 800e890:	d10b      	bne.n	800e8aa <_free_r+0x6e>
 800e892:	6824      	ldr	r4, [r4, #0]
 800e894:	4421      	add	r1, r4
 800e896:	1854      	adds	r4, r2, r1
 800e898:	6011      	str	r1, [r2, #0]
 800e89a:	42a3      	cmp	r3, r4
 800e89c:	d1e0      	bne.n	800e860 <_free_r+0x24>
 800e89e:	681c      	ldr	r4, [r3, #0]
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	4421      	add	r1, r4
 800e8a4:	6053      	str	r3, [r2, #4]
 800e8a6:	6011      	str	r1, [r2, #0]
 800e8a8:	e7da      	b.n	800e860 <_free_r+0x24>
 800e8aa:	d902      	bls.n	800e8b2 <_free_r+0x76>
 800e8ac:	230c      	movs	r3, #12
 800e8ae:	6003      	str	r3, [r0, #0]
 800e8b0:	e7d6      	b.n	800e860 <_free_r+0x24>
 800e8b2:	6825      	ldr	r5, [r4, #0]
 800e8b4:	1961      	adds	r1, r4, r5
 800e8b6:	428b      	cmp	r3, r1
 800e8b8:	bf02      	ittt	eq
 800e8ba:	6819      	ldreq	r1, [r3, #0]
 800e8bc:	685b      	ldreq	r3, [r3, #4]
 800e8be:	1949      	addeq	r1, r1, r5
 800e8c0:	6063      	str	r3, [r4, #4]
 800e8c2:	bf08      	it	eq
 800e8c4:	6021      	streq	r1, [r4, #0]
 800e8c6:	6054      	str	r4, [r2, #4]
 800e8c8:	e7ca      	b.n	800e860 <_free_r+0x24>
 800e8ca:	b003      	add	sp, #12
 800e8cc:	bd30      	pop	{r4, r5, pc}
 800e8ce:	bf00      	nop
 800e8d0:	2000375c 	.word	0x2000375c

0800e8d4 <sbrk_aligned>:
 800e8d4:	b570      	push	{r4, r5, r6, lr}
 800e8d6:	4e0e      	ldr	r6, [pc, #56]	; (800e910 <sbrk_aligned+0x3c>)
 800e8d8:	460c      	mov	r4, r1
 800e8da:	4605      	mov	r5, r0
 800e8dc:	6831      	ldr	r1, [r6, #0]
 800e8de:	b911      	cbnz	r1, 800e8e6 <sbrk_aligned+0x12>
 800e8e0:	f000 f8bc 	bl	800ea5c <_sbrk_r>
 800e8e4:	6030      	str	r0, [r6, #0]
 800e8e6:	4621      	mov	r1, r4
 800e8e8:	4628      	mov	r0, r5
 800e8ea:	f000 f8b7 	bl	800ea5c <_sbrk_r>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	d00a      	beq.n	800e908 <sbrk_aligned+0x34>
 800e8f2:	1cc4      	adds	r4, r0, #3
 800e8f4:	f024 0403 	bic.w	r4, r4, #3
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d007      	beq.n	800e90c <sbrk_aligned+0x38>
 800e8fc:	1a21      	subs	r1, r4, r0
 800e8fe:	4628      	mov	r0, r5
 800e900:	f000 f8ac 	bl	800ea5c <_sbrk_r>
 800e904:	3001      	adds	r0, #1
 800e906:	d101      	bne.n	800e90c <sbrk_aligned+0x38>
 800e908:	f04f 34ff 	mov.w	r4, #4294967295
 800e90c:	4620      	mov	r0, r4
 800e90e:	bd70      	pop	{r4, r5, r6, pc}
 800e910:	20003760 	.word	0x20003760

0800e914 <_malloc_r>:
 800e914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e918:	1ccd      	adds	r5, r1, #3
 800e91a:	4607      	mov	r7, r0
 800e91c:	f025 0503 	bic.w	r5, r5, #3
 800e920:	3508      	adds	r5, #8
 800e922:	2d0c      	cmp	r5, #12
 800e924:	bf38      	it	cc
 800e926:	250c      	movcc	r5, #12
 800e928:	2d00      	cmp	r5, #0
 800e92a:	db01      	blt.n	800e930 <_malloc_r+0x1c>
 800e92c:	42a9      	cmp	r1, r5
 800e92e:	d905      	bls.n	800e93c <_malloc_r+0x28>
 800e930:	230c      	movs	r3, #12
 800e932:	2600      	movs	r6, #0
 800e934:	603b      	str	r3, [r7, #0]
 800e936:	4630      	mov	r0, r6
 800e938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e93c:	4e2e      	ldr	r6, [pc, #184]	; (800e9f8 <_malloc_r+0xe4>)
 800e93e:	f000 f89d 	bl	800ea7c <__malloc_lock>
 800e942:	6833      	ldr	r3, [r6, #0]
 800e944:	461c      	mov	r4, r3
 800e946:	bb34      	cbnz	r4, 800e996 <_malloc_r+0x82>
 800e948:	4629      	mov	r1, r5
 800e94a:	4638      	mov	r0, r7
 800e94c:	f7ff ffc2 	bl	800e8d4 <sbrk_aligned>
 800e950:	1c43      	adds	r3, r0, #1
 800e952:	4604      	mov	r4, r0
 800e954:	d14d      	bne.n	800e9f2 <_malloc_r+0xde>
 800e956:	6834      	ldr	r4, [r6, #0]
 800e958:	4626      	mov	r6, r4
 800e95a:	2e00      	cmp	r6, #0
 800e95c:	d140      	bne.n	800e9e0 <_malloc_r+0xcc>
 800e95e:	6823      	ldr	r3, [r4, #0]
 800e960:	4631      	mov	r1, r6
 800e962:	4638      	mov	r0, r7
 800e964:	eb04 0803 	add.w	r8, r4, r3
 800e968:	f000 f878 	bl	800ea5c <_sbrk_r>
 800e96c:	4580      	cmp	r8, r0
 800e96e:	d13a      	bne.n	800e9e6 <_malloc_r+0xd2>
 800e970:	6821      	ldr	r1, [r4, #0]
 800e972:	3503      	adds	r5, #3
 800e974:	4638      	mov	r0, r7
 800e976:	1a6d      	subs	r5, r5, r1
 800e978:	f025 0503 	bic.w	r5, r5, #3
 800e97c:	3508      	adds	r5, #8
 800e97e:	2d0c      	cmp	r5, #12
 800e980:	bf38      	it	cc
 800e982:	250c      	movcc	r5, #12
 800e984:	4629      	mov	r1, r5
 800e986:	f7ff ffa5 	bl	800e8d4 <sbrk_aligned>
 800e98a:	3001      	adds	r0, #1
 800e98c:	d02b      	beq.n	800e9e6 <_malloc_r+0xd2>
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	442b      	add	r3, r5
 800e992:	6023      	str	r3, [r4, #0]
 800e994:	e00e      	b.n	800e9b4 <_malloc_r+0xa0>
 800e996:	6822      	ldr	r2, [r4, #0]
 800e998:	1b52      	subs	r2, r2, r5
 800e99a:	d41e      	bmi.n	800e9da <_malloc_r+0xc6>
 800e99c:	2a0b      	cmp	r2, #11
 800e99e:	d916      	bls.n	800e9ce <_malloc_r+0xba>
 800e9a0:	1961      	adds	r1, r4, r5
 800e9a2:	42a3      	cmp	r3, r4
 800e9a4:	6025      	str	r5, [r4, #0]
 800e9a6:	bf18      	it	ne
 800e9a8:	6059      	strne	r1, [r3, #4]
 800e9aa:	6863      	ldr	r3, [r4, #4]
 800e9ac:	bf08      	it	eq
 800e9ae:	6031      	streq	r1, [r6, #0]
 800e9b0:	5162      	str	r2, [r4, r5]
 800e9b2:	604b      	str	r3, [r1, #4]
 800e9b4:	f104 060b 	add.w	r6, r4, #11
 800e9b8:	4638      	mov	r0, r7
 800e9ba:	f000 f865 	bl	800ea88 <__malloc_unlock>
 800e9be:	1d23      	adds	r3, r4, #4
 800e9c0:	f026 0607 	bic.w	r6, r6, #7
 800e9c4:	1af2      	subs	r2, r6, r3
 800e9c6:	d0b6      	beq.n	800e936 <_malloc_r+0x22>
 800e9c8:	1b9b      	subs	r3, r3, r6
 800e9ca:	50a3      	str	r3, [r4, r2]
 800e9cc:	e7b3      	b.n	800e936 <_malloc_r+0x22>
 800e9ce:	6862      	ldr	r2, [r4, #4]
 800e9d0:	42a3      	cmp	r3, r4
 800e9d2:	bf0c      	ite	eq
 800e9d4:	6032      	streq	r2, [r6, #0]
 800e9d6:	605a      	strne	r2, [r3, #4]
 800e9d8:	e7ec      	b.n	800e9b4 <_malloc_r+0xa0>
 800e9da:	4623      	mov	r3, r4
 800e9dc:	6864      	ldr	r4, [r4, #4]
 800e9de:	e7b2      	b.n	800e946 <_malloc_r+0x32>
 800e9e0:	4634      	mov	r4, r6
 800e9e2:	6876      	ldr	r6, [r6, #4]
 800e9e4:	e7b9      	b.n	800e95a <_malloc_r+0x46>
 800e9e6:	230c      	movs	r3, #12
 800e9e8:	4638      	mov	r0, r7
 800e9ea:	603b      	str	r3, [r7, #0]
 800e9ec:	f000 f84c 	bl	800ea88 <__malloc_unlock>
 800e9f0:	e7a1      	b.n	800e936 <_malloc_r+0x22>
 800e9f2:	6025      	str	r5, [r4, #0]
 800e9f4:	e7de      	b.n	800e9b4 <_malloc_r+0xa0>
 800e9f6:	bf00      	nop
 800e9f8:	2000375c 	.word	0x2000375c

0800e9fc <_realloc_r>:
 800e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea00:	4680      	mov	r8, r0
 800ea02:	4614      	mov	r4, r2
 800ea04:	460e      	mov	r6, r1
 800ea06:	b921      	cbnz	r1, 800ea12 <_realloc_r+0x16>
 800ea08:	4611      	mov	r1, r2
 800ea0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0e:	f7ff bf81 	b.w	800e914 <_malloc_r>
 800ea12:	b92a      	cbnz	r2, 800ea20 <_realloc_r+0x24>
 800ea14:	4625      	mov	r5, r4
 800ea16:	f7ff ff11 	bl	800e83c <_free_r>
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	f000 f838 	bl	800ea94 <_malloc_usable_size_r>
 800ea24:	4284      	cmp	r4, r0
 800ea26:	4607      	mov	r7, r0
 800ea28:	d802      	bhi.n	800ea30 <_realloc_r+0x34>
 800ea2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea2e:	d812      	bhi.n	800ea56 <_realloc_r+0x5a>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4640      	mov	r0, r8
 800ea34:	f7ff ff6e 	bl	800e914 <_malloc_r>
 800ea38:	4605      	mov	r5, r0
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d0ed      	beq.n	800ea1a <_realloc_r+0x1e>
 800ea3e:	42bc      	cmp	r4, r7
 800ea40:	4622      	mov	r2, r4
 800ea42:	4631      	mov	r1, r6
 800ea44:	bf28      	it	cs
 800ea46:	463a      	movcs	r2, r7
 800ea48:	f7ff fba8 	bl	800e19c <memcpy>
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f7ff fef4 	bl	800e83c <_free_r>
 800ea54:	e7e1      	b.n	800ea1a <_realloc_r+0x1e>
 800ea56:	4635      	mov	r5, r6
 800ea58:	e7df      	b.n	800ea1a <_realloc_r+0x1e>
	...

0800ea5c <_sbrk_r>:
 800ea5c:	b538      	push	{r3, r4, r5, lr}
 800ea5e:	2300      	movs	r3, #0
 800ea60:	4d05      	ldr	r5, [pc, #20]	; (800ea78 <_sbrk_r+0x1c>)
 800ea62:	4604      	mov	r4, r0
 800ea64:	4608      	mov	r0, r1
 800ea66:	602b      	str	r3, [r5, #0]
 800ea68:	f7f3 fa54 	bl	8001f14 <_sbrk>
 800ea6c:	1c43      	adds	r3, r0, #1
 800ea6e:	d102      	bne.n	800ea76 <_sbrk_r+0x1a>
 800ea70:	682b      	ldr	r3, [r5, #0]
 800ea72:	b103      	cbz	r3, 800ea76 <_sbrk_r+0x1a>
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	bd38      	pop	{r3, r4, r5, pc}
 800ea78:	20003764 	.word	0x20003764

0800ea7c <__malloc_lock>:
 800ea7c:	4801      	ldr	r0, [pc, #4]	; (800ea84 <__malloc_lock+0x8>)
 800ea7e:	f000 b811 	b.w	800eaa4 <__retarget_lock_acquire_recursive>
 800ea82:	bf00      	nop
 800ea84:	20003768 	.word	0x20003768

0800ea88 <__malloc_unlock>:
 800ea88:	4801      	ldr	r0, [pc, #4]	; (800ea90 <__malloc_unlock+0x8>)
 800ea8a:	f000 b80c 	b.w	800eaa6 <__retarget_lock_release_recursive>
 800ea8e:	bf00      	nop
 800ea90:	20003768 	.word	0x20003768

0800ea94 <_malloc_usable_size_r>:
 800ea94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea98:	1f18      	subs	r0, r3, #4
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	bfbc      	itt	lt
 800ea9e:	580b      	ldrlt	r3, [r1, r0]
 800eaa0:	18c0      	addlt	r0, r0, r3
 800eaa2:	4770      	bx	lr

0800eaa4 <__retarget_lock_acquire_recursive>:
 800eaa4:	4770      	bx	lr

0800eaa6 <__retarget_lock_release_recursive>:
 800eaa6:	4770      	bx	lr

0800eaa8 <_init>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	bf00      	nop
 800eaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaae:	bc08      	pop	{r3}
 800eab0:	469e      	mov	lr, r3
 800eab2:	4770      	bx	lr

0800eab4 <_fini>:
 800eab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab6:	bf00      	nop
 800eab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaba:	bc08      	pop	{r3}
 800eabc:	469e      	mov	lr, r3
 800eabe:	4770      	bx	lr
